
AutoCar3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000176  00800060  00004040  000040d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000076  008001d6  008001d6  0000424a  2**0
                  ALLOC
  3 .stab         00005154  00000000  00000000  0000424c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000463d  00000000  00000000  000093a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  0000d9dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000007f  00000000  00000000  0000da3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b4c  00000000  00000000  0000dabc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003c9  00000000  00000000  0000e608  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003da  00000000  00000000  0000e9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  0000edac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000169  00000000  00000000  0000ee0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001038  00000000  00000000  0000ef75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000ffad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__vector_1>
       8:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__vector_2>
       c:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 ed       	ldi	r26, 0xD6	; 214
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 34       	cpi	r26, 0x4C	; 76
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <main>
      8a:	0c 94 1e 20 	jmp	0x403c	; 0x403c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 be 1f 	jmp	0x3f7c	; 0x3f7c <__epilogue_restores__>

00000288 <__ashldi3>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	60 97       	sbiw	r28, 0x10	; 16
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	a8 2f       	mov	r26, r24
     2a4:	00 23       	and	r16, r16
     2a6:	09 f4       	brne	.+2      	; 0x2aa <__ashldi3+0x22>
     2a8:	61 c0       	rjmp	.+194    	; 0x36c <__ashldi3+0xe4>
     2aa:	7e 01       	movw	r14, r28
     2ac:	08 94       	sec
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	f7 01       	movw	r30, r14
     2b6:	11 92       	st	Z+, r1
     2b8:	8a 95       	dec	r24
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <__ashldi3+0x2e>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	af 83       	std	Y+7, r26	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 1b       	sub	r24, r16
     2d0:	e8 2f       	mov	r30, r24
     2d2:	ff 27       	eor	r31, r31
     2d4:	e7 fd       	sbrc	r30, 7
     2d6:	f0 95       	com	r31
     2d8:	49 81       	ldd	r20, Y+1	; 0x01
     2da:	5a 81       	ldd	r21, Y+2	; 0x02
     2dc:	6b 81       	ldd	r22, Y+3	; 0x03
     2de:	7c 81       	ldd	r23, Y+4	; 0x04
     2e0:	18 16       	cp	r1, r24
     2e2:	84 f0       	brlt	.+32     	; 0x304 <__ashldi3+0x7c>
     2e4:	19 86       	std	Y+9, r1	; 0x09
     2e6:	1a 86       	std	Y+10, r1	; 0x0a
     2e8:	1b 86       	std	Y+11, r1	; 0x0b
     2ea:	1c 86       	std	Y+12, r1	; 0x0c
     2ec:	88 27       	eor	r24, r24
     2ee:	99 27       	eor	r25, r25
     2f0:	8e 1b       	sub	r24, r30
     2f2:	9f 0b       	sbc	r25, r31
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__ashldi3+0x76>
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	66 1f       	adc	r22, r22
     2fc:	77 1f       	adc	r23, r23
     2fe:	8a 95       	dec	r24
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__ashldi3+0x6e>
     302:	28 c0       	rjmp	.+80     	; 0x354 <__ashldi3+0xcc>
     304:	20 2f       	mov	r18, r16
     306:	33 27       	eor	r19, r19
     308:	27 fd       	sbrc	r18, 7
     30a:	30 95       	com	r19
     30c:	db 01       	movw	r26, r22
     30e:	ca 01       	movw	r24, r20
     310:	02 2e       	mov	r0, r18
     312:	04 c0       	rjmp	.+8      	; 0x31c <__ashldi3+0x94>
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	aa 1f       	adc	r26, r26
     31a:	bb 1f       	adc	r27, r27
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__ashldi3+0x8c>
     320:	89 87       	std	Y+9, r24	; 0x09
     322:	9a 87       	std	Y+10, r25	; 0x0a
     324:	ab 87       	std	Y+11, r26	; 0x0b
     326:	bc 87       	std	Y+12, r27	; 0x0c
     328:	04 c0       	rjmp	.+8      	; 0x332 <__ashldi3+0xaa>
     32a:	76 95       	lsr	r23
     32c:	67 95       	ror	r22
     32e:	57 95       	ror	r21
     330:	47 95       	ror	r20
     332:	ea 95       	dec	r30
     334:	d2 f7       	brpl	.-12     	; 0x32a <__ashldi3+0xa2>
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	9e 81       	ldd	r25, Y+6	; 0x06
     33a:	af 81       	ldd	r26, Y+7	; 0x07
     33c:	b8 85       	ldd	r27, Y+8	; 0x08
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__ashldi3+0xc0>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	aa 1f       	adc	r26, r26
     346:	bb 1f       	adc	r27, r27
     348:	2a 95       	dec	r18
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__ashldi3+0xb8>
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	4d 87       	std	Y+13, r20	; 0x0d
     356:	5e 87       	std	Y+14, r21	; 0x0e
     358:	6f 87       	std	Y+15, r22	; 0x0f
     35a:	78 8b       	std	Y+16, r23	; 0x10
     35c:	29 85       	ldd	r18, Y+9	; 0x09
     35e:	3a 85       	ldd	r19, Y+10	; 0x0a
     360:	4b 85       	ldd	r20, Y+11	; 0x0b
     362:	5c 85       	ldd	r21, Y+12	; 0x0c
     364:	6d 85       	ldd	r22, Y+13	; 0x0d
     366:	7e 85       	ldd	r23, Y+14	; 0x0e
     368:	af 85       	ldd	r26, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	8a 2f       	mov	r24, r26
     36e:	60 96       	adiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <__udivdi3>:
     386:	ae e5       	ldi	r26, 0x5E	; 94
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	e9 ec       	ldi	r30, 0xC9	; 201
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <__prologue_saves__>
     392:	a8 e0       	ldi	r26, 0x08	; 8
     394:	4e 01       	movw	r8, r28
     396:	08 94       	sec
     398:	81 1c       	adc	r8, r1
     39a:	91 1c       	adc	r9, r1
     39c:	f4 01       	movw	r30, r8
     39e:	6a 2e       	mov	r6, r26
     3a0:	11 92       	st	Z+, r1
     3a2:	6a 94       	dec	r6
     3a4:	e9 f7       	brne	.-6      	; 0x3a0 <__udivdi3+0x1a>
     3a6:	29 83       	std	Y+1, r18	; 0x01
     3a8:	3a 83       	std	Y+2, r19	; 0x02
     3aa:	4b 83       	std	Y+3, r20	; 0x03
     3ac:	5c 83       	std	Y+4, r21	; 0x04
     3ae:	6d 83       	std	Y+5, r22	; 0x05
     3b0:	7e 83       	std	Y+6, r23	; 0x06
     3b2:	8f 83       	std	Y+7, r24	; 0x07
     3b4:	98 87       	std	Y+8, r25	; 0x08
     3b6:	ce 01       	movw	r24, r28
     3b8:	09 96       	adiw	r24, 0x09	; 9
     3ba:	fc 01       	movw	r30, r24
     3bc:	11 92       	st	Z+, r1
     3be:	aa 95       	dec	r26
     3c0:	e9 f7       	brne	.-6      	; 0x3bc <__udivdi3+0x36>
     3c2:	a9 86       	std	Y+9, r10	; 0x09
     3c4:	ba 86       	std	Y+10, r11	; 0x0a
     3c6:	cb 86       	std	Y+11, r12	; 0x0b
     3c8:	dc 86       	std	Y+12, r13	; 0x0c
     3ca:	ed 86       	std	Y+13, r14	; 0x0d
     3cc:	fe 86       	std	Y+14, r15	; 0x0e
     3ce:	0f 87       	std	Y+15, r16	; 0x0f
     3d0:	18 8b       	std	Y+16, r17	; 0x10
     3d2:	29 84       	ldd	r2, Y+9	; 0x09
     3d4:	3a 84       	ldd	r3, Y+10	; 0x0a
     3d6:	4b 84       	ldd	r4, Y+11	; 0x0b
     3d8:	5c 84       	ldd	r5, Y+12	; 0x0c
     3da:	ed 84       	ldd	r14, Y+13	; 0x0d
     3dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     3de:	0f 85       	ldd	r16, Y+15	; 0x0f
     3e0:	18 89       	ldd	r17, Y+16	; 0x10
     3e2:	69 80       	ldd	r6, Y+1	; 0x01
     3e4:	7a 80       	ldd	r7, Y+2	; 0x02
     3e6:	8b 80       	ldd	r8, Y+3	; 0x03
     3e8:	9c 80       	ldd	r9, Y+4	; 0x04
     3ea:	6d a6       	std	Y+45, r6	; 0x2d
     3ec:	7e a6       	std	Y+46, r7	; 0x2e
     3ee:	8f a6       	std	Y+47, r8	; 0x2f
     3f0:	98 aa       	std	Y+48, r9	; 0x30
     3f2:	6d 80       	ldd	r6, Y+5	; 0x05
     3f4:	7e 80       	ldd	r7, Y+6	; 0x06
     3f6:	8f 80       	ldd	r8, Y+7	; 0x07
     3f8:	98 84       	ldd	r9, Y+8	; 0x08
     3fa:	e1 14       	cp	r14, r1
     3fc:	f1 04       	cpc	r15, r1
     3fe:	01 05       	cpc	r16, r1
     400:	11 05       	cpc	r17, r1
     402:	09 f0       	breq	.+2      	; 0x406 <__udivdi3+0x80>
     404:	b3 c3       	rjmp	.+1894   	; 0xb6c <__stack+0x30d>
     406:	62 14       	cp	r6, r2
     408:	73 04       	cpc	r7, r3
     40a:	84 04       	cpc	r8, r4
     40c:	95 04       	cpc	r9, r5
     40e:	08 f0       	brcs	.+2      	; 0x412 <__udivdi3+0x8c>
     410:	3d c1       	rjmp	.+634    	; 0x68c <__udivdi3+0x306>
     412:	00 e0       	ldi	r16, 0x00	; 0
     414:	20 16       	cp	r2, r16
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	30 06       	cpc	r3, r16
     41a:	01 e0       	ldi	r16, 0x01	; 1
     41c:	40 06       	cpc	r4, r16
     41e:	00 e0       	ldi	r16, 0x00	; 0
     420:	50 06       	cpc	r5, r16
     422:	88 f4       	brcc	.+34     	; 0x446 <__udivdi3+0xc0>
     424:	1f ef       	ldi	r17, 0xFF	; 255
     426:	21 16       	cp	r2, r17
     428:	31 04       	cpc	r3, r1
     42a:	41 04       	cpc	r4, r1
     42c:	51 04       	cpc	r5, r1
     42e:	39 f0       	breq	.+14     	; 0x43e <__udivdi3+0xb8>
     430:	30 f0       	brcs	.+12     	; 0x43e <__udivdi3+0xb8>
     432:	48 e0       	ldi	r20, 0x08	; 8
     434:	e4 2e       	mov	r14, r20
     436:	f1 2c       	mov	r15, r1
     438:	01 2d       	mov	r16, r1
     43a:	11 2d       	mov	r17, r1
     43c:	18 c0       	rjmp	.+48     	; 0x46e <__udivdi3+0xe8>
     43e:	ee 24       	eor	r14, r14
     440:	ff 24       	eor	r15, r15
     442:	87 01       	movw	r16, r14
     444:	14 c0       	rjmp	.+40     	; 0x46e <__udivdi3+0xe8>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	22 16       	cp	r2, r18
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	32 06       	cpc	r3, r18
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	42 06       	cpc	r4, r18
     452:	21 e0       	ldi	r18, 0x01	; 1
     454:	52 06       	cpc	r5, r18
     456:	30 f0       	brcs	.+12     	; 0x464 <__udivdi3+0xde>
     458:	38 e1       	ldi	r19, 0x18	; 24
     45a:	e3 2e       	mov	r14, r19
     45c:	f1 2c       	mov	r15, r1
     45e:	01 2d       	mov	r16, r1
     460:	11 2d       	mov	r17, r1
     462:	05 c0       	rjmp	.+10     	; 0x46e <__udivdi3+0xe8>
     464:	20 e1       	ldi	r18, 0x10	; 16
     466:	e2 2e       	mov	r14, r18
     468:	f1 2c       	mov	r15, r1
     46a:	01 2d       	mov	r16, r1
     46c:	11 2d       	mov	r17, r1
     46e:	d2 01       	movw	r26, r4
     470:	c1 01       	movw	r24, r2
     472:	0e 2c       	mov	r0, r14
     474:	04 c0       	rjmp	.+8      	; 0x47e <__udivdi3+0xf8>
     476:	b6 95       	lsr	r27
     478:	a7 95       	ror	r26
     47a:	97 95       	ror	r25
     47c:	87 95       	ror	r24
     47e:	0a 94       	dec	r0
     480:	d2 f7       	brpl	.-12     	; 0x476 <__udivdi3+0xf0>
     482:	8b 58       	subi	r24, 0x8B	; 139
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	dc 01       	movw	r26, r24
     488:	2c 91       	ld	r18, X
     48a:	80 e2       	ldi	r24, 0x20	; 32
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	a0 e0       	ldi	r26, 0x00	; 0
     490:	b0 e0       	ldi	r27, 0x00	; 0
     492:	8e 19       	sub	r24, r14
     494:	9f 09       	sbc	r25, r15
     496:	a0 0b       	sbc	r26, r16
     498:	b1 0b       	sbc	r27, r17
     49a:	7c 01       	movw	r14, r24
     49c:	8d 01       	movw	r16, r26
     49e:	e2 1a       	sub	r14, r18
     4a0:	f1 08       	sbc	r15, r1
     4a2:	01 09       	sbc	r16, r1
     4a4:	11 09       	sbc	r17, r1
     4a6:	e1 14       	cp	r14, r1
     4a8:	f1 04       	cpc	r15, r1
     4aa:	01 05       	cpc	r16, r1
     4ac:	11 05       	cpc	r17, r1
     4ae:	a1 f1       	breq	.+104    	; 0x518 <__udivdi3+0x192>
     4b0:	0e 2c       	mov	r0, r14
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <__udivdi3+0x136>
     4b4:	22 0c       	add	r2, r2
     4b6:	33 1c       	adc	r3, r3
     4b8:	44 1c       	adc	r4, r4
     4ba:	55 1c       	adc	r5, r5
     4bc:	0a 94       	dec	r0
     4be:	d2 f7       	brpl	.-12     	; 0x4b4 <__udivdi3+0x12e>
     4c0:	a4 01       	movw	r20, r8
     4c2:	93 01       	movw	r18, r6
     4c4:	0e 2c       	mov	r0, r14
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__udivdi3+0x14a>
     4c8:	22 0f       	add	r18, r18
     4ca:	33 1f       	adc	r19, r19
     4cc:	44 1f       	adc	r20, r20
     4ce:	55 1f       	adc	r21, r21
     4d0:	0a 94       	dec	r0
     4d2:	d2 f7       	brpl	.-12     	; 0x4c8 <__udivdi3+0x142>
     4d4:	80 e2       	ldi	r24, 0x20	; 32
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	8e 19       	sub	r24, r14
     4da:	9f 09       	sbc	r25, r15
     4dc:	6d a4       	ldd	r6, Y+45	; 0x2d
     4de:	7e a4       	ldd	r7, Y+46	; 0x2e
     4e0:	8f a4       	ldd	r8, Y+47	; 0x2f
     4e2:	98 a8       	ldd	r9, Y+48	; 0x30
     4e4:	04 c0       	rjmp	.+8      	; 0x4ee <__udivdi3+0x168>
     4e6:	96 94       	lsr	r9
     4e8:	87 94       	ror	r8
     4ea:	77 94       	ror	r7
     4ec:	67 94       	ror	r6
     4ee:	8a 95       	dec	r24
     4f0:	d2 f7       	brpl	.-12     	; 0x4e6 <__udivdi3+0x160>
     4f2:	62 2a       	or	r6, r18
     4f4:	73 2a       	or	r7, r19
     4f6:	84 2a       	or	r8, r20
     4f8:	95 2a       	or	r9, r21
     4fa:	ad a4       	ldd	r10, Y+45	; 0x2d
     4fc:	be a4       	ldd	r11, Y+46	; 0x2e
     4fe:	cf a4       	ldd	r12, Y+47	; 0x2f
     500:	d8 a8       	ldd	r13, Y+48	; 0x30
     502:	04 c0       	rjmp	.+8      	; 0x50c <__udivdi3+0x186>
     504:	aa 0c       	add	r10, r10
     506:	bb 1c       	adc	r11, r11
     508:	cc 1c       	adc	r12, r12
     50a:	dd 1c       	adc	r13, r13
     50c:	ea 94       	dec	r14
     50e:	d2 f7       	brpl	.-12     	; 0x504 <__udivdi3+0x17e>
     510:	ad a6       	std	Y+45, r10	; 0x2d
     512:	be a6       	std	Y+46, r11	; 0x2e
     514:	cf a6       	std	Y+47, r12	; 0x2f
     516:	d8 aa       	std	Y+48, r13	; 0x30
     518:	62 01       	movw	r12, r4
     51a:	ee 24       	eor	r14, r14
     51c:	ff 24       	eor	r15, r15
     51e:	cd aa       	std	Y+53, r12	; 0x35
     520:	de aa       	std	Y+54, r13	; 0x36
     522:	ef aa       	std	Y+55, r14	; 0x37
     524:	f8 ae       	std	Y+56, r15	; 0x38
     526:	92 01       	movw	r18, r4
     528:	81 01       	movw	r16, r2
     52a:	20 70       	andi	r18, 0x00	; 0
     52c:	30 70       	andi	r19, 0x00	; 0
     52e:	09 af       	std	Y+57, r16	; 0x39
     530:	1a af       	std	Y+58, r17	; 0x3a
     532:	2b af       	std	Y+59, r18	; 0x3b
     534:	3c af       	std	Y+60, r19	; 0x3c
     536:	c4 01       	movw	r24, r8
     538:	b3 01       	movw	r22, r6
     53a:	a7 01       	movw	r20, r14
     53c:	96 01       	movw	r18, r12
     53e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     542:	7b 01       	movw	r14, r22
     544:	8c 01       	movw	r16, r24
     546:	c4 01       	movw	r24, r8
     548:	b3 01       	movw	r22, r6
     54a:	2d a9       	ldd	r18, Y+53	; 0x35
     54c:	3e a9       	ldd	r19, Y+54	; 0x36
     54e:	4f a9       	ldd	r20, Y+55	; 0x37
     550:	58 ad       	ldd	r21, Y+56	; 0x38
     552:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     556:	c9 01       	movw	r24, r18
     558:	da 01       	movw	r26, r20
     55a:	3c 01       	movw	r6, r24
     55c:	4d 01       	movw	r8, r26
     55e:	c4 01       	movw	r24, r8
     560:	b3 01       	movw	r22, r6
     562:	29 ad       	ldd	r18, Y+57	; 0x39
     564:	3a ad       	ldd	r19, Y+58	; 0x3a
     566:	4b ad       	ldd	r20, Y+59	; 0x3b
     568:	5c ad       	ldd	r21, Y+60	; 0x3c
     56a:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     56e:	9b 01       	movw	r18, r22
     570:	ac 01       	movw	r20, r24
     572:	87 01       	movw	r16, r14
     574:	ff 24       	eor	r15, r15
     576:	ee 24       	eor	r14, r14
     578:	ad a4       	ldd	r10, Y+45	; 0x2d
     57a:	be a4       	ldd	r11, Y+46	; 0x2e
     57c:	cf a4       	ldd	r12, Y+47	; 0x2f
     57e:	d8 a8       	ldd	r13, Y+48	; 0x30
     580:	c6 01       	movw	r24, r12
     582:	aa 27       	eor	r26, r26
     584:	bb 27       	eor	r27, r27
     586:	57 01       	movw	r10, r14
     588:	68 01       	movw	r12, r16
     58a:	a8 2a       	or	r10, r24
     58c:	b9 2a       	or	r11, r25
     58e:	ca 2a       	or	r12, r26
     590:	db 2a       	or	r13, r27
     592:	a2 16       	cp	r10, r18
     594:	b3 06       	cpc	r11, r19
     596:	c4 06       	cpc	r12, r20
     598:	d5 06       	cpc	r13, r21
     59a:	e0 f4       	brcc	.+56     	; 0x5d4 <__udivdi3+0x24e>
     59c:	08 94       	sec
     59e:	61 08       	sbc	r6, r1
     5a0:	71 08       	sbc	r7, r1
     5a2:	81 08       	sbc	r8, r1
     5a4:	91 08       	sbc	r9, r1
     5a6:	a2 0c       	add	r10, r2
     5a8:	b3 1c       	adc	r11, r3
     5aa:	c4 1c       	adc	r12, r4
     5ac:	d5 1c       	adc	r13, r5
     5ae:	a2 14       	cp	r10, r2
     5b0:	b3 04       	cpc	r11, r3
     5b2:	c4 04       	cpc	r12, r4
     5b4:	d5 04       	cpc	r13, r5
     5b6:	70 f0       	brcs	.+28     	; 0x5d4 <__udivdi3+0x24e>
     5b8:	a2 16       	cp	r10, r18
     5ba:	b3 06       	cpc	r11, r19
     5bc:	c4 06       	cpc	r12, r20
     5be:	d5 06       	cpc	r13, r21
     5c0:	48 f4       	brcc	.+18     	; 0x5d4 <__udivdi3+0x24e>
     5c2:	08 94       	sec
     5c4:	61 08       	sbc	r6, r1
     5c6:	71 08       	sbc	r7, r1
     5c8:	81 08       	sbc	r8, r1
     5ca:	91 08       	sbc	r9, r1
     5cc:	a2 0c       	add	r10, r2
     5ce:	b3 1c       	adc	r11, r3
     5d0:	c4 1c       	adc	r12, r4
     5d2:	d5 1c       	adc	r13, r5
     5d4:	a2 1a       	sub	r10, r18
     5d6:	b3 0a       	sbc	r11, r19
     5d8:	c4 0a       	sbc	r12, r20
     5da:	d5 0a       	sbc	r13, r21
     5dc:	c6 01       	movw	r24, r12
     5de:	b5 01       	movw	r22, r10
     5e0:	2d a9       	ldd	r18, Y+53	; 0x35
     5e2:	3e a9       	ldd	r19, Y+54	; 0x36
     5e4:	4f a9       	ldd	r20, Y+55	; 0x37
     5e6:	58 ad       	ldd	r21, Y+56	; 0x38
     5e8:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     5ec:	7b 01       	movw	r14, r22
     5ee:	8c 01       	movw	r16, r24
     5f0:	c6 01       	movw	r24, r12
     5f2:	b5 01       	movw	r22, r10
     5f4:	2d a9       	ldd	r18, Y+53	; 0x35
     5f6:	3e a9       	ldd	r19, Y+54	; 0x36
     5f8:	4f a9       	ldd	r20, Y+55	; 0x37
     5fa:	58 ad       	ldd	r21, Y+56	; 0x38
     5fc:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     600:	c9 01       	movw	r24, r18
     602:	da 01       	movw	r26, r20
     604:	5c 01       	movw	r10, r24
     606:	6d 01       	movw	r12, r26
     608:	c6 01       	movw	r24, r12
     60a:	b5 01       	movw	r22, r10
     60c:	29 ad       	ldd	r18, Y+57	; 0x39
     60e:	3a ad       	ldd	r19, Y+58	; 0x3a
     610:	4b ad       	ldd	r20, Y+59	; 0x3b
     612:	5c ad       	ldd	r21, Y+60	; 0x3c
     614:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     618:	9b 01       	movw	r18, r22
     61a:	ac 01       	movw	r20, r24
     61c:	87 01       	movw	r16, r14
     61e:	ff 24       	eor	r15, r15
     620:	ee 24       	eor	r14, r14
     622:	8d a5       	ldd	r24, Y+45	; 0x2d
     624:	9e a5       	ldd	r25, Y+46	; 0x2e
     626:	af a5       	ldd	r26, Y+47	; 0x2f
     628:	b8 a9       	ldd	r27, Y+48	; 0x30
     62a:	a0 70       	andi	r26, 0x00	; 0
     62c:	b0 70       	andi	r27, 0x00	; 0
     62e:	e8 2a       	or	r14, r24
     630:	f9 2a       	or	r15, r25
     632:	0a 2b       	or	r16, r26
     634:	1b 2b       	or	r17, r27
     636:	e2 16       	cp	r14, r18
     638:	f3 06       	cpc	r15, r19
     63a:	04 07       	cpc	r16, r20
     63c:	15 07       	cpc	r17, r21
     63e:	c0 f4       	brcc	.+48     	; 0x670 <__udivdi3+0x2ea>
     640:	08 94       	sec
     642:	a1 08       	sbc	r10, r1
     644:	b1 08       	sbc	r11, r1
     646:	c1 08       	sbc	r12, r1
     648:	d1 08       	sbc	r13, r1
     64a:	e2 0c       	add	r14, r2
     64c:	f3 1c       	adc	r15, r3
     64e:	04 1d       	adc	r16, r4
     650:	15 1d       	adc	r17, r5
     652:	e2 14       	cp	r14, r2
     654:	f3 04       	cpc	r15, r3
     656:	04 05       	cpc	r16, r4
     658:	15 05       	cpc	r17, r5
     65a:	50 f0       	brcs	.+20     	; 0x670 <__udivdi3+0x2ea>
     65c:	e2 16       	cp	r14, r18
     65e:	f3 06       	cpc	r15, r19
     660:	04 07       	cpc	r16, r20
     662:	15 07       	cpc	r17, r21
     664:	28 f4       	brcc	.+10     	; 0x670 <__udivdi3+0x2ea>
     666:	08 94       	sec
     668:	a1 08       	sbc	r10, r1
     66a:	b1 08       	sbc	r11, r1
     66c:	c1 08       	sbc	r12, r1
     66e:	d1 08       	sbc	r13, r1
     670:	d3 01       	movw	r26, r6
     672:	99 27       	eor	r25, r25
     674:	88 27       	eor	r24, r24
     676:	86 01       	movw	r16, r12
     678:	75 01       	movw	r14, r10
     67a:	e8 2a       	or	r14, r24
     67c:	f9 2a       	or	r15, r25
     67e:	0a 2b       	or	r16, r26
     680:	1b 2b       	or	r17, r27
     682:	e9 aa       	std	Y+49, r14	; 0x31
     684:	fa aa       	std	Y+50, r15	; 0x32
     686:	0b ab       	std	Y+51, r16	; 0x33
     688:	1c ab       	std	Y+52, r17	; 0x34
     68a:	cf c4       	rjmp	.+2462   	; 0x102a <__stack+0x7cb>
     68c:	21 14       	cp	r2, r1
     68e:	31 04       	cpc	r3, r1
     690:	41 04       	cpc	r4, r1
     692:	51 04       	cpc	r5, r1
     694:	71 f4       	brne	.+28     	; 0x6b2 <__udivdi3+0x32c>
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     6aa:	c9 01       	movw	r24, r18
     6ac:	da 01       	movw	r26, r20
     6ae:	1c 01       	movw	r2, r24
     6b0:	2d 01       	movw	r4, r26
     6b2:	00 e0       	ldi	r16, 0x00	; 0
     6b4:	20 16       	cp	r2, r16
     6b6:	00 e0       	ldi	r16, 0x00	; 0
     6b8:	30 06       	cpc	r3, r16
     6ba:	01 e0       	ldi	r16, 0x01	; 1
     6bc:	40 06       	cpc	r4, r16
     6be:	00 e0       	ldi	r16, 0x00	; 0
     6c0:	50 06       	cpc	r5, r16
     6c2:	88 f4       	brcc	.+34     	; 0x6e6 <__udivdi3+0x360>
     6c4:	1f ef       	ldi	r17, 0xFF	; 255
     6c6:	21 16       	cp	r2, r17
     6c8:	31 04       	cpc	r3, r1
     6ca:	41 04       	cpc	r4, r1
     6cc:	51 04       	cpc	r5, r1
     6ce:	31 f0       	breq	.+12     	; 0x6dc <__udivdi3+0x356>
     6d0:	28 f0       	brcs	.+10     	; 0x6dc <__udivdi3+0x356>
     6d2:	48 e0       	ldi	r20, 0x08	; 8
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	17 c0       	rjmp	.+46     	; 0x70a <__udivdi3+0x384>
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	12 c0       	rjmp	.+36     	; 0x70a <__udivdi3+0x384>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	22 16       	cp	r2, r18
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	32 06       	cpc	r3, r18
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	42 06       	cpc	r4, r18
     6f2:	21 e0       	ldi	r18, 0x01	; 1
     6f4:	52 06       	cpc	r5, r18
     6f6:	28 f0       	brcs	.+10     	; 0x702 <__udivdi3+0x37c>
     6f8:	48 e1       	ldi	r20, 0x18	; 24
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	04 c0       	rjmp	.+8      	; 0x70a <__udivdi3+0x384>
     702:	40 e1       	ldi	r20, 0x10	; 16
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	d2 01       	movw	r26, r4
     70c:	c1 01       	movw	r24, r2
     70e:	04 2e       	mov	r0, r20
     710:	04 c0       	rjmp	.+8      	; 0x71a <__udivdi3+0x394>
     712:	b6 95       	lsr	r27
     714:	a7 95       	ror	r26
     716:	97 95       	ror	r25
     718:	87 95       	ror	r24
     71a:	0a 94       	dec	r0
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__udivdi3+0x38c>
     71e:	8b 58       	subi	r24, 0x8B	; 139
     720:	9f 4f       	sbci	r25, 0xFF	; 255
     722:	dc 01       	movw	r26, r24
     724:	2c 91       	ld	r18, X
     726:	e0 e2       	ldi	r30, 0x20	; 32
     728:	ee 2e       	mov	r14, r30
     72a:	f1 2c       	mov	r15, r1
     72c:	01 2d       	mov	r16, r1
     72e:	11 2d       	mov	r17, r1
     730:	d8 01       	movw	r26, r16
     732:	c7 01       	movw	r24, r14
     734:	84 1b       	sub	r24, r20
     736:	95 0b       	sbc	r25, r21
     738:	a6 0b       	sbc	r26, r22
     73a:	b7 0b       	sbc	r27, r23
     73c:	82 1b       	sub	r24, r18
     73e:	91 09       	sbc	r25, r1
     740:	a1 09       	sbc	r26, r1
     742:	b1 09       	sbc	r27, r1
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	a1 05       	cpc	r26, r1
     748:	b1 05       	cpc	r27, r1
     74a:	61 f4       	brne	.+24     	; 0x764 <__udivdi3+0x3de>
     74c:	64 01       	movw	r12, r8
     74e:	53 01       	movw	r10, r6
     750:	a2 18       	sub	r10, r2
     752:	b3 08       	sbc	r11, r3
     754:	c4 08       	sbc	r12, r4
     756:	d5 08       	sbc	r13, r5
     758:	31 e0       	ldi	r19, 0x01	; 1
     75a:	63 2e       	mov	r6, r19
     75c:	71 2c       	mov	r7, r1
     75e:	81 2c       	mov	r8, r1
     760:	91 2c       	mov	r9, r1
     762:	1e c1       	rjmp	.+572    	; 0x9a0 <__stack+0x141>
     764:	6f 96       	adiw	r28, 0x1f	; 31
     766:	8f af       	std	Y+63, r24	; 0x3f
     768:	6f 97       	sbiw	r28, 0x1f	; 31
     76a:	08 2e       	mov	r0, r24
     76c:	04 c0       	rjmp	.+8      	; 0x776 <__udivdi3+0x3f0>
     76e:	22 0c       	add	r2, r2
     770:	33 1c       	adc	r3, r3
     772:	44 1c       	adc	r4, r4
     774:	55 1c       	adc	r5, r5
     776:	0a 94       	dec	r0
     778:	d2 f7       	brpl	.-12     	; 0x76e <__udivdi3+0x3e8>
     77a:	ee 2d       	mov	r30, r14
     77c:	e8 1b       	sub	r30, r24
     77e:	64 01       	movw	r12, r8
     780:	53 01       	movw	r10, r6
     782:	0e 2e       	mov	r0, r30
     784:	04 c0       	rjmp	.+8      	; 0x78e <__udivdi3+0x408>
     786:	d6 94       	lsr	r13
     788:	c7 94       	ror	r12
     78a:	b7 94       	ror	r11
     78c:	a7 94       	ror	r10
     78e:	0a 94       	dec	r0
     790:	d2 f7       	brpl	.-12     	; 0x786 <__udivdi3+0x400>
     792:	a4 01       	movw	r20, r8
     794:	93 01       	movw	r18, r6
     796:	6f 96       	adiw	r28, 0x1f	; 31
     798:	0f ac       	ldd	r0, Y+63	; 0x3f
     79a:	6f 97       	sbiw	r28, 0x1f	; 31
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <__udivdi3+0x420>
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	44 1f       	adc	r20, r20
     7a4:	55 1f       	adc	r21, r21
     7a6:	0a 94       	dec	r0
     7a8:	d2 f7       	brpl	.-12     	; 0x79e <__udivdi3+0x418>
     7aa:	6d a4       	ldd	r6, Y+45	; 0x2d
     7ac:	7e a4       	ldd	r7, Y+46	; 0x2e
     7ae:	8f a4       	ldd	r8, Y+47	; 0x2f
     7b0:	98 a8       	ldd	r9, Y+48	; 0x30
     7b2:	0e 2e       	mov	r0, r30
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <__udivdi3+0x438>
     7b6:	96 94       	lsr	r9
     7b8:	87 94       	ror	r8
     7ba:	77 94       	ror	r7
     7bc:	67 94       	ror	r6
     7be:	0a 94       	dec	r0
     7c0:	d2 f7       	brpl	.-12     	; 0x7b6 <__udivdi3+0x430>
     7c2:	84 01       	movw	r16, r8
     7c4:	73 01       	movw	r14, r6
     7c6:	e2 2a       	or	r14, r18
     7c8:	f3 2a       	or	r15, r19
     7ca:	04 2b       	or	r16, r20
     7cc:	15 2b       	or	r17, r21
     7ce:	e9 a6       	std	Y+41, r14	; 0x29
     7d0:	fa a6       	std	Y+42, r15	; 0x2a
     7d2:	0b a7       	std	Y+43, r16	; 0x2b
     7d4:	1c a7       	std	Y+44, r17	; 0x2c
     7d6:	32 01       	movw	r6, r4
     7d8:	88 24       	eor	r8, r8
     7da:	99 24       	eor	r9, r9
     7dc:	92 01       	movw	r18, r4
     7de:	81 01       	movw	r16, r2
     7e0:	20 70       	andi	r18, 0x00	; 0
     7e2:	30 70       	andi	r19, 0x00	; 0
     7e4:	21 96       	adiw	r28, 0x01	; 1
     7e6:	0c af       	std	Y+60, r16	; 0x3c
     7e8:	1d af       	std	Y+61, r17	; 0x3d
     7ea:	2e af       	std	Y+62, r18	; 0x3e
     7ec:	3f af       	std	Y+63, r19	; 0x3f
     7ee:	21 97       	sbiw	r28, 0x01	; 1
     7f0:	c6 01       	movw	r24, r12
     7f2:	b5 01       	movw	r22, r10
     7f4:	a4 01       	movw	r20, r8
     7f6:	93 01       	movw	r18, r6
     7f8:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     7fc:	7b 01       	movw	r14, r22
     7fe:	8c 01       	movw	r16, r24
     800:	c6 01       	movw	r24, r12
     802:	b5 01       	movw	r22, r10
     804:	a4 01       	movw	r20, r8
     806:	93 01       	movw	r18, r6
     808:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     80c:	c9 01       	movw	r24, r18
     80e:	da 01       	movw	r26, r20
     810:	25 96       	adiw	r28, 0x05	; 5
     812:	8c af       	std	Y+60, r24	; 0x3c
     814:	9d af       	std	Y+61, r25	; 0x3d
     816:	ae af       	std	Y+62, r26	; 0x3e
     818:	bf af       	std	Y+63, r27	; 0x3f
     81a:	25 97       	sbiw	r28, 0x05	; 5
     81c:	bc 01       	movw	r22, r24
     81e:	cd 01       	movw	r24, r26
     820:	21 96       	adiw	r28, 0x01	; 1
     822:	2c ad       	ldd	r18, Y+60	; 0x3c
     824:	3d ad       	ldd	r19, Y+61	; 0x3d
     826:	4e ad       	ldd	r20, Y+62	; 0x3e
     828:	5f ad       	ldd	r21, Y+63	; 0x3f
     82a:	21 97       	sbiw	r28, 0x01	; 1
     82c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     830:	9b 01       	movw	r18, r22
     832:	ac 01       	movw	r20, r24
     834:	87 01       	movw	r16, r14
     836:	ff 24       	eor	r15, r15
     838:	ee 24       	eor	r14, r14
     83a:	a9 a4       	ldd	r10, Y+41	; 0x29
     83c:	ba a4       	ldd	r11, Y+42	; 0x2a
     83e:	cb a4       	ldd	r12, Y+43	; 0x2b
     840:	dc a4       	ldd	r13, Y+44	; 0x2c
     842:	c6 01       	movw	r24, r12
     844:	aa 27       	eor	r26, r26
     846:	bb 27       	eor	r27, r27
     848:	5c 01       	movw	r10, r24
     84a:	6d 01       	movw	r12, r26
     84c:	ae 28       	or	r10, r14
     84e:	bf 28       	or	r11, r15
     850:	c0 2a       	or	r12, r16
     852:	d1 2a       	or	r13, r17
     854:	a2 16       	cp	r10, r18
     856:	b3 06       	cpc	r11, r19
     858:	c4 06       	cpc	r12, r20
     85a:	d5 06       	cpc	r13, r21
     85c:	60 f5       	brcc	.+88     	; 0x8b6 <__stack+0x57>
     85e:	25 96       	adiw	r28, 0x05	; 5
     860:	6c ad       	ldd	r22, Y+60	; 0x3c
     862:	7d ad       	ldd	r23, Y+61	; 0x3d
     864:	8e ad       	ldd	r24, Y+62	; 0x3e
     866:	9f ad       	ldd	r25, Y+63	; 0x3f
     868:	25 97       	sbiw	r28, 0x05	; 5
     86a:	61 50       	subi	r22, 0x01	; 1
     86c:	70 40       	sbci	r23, 0x00	; 0
     86e:	80 40       	sbci	r24, 0x00	; 0
     870:	90 40       	sbci	r25, 0x00	; 0
     872:	25 96       	adiw	r28, 0x05	; 5
     874:	6c af       	std	Y+60, r22	; 0x3c
     876:	7d af       	std	Y+61, r23	; 0x3d
     878:	8e af       	std	Y+62, r24	; 0x3e
     87a:	9f af       	std	Y+63, r25	; 0x3f
     87c:	25 97       	sbiw	r28, 0x05	; 5
     87e:	a2 0c       	add	r10, r2
     880:	b3 1c       	adc	r11, r3
     882:	c4 1c       	adc	r12, r4
     884:	d5 1c       	adc	r13, r5
     886:	a2 14       	cp	r10, r2
     888:	b3 04       	cpc	r11, r3
     88a:	c4 04       	cpc	r12, r4
     88c:	d5 04       	cpc	r13, r5
     88e:	98 f0       	brcs	.+38     	; 0x8b6 <__stack+0x57>
     890:	a2 16       	cp	r10, r18
     892:	b3 06       	cpc	r11, r19
     894:	c4 06       	cpc	r12, r20
     896:	d5 06       	cpc	r13, r21
     898:	70 f4       	brcc	.+28     	; 0x8b6 <__stack+0x57>
     89a:	61 50       	subi	r22, 0x01	; 1
     89c:	70 40       	sbci	r23, 0x00	; 0
     89e:	80 40       	sbci	r24, 0x00	; 0
     8a0:	90 40       	sbci	r25, 0x00	; 0
     8a2:	25 96       	adiw	r28, 0x05	; 5
     8a4:	6c af       	std	Y+60, r22	; 0x3c
     8a6:	7d af       	std	Y+61, r23	; 0x3d
     8a8:	8e af       	std	Y+62, r24	; 0x3e
     8aa:	9f af       	std	Y+63, r25	; 0x3f
     8ac:	25 97       	sbiw	r28, 0x05	; 5
     8ae:	a2 0c       	add	r10, r2
     8b0:	b3 1c       	adc	r11, r3
     8b2:	c4 1c       	adc	r12, r4
     8b4:	d5 1c       	adc	r13, r5
     8b6:	a2 1a       	sub	r10, r18
     8b8:	b3 0a       	sbc	r11, r19
     8ba:	c4 0a       	sbc	r12, r20
     8bc:	d5 0a       	sbc	r13, r21
     8be:	c6 01       	movw	r24, r12
     8c0:	b5 01       	movw	r22, r10
     8c2:	a4 01       	movw	r20, r8
     8c4:	93 01       	movw	r18, r6
     8c6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     8ca:	7b 01       	movw	r14, r22
     8cc:	8c 01       	movw	r16, r24
     8ce:	c6 01       	movw	r24, r12
     8d0:	b5 01       	movw	r22, r10
     8d2:	a4 01       	movw	r20, r8
     8d4:	93 01       	movw	r18, r6
     8d6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     8da:	c9 01       	movw	r24, r18
     8dc:	da 01       	movw	r26, r20
     8de:	3c 01       	movw	r6, r24
     8e0:	4d 01       	movw	r8, r26
     8e2:	c4 01       	movw	r24, r8
     8e4:	b3 01       	movw	r22, r6
     8e6:	21 96       	adiw	r28, 0x01	; 1
     8e8:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ea:	3d ad       	ldd	r19, Y+61	; 0x3d
     8ec:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ee:	5f ad       	ldd	r21, Y+63	; 0x3f
     8f0:	21 97       	sbiw	r28, 0x01	; 1
     8f2:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	87 01       	movw	r16, r14
     8fc:	ff 24       	eor	r15, r15
     8fe:	ee 24       	eor	r14, r14
     900:	89 a5       	ldd	r24, Y+41	; 0x29
     902:	9a a5       	ldd	r25, Y+42	; 0x2a
     904:	ab a5       	ldd	r26, Y+43	; 0x2b
     906:	bc a5       	ldd	r27, Y+44	; 0x2c
     908:	a0 70       	andi	r26, 0x00	; 0
     90a:	b0 70       	andi	r27, 0x00	; 0
     90c:	57 01       	movw	r10, r14
     90e:	68 01       	movw	r12, r16
     910:	a8 2a       	or	r10, r24
     912:	b9 2a       	or	r11, r25
     914:	ca 2a       	or	r12, r26
     916:	db 2a       	or	r13, r27
     918:	a2 16       	cp	r10, r18
     91a:	b3 06       	cpc	r11, r19
     91c:	c4 06       	cpc	r12, r20
     91e:	d5 06       	cpc	r13, r21
     920:	e0 f4       	brcc	.+56     	; 0x95a <__stack+0xfb>
     922:	08 94       	sec
     924:	61 08       	sbc	r6, r1
     926:	71 08       	sbc	r7, r1
     928:	81 08       	sbc	r8, r1
     92a:	91 08       	sbc	r9, r1
     92c:	a2 0c       	add	r10, r2
     92e:	b3 1c       	adc	r11, r3
     930:	c4 1c       	adc	r12, r4
     932:	d5 1c       	adc	r13, r5
     934:	a2 14       	cp	r10, r2
     936:	b3 04       	cpc	r11, r3
     938:	c4 04       	cpc	r12, r4
     93a:	d5 04       	cpc	r13, r5
     93c:	70 f0       	brcs	.+28     	; 0x95a <__stack+0xfb>
     93e:	a2 16       	cp	r10, r18
     940:	b3 06       	cpc	r11, r19
     942:	c4 06       	cpc	r12, r20
     944:	d5 06       	cpc	r13, r21
     946:	48 f4       	brcc	.+18     	; 0x95a <__stack+0xfb>
     948:	08 94       	sec
     94a:	61 08       	sbc	r6, r1
     94c:	71 08       	sbc	r7, r1
     94e:	81 08       	sbc	r8, r1
     950:	91 08       	sbc	r9, r1
     952:	a2 0c       	add	r10, r2
     954:	b3 1c       	adc	r11, r3
     956:	c4 1c       	adc	r12, r4
     958:	d5 1c       	adc	r13, r5
     95a:	8d a5       	ldd	r24, Y+45	; 0x2d
     95c:	9e a5       	ldd	r25, Y+46	; 0x2e
     95e:	af a5       	ldd	r26, Y+47	; 0x2f
     960:	b8 a9       	ldd	r27, Y+48	; 0x30
     962:	6f 96       	adiw	r28, 0x1f	; 31
     964:	0f ac       	ldd	r0, Y+63	; 0x3f
     966:	6f 97       	sbiw	r28, 0x1f	; 31
     968:	04 c0       	rjmp	.+8      	; 0x972 <__stack+0x113>
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	aa 1f       	adc	r26, r26
     970:	bb 1f       	adc	r27, r27
     972:	0a 94       	dec	r0
     974:	d2 f7       	brpl	.-12     	; 0x96a <__stack+0x10b>
     976:	8d a7       	std	Y+45, r24	; 0x2d
     978:	9e a7       	std	Y+46, r25	; 0x2e
     97a:	af a7       	std	Y+47, r26	; 0x2f
     97c:	b8 ab       	std	Y+48, r27	; 0x30
     97e:	a2 1a       	sub	r10, r18
     980:	b3 0a       	sbc	r11, r19
     982:	c4 0a       	sbc	r12, r20
     984:	d5 0a       	sbc	r13, r21
     986:	25 96       	adiw	r28, 0x05	; 5
     988:	ec ac       	ldd	r14, Y+60	; 0x3c
     98a:	fd ac       	ldd	r15, Y+61	; 0x3d
     98c:	0e ad       	ldd	r16, Y+62	; 0x3e
     98e:	1f ad       	ldd	r17, Y+63	; 0x3f
     990:	25 97       	sbiw	r28, 0x05	; 5
     992:	d7 01       	movw	r26, r14
     994:	99 27       	eor	r25, r25
     996:	88 27       	eor	r24, r24
     998:	68 2a       	or	r6, r24
     99a:	79 2a       	or	r7, r25
     99c:	8a 2a       	or	r8, r26
     99e:	9b 2a       	or	r9, r27
     9a0:	82 01       	movw	r16, r4
     9a2:	22 27       	eor	r18, r18
     9a4:	33 27       	eor	r19, r19
     9a6:	29 96       	adiw	r28, 0x09	; 9
     9a8:	0c af       	std	Y+60, r16	; 0x3c
     9aa:	1d af       	std	Y+61, r17	; 0x3d
     9ac:	2e af       	std	Y+62, r18	; 0x3e
     9ae:	3f af       	std	Y+63, r19	; 0x3f
     9b0:	29 97       	sbiw	r28, 0x09	; 9
     9b2:	a2 01       	movw	r20, r4
     9b4:	91 01       	movw	r18, r2
     9b6:	40 70       	andi	r20, 0x00	; 0
     9b8:	50 70       	andi	r21, 0x00	; 0
     9ba:	2d 96       	adiw	r28, 0x0d	; 13
     9bc:	2c af       	std	Y+60, r18	; 0x3c
     9be:	3d af       	std	Y+61, r19	; 0x3d
     9c0:	4e af       	std	Y+62, r20	; 0x3e
     9c2:	5f af       	std	Y+63, r21	; 0x3f
     9c4:	2d 97       	sbiw	r28, 0x0d	; 13
     9c6:	c6 01       	movw	r24, r12
     9c8:	b5 01       	movw	r22, r10
     9ca:	29 96       	adiw	r28, 0x09	; 9
     9cc:	2c ad       	ldd	r18, Y+60	; 0x3c
     9ce:	3d ad       	ldd	r19, Y+61	; 0x3d
     9d0:	4e ad       	ldd	r20, Y+62	; 0x3e
     9d2:	5f ad       	ldd	r21, Y+63	; 0x3f
     9d4:	29 97       	sbiw	r28, 0x09	; 9
     9d6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     9da:	7b 01       	movw	r14, r22
     9dc:	8c 01       	movw	r16, r24
     9de:	c6 01       	movw	r24, r12
     9e0:	b5 01       	movw	r22, r10
     9e2:	29 96       	adiw	r28, 0x09	; 9
     9e4:	2c ad       	ldd	r18, Y+60	; 0x3c
     9e6:	3d ad       	ldd	r19, Y+61	; 0x3d
     9e8:	4e ad       	ldd	r20, Y+62	; 0x3e
     9ea:	5f ad       	ldd	r21, Y+63	; 0x3f
     9ec:	29 97       	sbiw	r28, 0x09	; 9
     9ee:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     9f2:	c9 01       	movw	r24, r18
     9f4:	da 01       	movw	r26, r20
     9f6:	61 96       	adiw	r28, 0x11	; 17
     9f8:	8c af       	std	Y+60, r24	; 0x3c
     9fa:	9d af       	std	Y+61, r25	; 0x3d
     9fc:	ae af       	std	Y+62, r26	; 0x3e
     9fe:	bf af       	std	Y+63, r27	; 0x3f
     a00:	61 97       	sbiw	r28, 0x11	; 17
     a02:	bc 01       	movw	r22, r24
     a04:	cd 01       	movw	r24, r26
     a06:	2d 96       	adiw	r28, 0x0d	; 13
     a08:	2c ad       	ldd	r18, Y+60	; 0x3c
     a0a:	3d ad       	ldd	r19, Y+61	; 0x3d
     a0c:	4e ad       	ldd	r20, Y+62	; 0x3e
     a0e:	5f ad       	ldd	r21, Y+63	; 0x3f
     a10:	2d 97       	sbiw	r28, 0x0d	; 13
     a12:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     a16:	9b 01       	movw	r18, r22
     a18:	ac 01       	movw	r20, r24
     a1a:	87 01       	movw	r16, r14
     a1c:	ff 24       	eor	r15, r15
     a1e:	ee 24       	eor	r14, r14
     a20:	ad a4       	ldd	r10, Y+45	; 0x2d
     a22:	be a4       	ldd	r11, Y+46	; 0x2e
     a24:	cf a4       	ldd	r12, Y+47	; 0x2f
     a26:	d8 a8       	ldd	r13, Y+48	; 0x30
     a28:	c6 01       	movw	r24, r12
     a2a:	aa 27       	eor	r26, r26
     a2c:	bb 27       	eor	r27, r27
     a2e:	57 01       	movw	r10, r14
     a30:	68 01       	movw	r12, r16
     a32:	a8 2a       	or	r10, r24
     a34:	b9 2a       	or	r11, r25
     a36:	ca 2a       	or	r12, r26
     a38:	db 2a       	or	r13, r27
     a3a:	a2 16       	cp	r10, r18
     a3c:	b3 06       	cpc	r11, r19
     a3e:	c4 06       	cpc	r12, r20
     a40:	d5 06       	cpc	r13, r21
     a42:	60 f5       	brcc	.+88     	; 0xa9c <__stack+0x23d>
     a44:	61 96       	adiw	r28, 0x11	; 17
     a46:	6c ad       	ldd	r22, Y+60	; 0x3c
     a48:	7d ad       	ldd	r23, Y+61	; 0x3d
     a4a:	8e ad       	ldd	r24, Y+62	; 0x3e
     a4c:	9f ad       	ldd	r25, Y+63	; 0x3f
     a4e:	61 97       	sbiw	r28, 0x11	; 17
     a50:	61 50       	subi	r22, 0x01	; 1
     a52:	70 40       	sbci	r23, 0x00	; 0
     a54:	80 40       	sbci	r24, 0x00	; 0
     a56:	90 40       	sbci	r25, 0x00	; 0
     a58:	61 96       	adiw	r28, 0x11	; 17
     a5a:	6c af       	std	Y+60, r22	; 0x3c
     a5c:	7d af       	std	Y+61, r23	; 0x3d
     a5e:	8e af       	std	Y+62, r24	; 0x3e
     a60:	9f af       	std	Y+63, r25	; 0x3f
     a62:	61 97       	sbiw	r28, 0x11	; 17
     a64:	a2 0c       	add	r10, r2
     a66:	b3 1c       	adc	r11, r3
     a68:	c4 1c       	adc	r12, r4
     a6a:	d5 1c       	adc	r13, r5
     a6c:	a2 14       	cp	r10, r2
     a6e:	b3 04       	cpc	r11, r3
     a70:	c4 04       	cpc	r12, r4
     a72:	d5 04       	cpc	r13, r5
     a74:	98 f0       	brcs	.+38     	; 0xa9c <__stack+0x23d>
     a76:	a2 16       	cp	r10, r18
     a78:	b3 06       	cpc	r11, r19
     a7a:	c4 06       	cpc	r12, r20
     a7c:	d5 06       	cpc	r13, r21
     a7e:	70 f4       	brcc	.+28     	; 0xa9c <__stack+0x23d>
     a80:	61 50       	subi	r22, 0x01	; 1
     a82:	70 40       	sbci	r23, 0x00	; 0
     a84:	80 40       	sbci	r24, 0x00	; 0
     a86:	90 40       	sbci	r25, 0x00	; 0
     a88:	61 96       	adiw	r28, 0x11	; 17
     a8a:	6c af       	std	Y+60, r22	; 0x3c
     a8c:	7d af       	std	Y+61, r23	; 0x3d
     a8e:	8e af       	std	Y+62, r24	; 0x3e
     a90:	9f af       	std	Y+63, r25	; 0x3f
     a92:	61 97       	sbiw	r28, 0x11	; 17
     a94:	a2 0c       	add	r10, r2
     a96:	b3 1c       	adc	r11, r3
     a98:	c4 1c       	adc	r12, r4
     a9a:	d5 1c       	adc	r13, r5
     a9c:	a2 1a       	sub	r10, r18
     a9e:	b3 0a       	sbc	r11, r19
     aa0:	c4 0a       	sbc	r12, r20
     aa2:	d5 0a       	sbc	r13, r21
     aa4:	c6 01       	movw	r24, r12
     aa6:	b5 01       	movw	r22, r10
     aa8:	29 96       	adiw	r28, 0x09	; 9
     aaa:	2c ad       	ldd	r18, Y+60	; 0x3c
     aac:	3d ad       	ldd	r19, Y+61	; 0x3d
     aae:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ab2:	29 97       	sbiw	r28, 0x09	; 9
     ab4:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     ab8:	7b 01       	movw	r14, r22
     aba:	8c 01       	movw	r16, r24
     abc:	c6 01       	movw	r24, r12
     abe:	b5 01       	movw	r22, r10
     ac0:	29 96       	adiw	r28, 0x09	; 9
     ac2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ac4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ac6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ac8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aca:	29 97       	sbiw	r28, 0x09	; 9
     acc:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     ad0:	c9 01       	movw	r24, r18
     ad2:	da 01       	movw	r26, r20
     ad4:	5c 01       	movw	r10, r24
     ad6:	6d 01       	movw	r12, r26
     ad8:	c6 01       	movw	r24, r12
     ada:	b5 01       	movw	r22, r10
     adc:	2d 96       	adiw	r28, 0x0d	; 13
     ade:	2c ad       	ldd	r18, Y+60	; 0x3c
     ae0:	3d ad       	ldd	r19, Y+61	; 0x3d
     ae2:	4e ad       	ldd	r20, Y+62	; 0x3e
     ae4:	5f ad       	ldd	r21, Y+63	; 0x3f
     ae6:	2d 97       	sbiw	r28, 0x0d	; 13
     ae8:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     aec:	9b 01       	movw	r18, r22
     aee:	ac 01       	movw	r20, r24
     af0:	87 01       	movw	r16, r14
     af2:	ff 24       	eor	r15, r15
     af4:	ee 24       	eor	r14, r14
     af6:	8d a5       	ldd	r24, Y+45	; 0x2d
     af8:	9e a5       	ldd	r25, Y+46	; 0x2e
     afa:	af a5       	ldd	r26, Y+47	; 0x2f
     afc:	b8 a9       	ldd	r27, Y+48	; 0x30
     afe:	a0 70       	andi	r26, 0x00	; 0
     b00:	b0 70       	andi	r27, 0x00	; 0
     b02:	e8 2a       	or	r14, r24
     b04:	f9 2a       	or	r15, r25
     b06:	0a 2b       	or	r16, r26
     b08:	1b 2b       	or	r17, r27
     b0a:	e2 16       	cp	r14, r18
     b0c:	f3 06       	cpc	r15, r19
     b0e:	04 07       	cpc	r16, r20
     b10:	15 07       	cpc	r17, r21
     b12:	c0 f4       	brcc	.+48     	; 0xb44 <__stack+0x2e5>
     b14:	08 94       	sec
     b16:	a1 08       	sbc	r10, r1
     b18:	b1 08       	sbc	r11, r1
     b1a:	c1 08       	sbc	r12, r1
     b1c:	d1 08       	sbc	r13, r1
     b1e:	e2 0c       	add	r14, r2
     b20:	f3 1c       	adc	r15, r3
     b22:	04 1d       	adc	r16, r4
     b24:	15 1d       	adc	r17, r5
     b26:	e2 14       	cp	r14, r2
     b28:	f3 04       	cpc	r15, r3
     b2a:	04 05       	cpc	r16, r4
     b2c:	15 05       	cpc	r17, r5
     b2e:	50 f0       	brcs	.+20     	; 0xb44 <__stack+0x2e5>
     b30:	e2 16       	cp	r14, r18
     b32:	f3 06       	cpc	r15, r19
     b34:	04 07       	cpc	r16, r20
     b36:	15 07       	cpc	r17, r21
     b38:	28 f4       	brcc	.+10     	; 0xb44 <__stack+0x2e5>
     b3a:	08 94       	sec
     b3c:	a1 08       	sbc	r10, r1
     b3e:	b1 08       	sbc	r11, r1
     b40:	c1 08       	sbc	r12, r1
     b42:	d1 08       	sbc	r13, r1
     b44:	61 96       	adiw	r28, 0x11	; 17
     b46:	ec ac       	ldd	r14, Y+60	; 0x3c
     b48:	fd ac       	ldd	r15, Y+61	; 0x3d
     b4a:	0e ad       	ldd	r16, Y+62	; 0x3e
     b4c:	1f ad       	ldd	r17, Y+63	; 0x3f
     b4e:	61 97       	sbiw	r28, 0x11	; 17
     b50:	d7 01       	movw	r26, r14
     b52:	99 27       	eor	r25, r25
     b54:	88 27       	eor	r24, r24
     b56:	96 01       	movw	r18, r12
     b58:	85 01       	movw	r16, r10
     b5a:	08 2b       	or	r16, r24
     b5c:	19 2b       	or	r17, r25
     b5e:	2a 2b       	or	r18, r26
     b60:	3b 2b       	or	r19, r27
     b62:	09 ab       	std	Y+49, r16	; 0x31
     b64:	1a ab       	std	Y+50, r17	; 0x32
     b66:	2b ab       	std	Y+51, r18	; 0x33
     b68:	3c ab       	std	Y+52, r19	; 0x34
     b6a:	62 c2       	rjmp	.+1220   	; 0x1030 <__stack+0x7d1>
     b6c:	6e 14       	cp	r6, r14
     b6e:	7f 04       	cpc	r7, r15
     b70:	80 06       	cpc	r8, r16
     b72:	91 06       	cpc	r9, r17
     b74:	08 f4       	brcc	.+2      	; 0xb78 <__stack+0x319>
     b76:	51 c2       	rjmp	.+1186   	; 0x101a <__stack+0x7bb>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	e2 16       	cp	r14, r18
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	f2 06       	cpc	r15, r18
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	02 07       	cpc	r16, r18
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	12 07       	cpc	r17, r18
     b88:	88 f4       	brcc	.+34     	; 0xbac <__stack+0x34d>
     b8a:	3f ef       	ldi	r19, 0xFF	; 255
     b8c:	e3 16       	cp	r14, r19
     b8e:	f1 04       	cpc	r15, r1
     b90:	01 05       	cpc	r16, r1
     b92:	11 05       	cpc	r17, r1
     b94:	31 f0       	breq	.+12     	; 0xba2 <__stack+0x343>
     b96:	28 f0       	brcs	.+10     	; 0xba2 <__stack+0x343>
     b98:	48 e0       	ldi	r20, 0x08	; 8
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	17 c0       	rjmp	.+46     	; 0xbd0 <__stack+0x371>
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__stack+0x371>
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	e4 16       	cp	r14, r20
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	f4 06       	cpc	r15, r20
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	04 07       	cpc	r16, r20
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	14 07       	cpc	r17, r20
     bbc:	28 f0       	brcs	.+10     	; 0xbc8 <__stack+0x369>
     bbe:	48 e1       	ldi	r20, 0x18	; 24
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <__stack+0x371>
     bc8:	40 e1       	ldi	r20, 0x10	; 16
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	d8 01       	movw	r26, r16
     bd2:	c7 01       	movw	r24, r14
     bd4:	04 2e       	mov	r0, r20
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <__stack+0x381>
     bd8:	b6 95       	lsr	r27
     bda:	a7 95       	ror	r26
     bdc:	97 95       	ror	r25
     bde:	87 95       	ror	r24
     be0:	0a 94       	dec	r0
     be2:	d2 f7       	brpl	.-12     	; 0xbd8 <__stack+0x379>
     be4:	8b 58       	subi	r24, 0x8B	; 139
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	dc 01       	movw	r26, r24
     bea:	2c 91       	ld	r18, X
     bec:	30 e2       	ldi	r19, 0x20	; 32
     bee:	a3 2e       	mov	r10, r19
     bf0:	b1 2c       	mov	r11, r1
     bf2:	c1 2c       	mov	r12, r1
     bf4:	d1 2c       	mov	r13, r1
     bf6:	d6 01       	movw	r26, r12
     bf8:	c5 01       	movw	r24, r10
     bfa:	84 1b       	sub	r24, r20
     bfc:	95 0b       	sbc	r25, r21
     bfe:	a6 0b       	sbc	r26, r22
     c00:	b7 0b       	sbc	r27, r23
     c02:	82 1b       	sub	r24, r18
     c04:	91 09       	sbc	r25, r1
     c06:	a1 09       	sbc	r26, r1
     c08:	b1 09       	sbc	r27, r1
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	a1 05       	cpc	r26, r1
     c0e:	b1 05       	cpc	r27, r1
     c10:	89 f4       	brne	.+34     	; 0xc34 <__stack+0x3d5>
     c12:	e6 14       	cp	r14, r6
     c14:	f7 04       	cpc	r15, r7
     c16:	08 05       	cpc	r16, r8
     c18:	19 05       	cpc	r17, r9
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <__stack+0x3bf>
     c1c:	f2 c1       	rjmp	.+996    	; 0x1002 <__stack+0x7a3>
     c1e:	6d a4       	ldd	r6, Y+45	; 0x2d
     c20:	7e a4       	ldd	r7, Y+46	; 0x2e
     c22:	8f a4       	ldd	r8, Y+47	; 0x2f
     c24:	98 a8       	ldd	r9, Y+48	; 0x30
     c26:	62 14       	cp	r6, r2
     c28:	73 04       	cpc	r7, r3
     c2a:	84 04       	cpc	r8, r4
     c2c:	95 04       	cpc	r9, r5
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <__stack+0x3d3>
     c30:	e8 c1       	rjmp	.+976    	; 0x1002 <__stack+0x7a3>
     c32:	f3 c1       	rjmp	.+998    	; 0x101a <__stack+0x7bb>
     c34:	6e 96       	adiw	r28, 0x1e	; 30
     c36:	8f af       	std	Y+63, r24	; 0x3f
     c38:	6e 97       	sbiw	r28, 0x1e	; 30
     c3a:	08 2e       	mov	r0, r24
     c3c:	04 c0       	rjmp	.+8      	; 0xc46 <__stack+0x3e7>
     c3e:	ee 0c       	add	r14, r14
     c40:	ff 1c       	adc	r15, r15
     c42:	00 1f       	adc	r16, r16
     c44:	11 1f       	adc	r17, r17
     c46:	0a 94       	dec	r0
     c48:	d2 f7       	brpl	.-12     	; 0xc3e <__stack+0x3df>
     c4a:	6a 2d       	mov	r22, r10
     c4c:	68 1b       	sub	r22, r24
     c4e:	d2 01       	movw	r26, r4
     c50:	c1 01       	movw	r24, r2
     c52:	06 2e       	mov	r0, r22
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__stack+0x3ff>
     c56:	b6 95       	lsr	r27
     c58:	a7 95       	ror	r26
     c5a:	97 95       	ror	r25
     c5c:	87 95       	ror	r24
     c5e:	0a 94       	dec	r0
     c60:	d2 f7       	brpl	.-12     	; 0xc56 <__stack+0x3f7>
     c62:	5c 01       	movw	r10, r24
     c64:	6d 01       	movw	r12, r26
     c66:	ae 28       	or	r10, r14
     c68:	bf 28       	or	r11, r15
     c6a:	c0 2a       	or	r12, r16
     c6c:	d1 2a       	or	r13, r17
     c6e:	ad a2       	std	Y+37, r10	; 0x25
     c70:	be a2       	std	Y+38, r11	; 0x26
     c72:	cf a2       	std	Y+39, r12	; 0x27
     c74:	d8 a6       	std	Y+40, r13	; 0x28
     c76:	72 01       	movw	r14, r4
     c78:	61 01       	movw	r12, r2
     c7a:	6e 96       	adiw	r28, 0x1e	; 30
     c7c:	0f ac       	ldd	r0, Y+63	; 0x3f
     c7e:	6e 97       	sbiw	r28, 0x1e	; 30
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__stack+0x42b>
     c82:	cc 0c       	add	r12, r12
     c84:	dd 1c       	adc	r13, r13
     c86:	ee 1c       	adc	r14, r14
     c88:	ff 1c       	adc	r15, r15
     c8a:	0a 94       	dec	r0
     c8c:	d2 f7       	brpl	.-12     	; 0xc82 <__stack+0x423>
     c8e:	c9 a2       	std	Y+33, r12	; 0x21
     c90:	da a2       	std	Y+34, r13	; 0x22
     c92:	eb a2       	std	Y+35, r14	; 0x23
     c94:	fc a2       	std	Y+36, r15	; 0x24
     c96:	64 01       	movw	r12, r8
     c98:	53 01       	movw	r10, r6
     c9a:	06 2e       	mov	r0, r22
     c9c:	04 c0       	rjmp	.+8      	; 0xca6 <__stack+0x447>
     c9e:	d6 94       	lsr	r13
     ca0:	c7 94       	ror	r12
     ca2:	b7 94       	ror	r11
     ca4:	a7 94       	ror	r10
     ca6:	0a 94       	dec	r0
     ca8:	d2 f7       	brpl	.-12     	; 0xc9e <__stack+0x43f>
     caa:	d4 01       	movw	r26, r8
     cac:	c3 01       	movw	r24, r6
     cae:	6e 96       	adiw	r28, 0x1e	; 30
     cb0:	0f ac       	ldd	r0, Y+63	; 0x3f
     cb2:	6e 97       	sbiw	r28, 0x1e	; 30
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <__stack+0x45f>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	aa 1f       	adc	r26, r26
     cbc:	bb 1f       	adc	r27, r27
     cbe:	0a 94       	dec	r0
     cc0:	d2 f7       	brpl	.-12     	; 0xcb6 <__stack+0x457>
     cc2:	ed a4       	ldd	r14, Y+45	; 0x2d
     cc4:	fe a4       	ldd	r15, Y+46	; 0x2e
     cc6:	0f a5       	ldd	r16, Y+47	; 0x2f
     cc8:	18 a9       	ldd	r17, Y+48	; 0x30
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <__stack+0x475>
     ccc:	16 95       	lsr	r17
     cce:	07 95       	ror	r16
     cd0:	f7 94       	ror	r15
     cd2:	e7 94       	ror	r14
     cd4:	6a 95       	dec	r22
     cd6:	d2 f7       	brpl	.-12     	; 0xccc <__stack+0x46d>
     cd8:	37 01       	movw	r6, r14
     cda:	48 01       	movw	r8, r16
     cdc:	68 2a       	or	r6, r24
     cde:	79 2a       	or	r7, r25
     ce0:	8a 2a       	or	r8, r26
     ce2:	9b 2a       	or	r9, r27
     ce4:	6d 8e       	std	Y+29, r6	; 0x1d
     ce6:	7e 8e       	std	Y+30, r7	; 0x1e
     ce8:	8f 8e       	std	Y+31, r8	; 0x1f
     cea:	98 a2       	std	Y+32, r9	; 0x20
     cec:	ed a0       	ldd	r14, Y+37	; 0x25
     cee:	fe a0       	ldd	r15, Y+38	; 0x26
     cf0:	0f a1       	ldd	r16, Y+39	; 0x27
     cf2:	18 a5       	ldd	r17, Y+40	; 0x28
     cf4:	38 01       	movw	r6, r16
     cf6:	88 24       	eor	r8, r8
     cf8:	99 24       	eor	r9, r9
     cfa:	98 01       	movw	r18, r16
     cfc:	87 01       	movw	r16, r14
     cfe:	20 70       	andi	r18, 0x00	; 0
     d00:	30 70       	andi	r19, 0x00	; 0
     d02:	65 96       	adiw	r28, 0x15	; 21
     d04:	0c af       	std	Y+60, r16	; 0x3c
     d06:	1d af       	std	Y+61, r17	; 0x3d
     d08:	2e af       	std	Y+62, r18	; 0x3e
     d0a:	3f af       	std	Y+63, r19	; 0x3f
     d0c:	65 97       	sbiw	r28, 0x15	; 21
     d0e:	c6 01       	movw	r24, r12
     d10:	b5 01       	movw	r22, r10
     d12:	a4 01       	movw	r20, r8
     d14:	93 01       	movw	r18, r6
     d16:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     d1a:	7b 01       	movw	r14, r22
     d1c:	8c 01       	movw	r16, r24
     d1e:	c6 01       	movw	r24, r12
     d20:	b5 01       	movw	r22, r10
     d22:	a4 01       	movw	r20, r8
     d24:	93 01       	movw	r18, r6
     d26:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     d2a:	c9 01       	movw	r24, r18
     d2c:	da 01       	movw	r26, r20
     d2e:	1c 01       	movw	r2, r24
     d30:	2d 01       	movw	r4, r26
     d32:	c2 01       	movw	r24, r4
     d34:	b1 01       	movw	r22, r2
     d36:	65 96       	adiw	r28, 0x15	; 21
     d38:	2c ad       	ldd	r18, Y+60	; 0x3c
     d3a:	3d ad       	ldd	r19, Y+61	; 0x3d
     d3c:	4e ad       	ldd	r20, Y+62	; 0x3e
     d3e:	5f ad       	ldd	r21, Y+63	; 0x3f
     d40:	65 97       	sbiw	r28, 0x15	; 21
     d42:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     d46:	9b 01       	movw	r18, r22
     d48:	ac 01       	movw	r20, r24
     d4a:	87 01       	movw	r16, r14
     d4c:	ff 24       	eor	r15, r15
     d4e:	ee 24       	eor	r14, r14
     d50:	ad 8c       	ldd	r10, Y+29	; 0x1d
     d52:	be 8c       	ldd	r11, Y+30	; 0x1e
     d54:	cf 8c       	ldd	r12, Y+31	; 0x1f
     d56:	d8 a0       	ldd	r13, Y+32	; 0x20
     d58:	c6 01       	movw	r24, r12
     d5a:	aa 27       	eor	r26, r26
     d5c:	bb 27       	eor	r27, r27
     d5e:	57 01       	movw	r10, r14
     d60:	68 01       	movw	r12, r16
     d62:	a8 2a       	or	r10, r24
     d64:	b9 2a       	or	r11, r25
     d66:	ca 2a       	or	r12, r26
     d68:	db 2a       	or	r13, r27
     d6a:	a2 16       	cp	r10, r18
     d6c:	b3 06       	cpc	r11, r19
     d6e:	c4 06       	cpc	r12, r20
     d70:	d5 06       	cpc	r13, r21
     d72:	00 f5       	brcc	.+64     	; 0xdb4 <__stack+0x555>
     d74:	08 94       	sec
     d76:	21 08       	sbc	r2, r1
     d78:	31 08       	sbc	r3, r1
     d7a:	41 08       	sbc	r4, r1
     d7c:	51 08       	sbc	r5, r1
     d7e:	ed a0       	ldd	r14, Y+37	; 0x25
     d80:	fe a0       	ldd	r15, Y+38	; 0x26
     d82:	0f a1       	ldd	r16, Y+39	; 0x27
     d84:	18 a5       	ldd	r17, Y+40	; 0x28
     d86:	ae 0c       	add	r10, r14
     d88:	bf 1c       	adc	r11, r15
     d8a:	c0 1e       	adc	r12, r16
     d8c:	d1 1e       	adc	r13, r17
     d8e:	ae 14       	cp	r10, r14
     d90:	bf 04       	cpc	r11, r15
     d92:	c0 06       	cpc	r12, r16
     d94:	d1 06       	cpc	r13, r17
     d96:	70 f0       	brcs	.+28     	; 0xdb4 <__stack+0x555>
     d98:	a2 16       	cp	r10, r18
     d9a:	b3 06       	cpc	r11, r19
     d9c:	c4 06       	cpc	r12, r20
     d9e:	d5 06       	cpc	r13, r21
     da0:	48 f4       	brcc	.+18     	; 0xdb4 <__stack+0x555>
     da2:	08 94       	sec
     da4:	21 08       	sbc	r2, r1
     da6:	31 08       	sbc	r3, r1
     da8:	41 08       	sbc	r4, r1
     daa:	51 08       	sbc	r5, r1
     dac:	ae 0c       	add	r10, r14
     dae:	bf 1c       	adc	r11, r15
     db0:	c0 1e       	adc	r12, r16
     db2:	d1 1e       	adc	r13, r17
     db4:	a2 1a       	sub	r10, r18
     db6:	b3 0a       	sbc	r11, r19
     db8:	c4 0a       	sbc	r12, r20
     dba:	d5 0a       	sbc	r13, r21
     dbc:	c6 01       	movw	r24, r12
     dbe:	b5 01       	movw	r22, r10
     dc0:	a4 01       	movw	r20, r8
     dc2:	93 01       	movw	r18, r6
     dc4:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     dc8:	7b 01       	movw	r14, r22
     dca:	8c 01       	movw	r16, r24
     dcc:	c6 01       	movw	r24, r12
     dce:	b5 01       	movw	r22, r10
     dd0:	a4 01       	movw	r20, r8
     dd2:	93 01       	movw	r18, r6
     dd4:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
     dd8:	c9 01       	movw	r24, r18
     dda:	da 01       	movw	r26, r20
     ddc:	3c 01       	movw	r6, r24
     dde:	4d 01       	movw	r8, r26
     de0:	c4 01       	movw	r24, r8
     de2:	b3 01       	movw	r22, r6
     de4:	65 96       	adiw	r28, 0x15	; 21
     de6:	2c ad       	ldd	r18, Y+60	; 0x3c
     de8:	3d ad       	ldd	r19, Y+61	; 0x3d
     dea:	4e ad       	ldd	r20, Y+62	; 0x3e
     dec:	5f ad       	ldd	r21, Y+63	; 0x3f
     dee:	65 97       	sbiw	r28, 0x15	; 21
     df0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     df4:	9b 01       	movw	r18, r22
     df6:	ac 01       	movw	r20, r24
     df8:	87 01       	movw	r16, r14
     dfa:	ff 24       	eor	r15, r15
     dfc:	ee 24       	eor	r14, r14
     dfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e00:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e02:	af 8d       	ldd	r26, Y+31	; 0x1f
     e04:	b8 a1       	ldd	r27, Y+32	; 0x20
     e06:	a0 70       	andi	r26, 0x00	; 0
     e08:	b0 70       	andi	r27, 0x00	; 0
     e0a:	57 01       	movw	r10, r14
     e0c:	68 01       	movw	r12, r16
     e0e:	a8 2a       	or	r10, r24
     e10:	b9 2a       	or	r11, r25
     e12:	ca 2a       	or	r12, r26
     e14:	db 2a       	or	r13, r27
     e16:	a2 16       	cp	r10, r18
     e18:	b3 06       	cpc	r11, r19
     e1a:	c4 06       	cpc	r12, r20
     e1c:	d5 06       	cpc	r13, r21
     e1e:	00 f5       	brcc	.+64     	; 0xe60 <__stack+0x601>
     e20:	08 94       	sec
     e22:	61 08       	sbc	r6, r1
     e24:	71 08       	sbc	r7, r1
     e26:	81 08       	sbc	r8, r1
     e28:	91 08       	sbc	r9, r1
     e2a:	6d a1       	ldd	r22, Y+37	; 0x25
     e2c:	7e a1       	ldd	r23, Y+38	; 0x26
     e2e:	8f a1       	ldd	r24, Y+39	; 0x27
     e30:	98 a5       	ldd	r25, Y+40	; 0x28
     e32:	a6 0e       	add	r10, r22
     e34:	b7 1e       	adc	r11, r23
     e36:	c8 1e       	adc	r12, r24
     e38:	d9 1e       	adc	r13, r25
     e3a:	a6 16       	cp	r10, r22
     e3c:	b7 06       	cpc	r11, r23
     e3e:	c8 06       	cpc	r12, r24
     e40:	d9 06       	cpc	r13, r25
     e42:	70 f0       	brcs	.+28     	; 0xe60 <__stack+0x601>
     e44:	a2 16       	cp	r10, r18
     e46:	b3 06       	cpc	r11, r19
     e48:	c4 06       	cpc	r12, r20
     e4a:	d5 06       	cpc	r13, r21
     e4c:	48 f4       	brcc	.+18     	; 0xe60 <__stack+0x601>
     e4e:	08 94       	sec
     e50:	61 08       	sbc	r6, r1
     e52:	71 08       	sbc	r7, r1
     e54:	81 08       	sbc	r8, r1
     e56:	91 08       	sbc	r9, r1
     e58:	a6 0e       	add	r10, r22
     e5a:	b7 1e       	adc	r11, r23
     e5c:	c8 1e       	adc	r12, r24
     e5e:	d9 1e       	adc	r13, r25
     e60:	d6 01       	movw	r26, r12
     e62:	c5 01       	movw	r24, r10
     e64:	82 1b       	sub	r24, r18
     e66:	93 0b       	sbc	r25, r19
     e68:	a4 0b       	sbc	r26, r20
     e6a:	b5 0b       	sbc	r27, r21
     e6c:	89 8f       	std	Y+25, r24	; 0x19
     e6e:	9a 8f       	std	Y+26, r25	; 0x1a
     e70:	ab 8f       	std	Y+27, r26	; 0x1b
     e72:	bc 8f       	std	Y+28, r27	; 0x1c
     e74:	d1 01       	movw	r26, r2
     e76:	99 27       	eor	r25, r25
     e78:	88 27       	eor	r24, r24
     e7a:	64 01       	movw	r12, r8
     e7c:	53 01       	movw	r10, r6
     e7e:	a8 2a       	or	r10, r24
     e80:	b9 2a       	or	r11, r25
     e82:	ca 2a       	or	r12, r26
     e84:	db 2a       	or	r13, r27
     e86:	a9 aa       	std	Y+49, r10	; 0x31
     e88:	ba aa       	std	Y+50, r11	; 0x32
     e8a:	cb aa       	std	Y+51, r12	; 0x33
     e8c:	dc aa       	std	Y+52, r13	; 0x34
     e8e:	86 01       	movw	r16, r12
     e90:	75 01       	movw	r14, r10
     e92:	2f ef       	ldi	r18, 0xFF	; 255
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	40 e0       	ldi	r20, 0x00	; 0
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	e2 22       	and	r14, r18
     e9c:	f3 22       	and	r15, r19
     e9e:	04 23       	and	r16, r20
     ea0:	15 23       	and	r17, r21
     ea2:	a6 01       	movw	r20, r12
     ea4:	66 27       	eor	r22, r22
     ea6:	77 27       	eor	r23, r23
     ea8:	6d 96       	adiw	r28, 0x1d	; 29
     eaa:	4c af       	std	Y+60, r20	; 0x3c
     eac:	5d af       	std	Y+61, r21	; 0x3d
     eae:	6e af       	std	Y+62, r22	; 0x3e
     eb0:	7f af       	std	Y+63, r23	; 0x3f
     eb2:	6d 97       	sbiw	r28, 0x1d	; 29
     eb4:	a9 a0       	ldd	r10, Y+33	; 0x21
     eb6:	ba a0       	ldd	r11, Y+34	; 0x22
     eb8:	cb a0       	ldd	r12, Y+35	; 0x23
     eba:	dc a0       	ldd	r13, Y+36	; 0x24
     ebc:	6f ef       	ldi	r22, 0xFF	; 255
     ebe:	7f ef       	ldi	r23, 0xFF	; 255
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	a6 22       	and	r10, r22
     ec6:	b7 22       	and	r11, r23
     ec8:	c8 22       	and	r12, r24
     eca:	d9 22       	and	r13, r25
     ecc:	89 a1       	ldd	r24, Y+33	; 0x21
     ece:	9a a1       	ldd	r25, Y+34	; 0x22
     ed0:	ab a1       	ldd	r26, Y+35	; 0x23
     ed2:	bc a1       	ldd	r27, Y+36	; 0x24
     ed4:	1d 01       	movw	r2, r26
     ed6:	44 24       	eor	r4, r4
     ed8:	55 24       	eor	r5, r5
     eda:	c8 01       	movw	r24, r16
     edc:	b7 01       	movw	r22, r14
     ede:	a6 01       	movw	r20, r12
     ee0:	95 01       	movw	r18, r10
     ee2:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     ee6:	69 96       	adiw	r28, 0x19	; 25
     ee8:	6c af       	std	Y+60, r22	; 0x3c
     eea:	7d af       	std	Y+61, r23	; 0x3d
     eec:	8e af       	std	Y+62, r24	; 0x3e
     eee:	9f af       	std	Y+63, r25	; 0x3f
     ef0:	69 97       	sbiw	r28, 0x19	; 25
     ef2:	c8 01       	movw	r24, r16
     ef4:	b7 01       	movw	r22, r14
     ef6:	a2 01       	movw	r20, r4
     ef8:	91 01       	movw	r18, r2
     efa:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     efe:	3b 01       	movw	r6, r22
     f00:	4c 01       	movw	r8, r24
     f02:	6d 96       	adiw	r28, 0x1d	; 29
     f04:	6c ad       	ldd	r22, Y+60	; 0x3c
     f06:	7d ad       	ldd	r23, Y+61	; 0x3d
     f08:	8e ad       	ldd	r24, Y+62	; 0x3e
     f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f0c:	6d 97       	sbiw	r28, 0x1d	; 29
     f0e:	a6 01       	movw	r20, r12
     f10:	95 01       	movw	r18, r10
     f12:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     f16:	7b 01       	movw	r14, r22
     f18:	8c 01       	movw	r16, r24
     f1a:	6d 96       	adiw	r28, 0x1d	; 29
     f1c:	6c ad       	ldd	r22, Y+60	; 0x3c
     f1e:	7d ad       	ldd	r23, Y+61	; 0x3d
     f20:	8e ad       	ldd	r24, Y+62	; 0x3e
     f22:	9f ad       	ldd	r25, Y+63	; 0x3f
     f24:	6d 97       	sbiw	r28, 0x1d	; 29
     f26:	a2 01       	movw	r20, r4
     f28:	91 01       	movw	r18, r2
     f2a:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
     f2e:	5b 01       	movw	r10, r22
     f30:	6c 01       	movw	r12, r24
     f32:	a8 01       	movw	r20, r16
     f34:	97 01       	movw	r18, r14
     f36:	26 0d       	add	r18, r6
     f38:	37 1d       	adc	r19, r7
     f3a:	48 1d       	adc	r20, r8
     f3c:	59 1d       	adc	r21, r9
     f3e:	69 96       	adiw	r28, 0x19	; 25
     f40:	6c ac       	ldd	r6, Y+60	; 0x3c
     f42:	7d ac       	ldd	r7, Y+61	; 0x3d
     f44:	8e ac       	ldd	r8, Y+62	; 0x3e
     f46:	9f ac       	ldd	r9, Y+63	; 0x3f
     f48:	69 97       	sbiw	r28, 0x19	; 25
     f4a:	c4 01       	movw	r24, r8
     f4c:	aa 27       	eor	r26, r26
     f4e:	bb 27       	eor	r27, r27
     f50:	28 0f       	add	r18, r24
     f52:	39 1f       	adc	r19, r25
     f54:	4a 1f       	adc	r20, r26
     f56:	5b 1f       	adc	r21, r27
     f58:	2e 15       	cp	r18, r14
     f5a:	3f 05       	cpc	r19, r15
     f5c:	40 07       	cpc	r20, r16
     f5e:	51 07       	cpc	r21, r17
     f60:	48 f4       	brcc	.+18     	; 0xf74 <__stack+0x715>
     f62:	e1 2c       	mov	r14, r1
     f64:	f1 2c       	mov	r15, r1
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	06 2f       	mov	r16, r22
     f6a:	11 2d       	mov	r17, r1
     f6c:	ae 0c       	add	r10, r14
     f6e:	bf 1c       	adc	r11, r15
     f70:	c0 1e       	adc	r12, r16
     f72:	d1 1e       	adc	r13, r17
     f74:	ca 01       	movw	r24, r20
     f76:	aa 27       	eor	r26, r26
     f78:	bb 27       	eor	r27, r27
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	6a 0d       	add	r22, r10
     f80:	7b 1d       	adc	r23, r11
     f82:	8c 1d       	adc	r24, r12
     f84:	9d 1d       	adc	r25, r13
     f86:	69 8c       	ldd	r6, Y+25	; 0x19
     f88:	7a 8c       	ldd	r7, Y+26	; 0x1a
     f8a:	8b 8c       	ldd	r8, Y+27	; 0x1b
     f8c:	9c 8c       	ldd	r9, Y+28	; 0x1c
     f8e:	66 16       	cp	r6, r22
     f90:	77 06       	cpc	r7, r23
     f92:	88 06       	cpc	r8, r24
     f94:	99 06       	cpc	r9, r25
     f96:	40 f1       	brcs	.+80     	; 0xfe8 <__stack+0x789>
     f98:	66 15       	cp	r22, r6
     f9a:	77 05       	cpc	r23, r7
     f9c:	88 05       	cpc	r24, r8
     f9e:	99 05       	cpc	r25, r9
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <__stack+0x745>
     fa2:	43 c0       	rjmp	.+134    	; 0x102a <__stack+0x7cb>
     fa4:	d9 01       	movw	r26, r18
     fa6:	99 27       	eor	r25, r25
     fa8:	88 27       	eor	r24, r24
     faa:	69 96       	adiw	r28, 0x19	; 25
     fac:	2c ad       	ldd	r18, Y+60	; 0x3c
     fae:	3d ad       	ldd	r19, Y+61	; 0x3d
     fb0:	4e ad       	ldd	r20, Y+62	; 0x3e
     fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
     fb4:	69 97       	sbiw	r28, 0x19	; 25
     fb6:	40 70       	andi	r20, 0x00	; 0
     fb8:	50 70       	andi	r21, 0x00	; 0
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	a4 1f       	adc	r26, r20
     fc0:	b5 1f       	adc	r27, r21
     fc2:	2d a5       	ldd	r18, Y+45	; 0x2d
     fc4:	3e a5       	ldd	r19, Y+46	; 0x2e
     fc6:	4f a5       	ldd	r20, Y+47	; 0x2f
     fc8:	58 a9       	ldd	r21, Y+48	; 0x30
     fca:	6e 96       	adiw	r28, 0x1e	; 30
     fcc:	0f ac       	ldd	r0, Y+63	; 0x3f
     fce:	6e 97       	sbiw	r28, 0x1e	; 30
     fd0:	04 c0       	rjmp	.+8      	; 0xfda <__stack+0x77b>
     fd2:	22 0f       	add	r18, r18
     fd4:	33 1f       	adc	r19, r19
     fd6:	44 1f       	adc	r20, r20
     fd8:	55 1f       	adc	r21, r21
     fda:	0a 94       	dec	r0
     fdc:	d2 f7       	brpl	.-12     	; 0xfd2 <__stack+0x773>
     fde:	28 17       	cp	r18, r24
     fe0:	39 07       	cpc	r19, r25
     fe2:	4a 07       	cpc	r20, r26
     fe4:	5b 07       	cpc	r21, r27
     fe6:	08 f5       	brcc	.+66     	; 0x102a <__stack+0x7cb>
     fe8:	09 a9       	ldd	r16, Y+49	; 0x31
     fea:	1a a9       	ldd	r17, Y+50	; 0x32
     fec:	2b a9       	ldd	r18, Y+51	; 0x33
     fee:	3c a9       	ldd	r19, Y+52	; 0x34
     ff0:	01 50       	subi	r16, 0x01	; 1
     ff2:	10 40       	sbci	r17, 0x00	; 0
     ff4:	20 40       	sbci	r18, 0x00	; 0
     ff6:	30 40       	sbci	r19, 0x00	; 0
     ff8:	09 ab       	std	Y+49, r16	; 0x31
     ffa:	1a ab       	std	Y+50, r17	; 0x32
     ffc:	2b ab       	std	Y+51, r18	; 0x33
     ffe:	3c ab       	std	Y+52, r19	; 0x34
    1000:	14 c0       	rjmp	.+40     	; 0x102a <__stack+0x7cb>
    1002:	66 24       	eor	r6, r6
    1004:	77 24       	eor	r7, r7
    1006:	43 01       	movw	r8, r6
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	29 ab       	std	Y+49, r18	; 0x31
    1012:	3a ab       	std	Y+50, r19	; 0x32
    1014:	4b ab       	std	Y+51, r20	; 0x33
    1016:	5c ab       	std	Y+52, r21	; 0x34
    1018:	0b c0       	rjmp	.+22     	; 0x1030 <__stack+0x7d1>
    101a:	66 24       	eor	r6, r6
    101c:	77 24       	eor	r7, r7
    101e:	43 01       	movw	r8, r6
    1020:	19 aa       	std	Y+49, r1	; 0x31
    1022:	1a aa       	std	Y+50, r1	; 0x32
    1024:	1b aa       	std	Y+51, r1	; 0x33
    1026:	1c aa       	std	Y+52, r1	; 0x34
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <__stack+0x7d1>
    102a:	66 24       	eor	r6, r6
    102c:	77 24       	eor	r7, r7
    102e:	43 01       	movw	r8, r6
    1030:	fe 01       	movw	r30, r28
    1032:	71 96       	adiw	r30, 0x11	; 17
    1034:	88 e0       	ldi	r24, 0x08	; 8
    1036:	df 01       	movw	r26, r30
    1038:	1d 92       	st	X+, r1
    103a:	8a 95       	dec	r24
    103c:	e9 f7       	brne	.-6      	; 0x1038 <__stack+0x7d9>
    103e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1040:	ba a8       	ldd	r11, Y+50	; 0x32
    1042:	cb a8       	ldd	r12, Y+51	; 0x33
    1044:	dc a8       	ldd	r13, Y+52	; 0x34
    1046:	a9 8a       	std	Y+17, r10	; 0x11
    1048:	ba 8a       	std	Y+18, r11	; 0x12
    104a:	cb 8a       	std	Y+19, r12	; 0x13
    104c:	dc 8a       	std	Y+20, r13	; 0x14
    104e:	6d 8a       	std	Y+21, r6	; 0x15
    1050:	7e 8a       	std	Y+22, r7	; 0x16
    1052:	8f 8a       	std	Y+23, r8	; 0x17
    1054:	98 8e       	std	Y+24, r9	; 0x18
    1056:	29 a9       	ldd	r18, Y+49	; 0x31
    1058:	3a 89       	ldd	r19, Y+18	; 0x12
    105a:	4b 89       	ldd	r20, Y+19	; 0x13
    105c:	5c 89       	ldd	r21, Y+20	; 0x14
    105e:	66 2d       	mov	r22, r6
    1060:	7e 89       	ldd	r23, Y+22	; 0x16
    1062:	8f 89       	ldd	r24, Y+23	; 0x17
    1064:	98 8d       	ldd	r25, Y+24	; 0x18
    1066:	c2 5a       	subi	r28, 0xA2	; 162
    1068:	df 4f       	sbci	r29, 0xFF	; 255
    106a:	e2 e1       	ldi	r30, 0x12	; 18
    106c:	0c 94 be 1f 	jmp	0x3f7c	; 0x3f7c <__epilogue_restores__>

00001070 <TDelay_Stop>:
************************************************************************************/
enuErrorStatus_t TDelay_Stop(uint8_t u8TimerGroupId)
{
	enuErrorStatus_t enuStatus = E_ERROR;

	enuStatus = Timer_Stop(u8TimerGroupId);
    1070:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Timer_Stop>

	return enuStatus;
}
    1074:	08 95       	ret

00001076 <TDelay_us>:
* Parameters (out): None
* Return value    : enuErrorStatus_t
* Description     : A function to make delay with us
************************************************************************************/
enuErrorStatus_t TDelay_us(uint8_t u8TimerGroupId, uint64_t u64Time_us, void(*pfCallback)(void))
{
    1076:	7f 92       	push	r7
    1078:	8f 92       	push	r8
    107a:	9f 92       	push	r9
    107c:	af 92       	push	r10
    107e:	bf 92       	push	r11
    1080:	cf 92       	push	r12
    1082:	df 92       	push	r13
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	d8 2e       	mov	r13, r24
    108e:	c2 2e       	mov	r12, r18
    1090:	b3 2e       	mov	r11, r19
    1092:	a4 2e       	mov	r10, r20
    1094:	95 2e       	mov	r9, r21
    1096:	86 2e       	mov	r8, r22
    1098:	77 2e       	mov	r7, r23
	enuErrorStatus_t enuStatus = E_ERROR;

	//turn on timer interrupts
	Timer_OVInterruptEnable(u8TimerGroupId);
    109a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <Timer_OVInterruptEnable>
	/*start timer to count in ms, send callBack function*/
	Timer_Start(u8TimerGroupId, u64Time_us, pfCallback);
    109e:	8d 2d       	mov	r24, r13
    10a0:	2c 2d       	mov	r18, r12
    10a2:	3b 2d       	mov	r19, r11
    10a4:	4a 2d       	mov	r20, r10
    10a6:	59 2d       	mov	r21, r9
    10a8:	68 2d       	mov	r22, r8
    10aa:	77 2d       	mov	r23, r7
    10ac:	0e 94 4a 0b 	call	0x1694	; 0x1694 <Timer_Start>
	enuStatus = Timer_GetStatus(u8TimerGroupId);
    10b0:	8d 2d       	mov	r24, r13
    10b2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Timer_GetStatus>

	return enuStatus;
}//end TDelay_us
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	bf 90       	pop	r11
    10c4:	af 90       	pop	r10
    10c6:	9f 90       	pop	r9
    10c8:	8f 90       	pop	r8
    10ca:	7f 90       	pop	r7
    10cc:	08 95       	ret

000010ce <TDelay_ms>:
* Parameters (out): None
* Return value    : enuErrorStatus_t
* Description     : A function to make delay with ms
************************************************************************************/
enuErrorStatus_t TDelay_ms(uint8_t u8TimerGroupId, uint64_t u64Time_ms, void(*pfCallback)(void))
{
    10ce:	2f 92       	push	r2
    10d0:	3f 92       	push	r3
    10d2:	4f 92       	push	r4
    10d4:	5f 92       	push	r5
    10d6:	6f 92       	push	r6
    10d8:	7f 92       	push	r7
    10da:	8f 92       	push	r8
    10dc:	9f 92       	push	r9
    10de:	af 92       	push	r10
    10e0:	bf 92       	push	r11
    10e2:	cf 92       	push	r12
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	28 97       	sbiw	r28, 0x08	; 8
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	c0 2e       	mov	r12, r16
    1106:	b1 2e       	mov	r11, r17
    1108:	92 2e       	mov	r9, r18
    110a:	83 2e       	mov	r8, r19
    110c:	64 2e       	mov	r6, r20
    110e:	45 2e       	mov	r4, r21
    1110:	26 2e       	mov	r2, r22
    1112:	7e 83       	std	Y+6, r23	; 0x06
    1114:	f8 86       	std	Y+8, r15	; 0x08
    1116:	ef 82       	std	Y+7, r14	; 0x07
	enuErrorStatus_t enuStatus = E_ERROR;
	/*Convert ms to us*/
	u64Time_ms *= TDELAY_THOUSAND_MULTIPLIER;

	//turn on timer interrupts
	Timer_OVInterruptEnable(u8TimerGroupId);
    1118:	0e 94 c4 0a 	call	0x1588	; 0x1588 <Timer_OVInterruptEnable>
	/*start timer to count in ms, send callBack function*/
	Timer_Start(u8TimerGroupId, u64Time_ms, pfCallback);
    111c:	20 2f       	mov	r18, r16
    111e:	31 2f       	mov	r19, r17
    1120:	49 2d       	mov	r20, r9
    1122:	58 2d       	mov	r21, r8
    1124:	66 2d       	mov	r22, r6
    1126:	74 2d       	mov	r23, r4
    1128:	82 2d       	mov	r24, r2
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	02 e0       	ldi	r16, 0x02	; 2
    112e:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    1132:	12 2f       	mov	r17, r18
    1134:	f3 2e       	mov	r15, r19
    1136:	e4 2e       	mov	r14, r20
    1138:	a5 2e       	mov	r10, r21
    113a:	56 2e       	mov	r5, r22
    113c:	7a 83       	std	Y+2, r23	; 0x02
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	05 e0       	ldi	r16, 0x05	; 5
    1144:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    1148:	a3 2f       	mov	r26, r19
    114a:	b4 2f       	mov	r27, r20
    114c:	05 2f       	mov	r16, r21
    114e:	d6 2e       	mov	r13, r22
    1150:	77 2e       	mov	r7, r23
    1152:	38 2e       	mov	r3, r24
    1154:	9d 83       	std	Y+5, r25	; 0x05
    1156:	82 2f       	mov	r24, r18
    1158:	81 1b       	sub	r24, r17
    115a:	18 2f       	mov	r17, r24
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	28 17       	cp	r18, r24
    1160:	08 f0       	brcs	.+2      	; 0x1164 <TDelay_ms+0x96>
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	3a 2f       	mov	r19, r26
    1166:	3f 19       	sub	r19, r15
    1168:	e1 e0       	ldi	r30, 0x01	; 1
    116a:	a3 17       	cp	r26, r19
    116c:	08 f0       	brcs	.+2      	; 0x1170 <TDelay_ms+0xa2>
    116e:	e0 e0       	ldi	r30, 0x00	; 0
    1170:	a3 2f       	mov	r26, r19
    1172:	af 1b       	sub	r26, r31
    1174:	21 e0       	ldi	r18, 0x01	; 1
    1176:	3a 17       	cp	r19, r26
    1178:	08 f0       	brcs	.+2      	; 0x117c <TDelay_ms+0xae>
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	e2 2b       	or	r30, r18
    117e:	4b 2f       	mov	r20, r27
    1180:	4e 19       	sub	r20, r14
    1182:	31 e0       	ldi	r19, 0x01	; 1
    1184:	b4 17       	cp	r27, r20
    1186:	08 f0       	brcs	.+2      	; 0x118a <TDelay_ms+0xbc>
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	e4 2e       	mov	r14, r20
    118c:	ee 1a       	sub	r14, r30
    118e:	21 e0       	ldi	r18, 0x01	; 1
    1190:	4e 15       	cp	r20, r14
    1192:	08 f0       	brcs	.+2      	; 0x1196 <TDelay_ms+0xc8>
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	32 2b       	or	r19, r18
    1198:	50 2f       	mov	r21, r16
    119a:	5a 19       	sub	r21, r10
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	05 17       	cp	r16, r21
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <TDelay_ms+0xd6>
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	b5 2f       	mov	r27, r21
    11a6:	b3 1b       	sub	r27, r19
    11a8:	21 e0       	ldi	r18, 0x01	; 1
    11aa:	5b 17       	cp	r21, r27
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <TDelay_ms+0xe2>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	42 2b       	or	r20, r18
    11b2:	6d 2d       	mov	r22, r13
    11b4:	65 19       	sub	r22, r5
    11b6:	31 e0       	ldi	r19, 0x01	; 1
    11b8:	d6 16       	cp	r13, r22
    11ba:	08 f0       	brcs	.+2      	; 0x11be <TDelay_ms+0xf0>
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	96 2f       	mov	r25, r22
    11c0:	94 1b       	sub	r25, r20
    11c2:	21 e0       	ldi	r18, 0x01	; 1
    11c4:	69 17       	cp	r22, r25
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <TDelay_ms+0xfc>
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	32 2b       	or	r19, r18
    11cc:	77 2d       	mov	r23, r7
    11ce:	ea 81       	ldd	r30, Y+2	; 0x02
    11d0:	7e 1b       	sub	r23, r30
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	77 16       	cp	r7, r23
    11d6:	08 f0       	brcs	.+2      	; 0x11da <TDelay_ms+0x10c>
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	07 2f       	mov	r16, r23
    11dc:	03 1b       	sub	r16, r19
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	70 17       	cp	r23, r16
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <TDelay_ms+0x118>
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	42 2b       	or	r20, r18
    11e8:	83 2d       	mov	r24, r3
    11ea:	fb 81       	ldd	r31, Y+3	; 0x03
    11ec:	8f 1b       	sub	r24, r31
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	38 16       	cp	r3, r24
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <TDelay_ms+0x128>
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	f8 2e       	mov	r15, r24
    11f8:	f4 1a       	sub	r15, r20
    11fa:	31 e0       	ldi	r19, 0x01	; 1
    11fc:	8f 15       	cp	r24, r15
    11fe:	08 f0       	brcs	.+2      	; 0x1202 <TDelay_ms+0x134>
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	23 2b       	or	r18, r19
    1204:	ad 80       	ldd	r10, Y+5	; 0x05
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	a8 1a       	sub	r10, r24
    120a:	a2 1a       	sub	r10, r18
    120c:	c1 0e       	add	r12, r17
    120e:	31 e0       	ldi	r19, 0x01	; 1
    1210:	c1 16       	cp	r12, r17
    1212:	08 f0       	brcs	.+2      	; 0x1216 <TDelay_ms+0x148>
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	1a 2f       	mov	r17, r26
    1218:	1b 0d       	add	r17, r11
    121a:	41 e0       	ldi	r20, 0x01	; 1
    121c:	1a 17       	cp	r17, r26
    121e:	08 f0       	brcs	.+2      	; 0x1222 <TDelay_ms+0x154>
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	d3 2e       	mov	r13, r19
    1224:	d1 0e       	add	r13, r17
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	d1 16       	cp	r13, r17
    122a:	08 f0       	brcs	.+2      	; 0x122e <TDelay_ms+0x160>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	48 2b       	or	r20, r24
    1230:	2e 2d       	mov	r18, r14
    1232:	29 0d       	add	r18, r9
    1234:	51 e0       	ldi	r21, 0x01	; 1
    1236:	2e 15       	cp	r18, r14
    1238:	08 f0       	brcs	.+2      	; 0x123c <TDelay_ms+0x16e>
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	14 2f       	mov	r17, r20
    123e:	12 0f       	add	r17, r18
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	12 17       	cp	r17, r18
    1244:	08 f0       	brcs	.+2      	; 0x1248 <TDelay_ms+0x17a>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	58 2b       	or	r21, r24
    124a:	3b 2f       	mov	r19, r27
    124c:	38 0d       	add	r19, r8
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	3b 17       	cp	r19, r27
    1252:	08 f0       	brcs	.+2      	; 0x1256 <TDelay_ms+0x188>
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	b5 2f       	mov	r27, r21
    1258:	b3 0f       	add	r27, r19
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	b3 17       	cp	r27, r19
    125e:	08 f0       	brcs	.+2      	; 0x1262 <TDelay_ms+0x194>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	68 2b       	or	r22, r24
    1264:	49 2f       	mov	r20, r25
    1266:	46 0d       	add	r20, r6
    1268:	71 e0       	ldi	r23, 0x01	; 1
    126a:	49 17       	cp	r20, r25
    126c:	08 f0       	brcs	.+2      	; 0x1270 <TDelay_ms+0x1a2>
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	a6 2f       	mov	r26, r22
    1272:	a4 0f       	add	r26, r20
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	a4 17       	cp	r26, r20
    1278:	08 f0       	brcs	.+2      	; 0x127c <TDelay_ms+0x1ae>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	78 2b       	or	r23, r24
    127e:	50 2f       	mov	r21, r16
    1280:	54 0d       	add	r21, r4
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	50 17       	cp	r21, r16
    1286:	08 f0       	brcs	.+2      	; 0x128a <TDelay_ms+0x1bc>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	75 0f       	add	r23, r21
    128c:	e1 e0       	ldi	r30, 0x01	; 1
    128e:	75 17       	cp	r23, r21
    1290:	08 f0       	brcs	.+2      	; 0x1294 <TDelay_ms+0x1c6>
    1292:	e0 e0       	ldi	r30, 0x00	; 0
    1294:	8e 2b       	or	r24, r30
    1296:	6f 2d       	mov	r22, r15
    1298:	62 0d       	add	r22, r2
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	6f 15       	cp	r22, r15
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <TDelay_ms+0x1d4>
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	86 0f       	add	r24, r22
    12a4:	e1 e0       	ldi	r30, 0x01	; 1
    12a6:	86 17       	cp	r24, r22
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <TDelay_ms+0x1de>
    12aa:	e0 e0       	ldi	r30, 0x00	; 0
    12ac:	9e 2b       	or	r25, r30
    12ae:	ee 81       	ldd	r30, Y+6	; 0x06
    12b0:	ae 0e       	add	r10, r30
    12b2:	96 01       	movw	r18, r12
    12b4:	41 2f       	mov	r20, r17
    12b6:	5b 2f       	mov	r21, r27
    12b8:	6a 2f       	mov	r22, r26
    12ba:	9a 0d       	add	r25, r10
    12bc:	03 e0       	ldi	r16, 0x03	; 3
    12be:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    12c2:	e8 2f       	mov	r30, r24
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	89 01       	movw	r16, r18
    12c8:	9a 01       	movw	r18, r20
    12ca:	ab 01       	movw	r20, r22
    12cc:	6e 2f       	mov	r22, r30
    12ce:	79 2f       	mov	r23, r25
    12d0:	ef 80       	ldd	r14, Y+7	; 0x07
    12d2:	f8 84       	ldd	r15, Y+8	; 0x08
    12d4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <Timer_Start>
	enuStatus = Timer_GetStatus(u8TimerGroupId);
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Timer_GetStatus>

	return enuStatus;
}//end TDelay_ms
    12de:	28 96       	adiw	r28, 0x08	; 8
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	bf 90       	pop	r11
    12fc:	af 90       	pop	r10
    12fe:	9f 90       	pop	r9
    1300:	8f 90       	pop	r8
    1302:	7f 90       	pop	r7
    1304:	6f 90       	pop	r6
    1306:	5f 90       	pop	r5
    1308:	4f 90       	pop	r4
    130a:	3f 90       	pop	r3
    130c:	2f 90       	pop	r2
    130e:	08 95       	ret

00001310 <Timer_Init>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to initialize timer module according to the sent parameters
************************************************************************************/
enuErrorStatus_t Timer_Init(strTimerConfigType_t* strTimerConfigType)
{
    1310:	fc 01       	movw	r30, r24
   if(strTimerConfigType->enuTimerModule == TIMER0)
    1312:	80 81       	ld	r24, Z
    1314:	88 23       	and	r24, r24
    1316:	09 f0       	breq	.+2      	; 0x131a <Timer_Init+0xa>
    1318:	4e c0       	rjmp	.+156    	; 0x13b6 <Timer_Init+0xa6>
   {
		//set the timer mode by setting the correct configuration of the WGM bits for the mode the user has selected
		switch(strTimerConfigType->enuTimerMode)
    131a:	81 81       	ldd	r24, Z+1	; 0x01
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	59 f0       	breq	.+22     	; 0x1336 <Timer_Init+0x26>
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	30 f0       	brcs	.+12     	; 0x1330 <Timer_Init+0x20>
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	69 f0       	breq	.+26     	; 0x1342 <Timer_Init+0x32>
    1328:	83 30       	cpi	r24, 0x03	; 3
    132a:	09 f0       	breq	.+2      	; 0x132e <Timer_Init+0x1e>
    132c:	97 c0       	rjmp	.+302    	; 0x145c <Timer_Init+0x14c>
    132e:	0c c0       	rjmp	.+24     	; 0x1348 <Timer_Init+0x38>
		{
			case TIMER_NORMAL_MODE:
				CLEAR_BIT(TCCR0_R,WGM00_B);
    1330:	83 b7       	in	r24, 0x33	; 51
    1332:	8f 7b       	andi	r24, 0xBF	; 191
    1334:	02 c0       	rjmp	.+4      	; 0x133a <Timer_Init+0x2a>
				CLEAR_BIT(TCCR0_R,WGM01_B);
				break;
			case TIMER_PHASECORRECT_MODE:
				SET_BIT(TCCR0_R,WGM00_B);
    1336:	83 b7       	in	r24, 0x33	; 51
    1338:	80 64       	ori	r24, 0x40	; 64
    133a:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0_R,WGM01_B);
    133c:	83 b7       	in	r24, 0x33	; 51
    133e:	87 7f       	andi	r24, 0xF7	; 247
    1340:	08 c0       	rjmp	.+16     	; 0x1352 <Timer_Init+0x42>
				break;
			case TIMER_CTC_MODE:
				CLEAR_BIT(TCCR0_R,WGM00_B);
    1342:	83 b7       	in	r24, 0x33	; 51
    1344:	8f 7b       	andi	r24, 0xBF	; 191
    1346:	02 c0       	rjmp	.+4      	; 0x134c <Timer_Init+0x3c>
				SET_BIT(TCCR0_R,WGM01_B);
				break;
			case TIMER_FASTPWM_MODE:
				SET_BIT(TCCR0_R,WGM00_B);
    1348:	83 b7       	in	r24, 0x33	; 51
    134a:	80 64       	ori	r24, 0x40	; 64
    134c:	83 bf       	out	0x33, r24	; 51
				SET_BIT(TCCR0_R,WGM01_B);
    134e:	83 b7       	in	r24, 0x33	; 51
    1350:	88 60       	ori	r24, 0x08	; 8
    1352:	83 bf       	out	0x33, r24	; 51
				return E_ERROR;
				break;
		}

		//clear the CS bits in the Timer control register and set the prescaler value
		TCCR0_R &= 0xF8;
    1354:	83 b7       	in	r24, 0x33	; 51
    1356:	88 7f       	andi	r24, 0xF8	; 248
    1358:	83 bf       	out	0x33, r24	; 51
		TCCR0_R |= strTimerConfigType->enuTimerScaler;
    135a:	83 b7       	in	r24, 0x33	; 51
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	89 2b       	or	r24, r25
    1360:	83 bf       	out	0x33, r24	; 51

		//set the prescaler value in a global variable for other functions to use
		switch(strTimerConfigType->enuTimerScaler)
    1362:	92 30       	cpi	r25, 0x02	; 2
    1364:	c1 f0       	breq	.+48     	; 0x1396 <Timer_Init+0x86>
    1366:	93 30       	cpi	r25, 0x03	; 3
    1368:	30 f4       	brcc	.+12     	; 0x1376 <Timer_Init+0x66>
    136a:	99 23       	and	r25, r25
    136c:	61 f0       	breq	.+24     	; 0x1386 <Timer_Init+0x76>
    136e:	91 30       	cpi	r25, 0x01	; 1
    1370:	09 f0       	breq	.+2      	; 0x1374 <Timer_Init+0x64>
    1372:	76 c0       	rjmp	.+236    	; 0x1460 <Timer_Init+0x150>
    1374:	0d c0       	rjmp	.+26     	; 0x1390 <Timer_Init+0x80>
    1376:	94 30       	cpi	r25, 0x04	; 4
    1378:	c1 f0       	breq	.+48     	; 0x13aa <Timer_Init+0x9a>
    137a:	94 30       	cpi	r25, 0x04	; 4
    137c:	98 f0       	brcs	.+38     	; 0x13a4 <Timer_Init+0x94>
    137e:	95 30       	cpi	r25, 0x05	; 5
    1380:	09 f0       	breq	.+2      	; 0x1384 <Timer_Init+0x74>
    1382:	6e c0       	rjmp	.+220    	; 0x1460 <Timer_Init+0x150>
    1384:	15 c0       	rjmp	.+42     	; 0x13b0 <Timer_Init+0xa0>
		{
			case TIMER_STOP:          Gu16_T0Prescaler=0;       break;
    1386:	10 92 ea 01 	sts	0x01EA, r1
    138a:	10 92 e9 01 	sts	0x01E9, r1
    138e:	64 c0       	rjmp	.+200    	; 0x1458 <Timer_Init+0x148>
			case TIMER_SCALER_1:      Gu16_T0Prescaler=1;       break;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <Timer_Init+0x8a>
			case TIMER_SCALER_8:      Gu16_T0Prescaler=8;       break;
    1396:	88 e0       	ldi	r24, 0x08	; 8
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	90 93 ea 01 	sts	0x01EA, r25
    139e:	80 93 e9 01 	sts	0x01E9, r24
    13a2:	5a c0       	rjmp	.+180    	; 0x1458 <Timer_Init+0x148>
			case TIMER_SCALER_64:     Gu16_T0Prescaler=64;      break;
    13a4:	80 e4       	ldi	r24, 0x40	; 64
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	f8 cf       	rjmp	.-16     	; 0x139a <Timer_Init+0x8a>
			case TIMER_SCALER_256:    Gu16_T0Prescaler=256;     break;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	f5 cf       	rjmp	.-22     	; 0x139a <Timer_Init+0x8a>
			case TIMER_SCALER_1024:   Gu16_T0Prescaler=1024;    break;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	94 e0       	ldi	r25, 0x04	; 4
    13b4:	f2 cf       	rjmp	.-28     	; 0x139a <Timer_Init+0x8a>
			default:                                            break;
		}
   }
   else if(strTimerConfigType->enuTimerModule == TIMER1)
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <Timer_Init+0xac>
    13ba:	52 c0       	rjmp	.+164    	; 0x1460 <Timer_Init+0x150>
   {

   }
   else if(strTimerConfigType->enuTimerModule == TIMER2)
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	09 f0       	breq	.+2      	; 0x13c2 <Timer_Init+0xb2>
    13c0:	4f c0       	rjmp	.+158    	; 0x1460 <Timer_Init+0x150>
   {
      //set the timer mode by setting the correct configuration of the WGM bits for the mode the user has selected
      switch (strTimerConfigType->enuTimerMode)
    13c2:	81 81       	ldd	r24, Z+1	; 0x01
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	59 f0       	breq	.+22     	; 0x13de <Timer_Init+0xce>
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	30 f0       	brcs	.+12     	; 0x13d8 <Timer_Init+0xc8>
    13cc:	82 30       	cpi	r24, 0x02	; 2
    13ce:	69 f0       	breq	.+26     	; 0x13ea <Timer_Init+0xda>
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <Timer_Init+0xc6>
    13d4:	43 c0       	rjmp	.+134    	; 0x145c <Timer_Init+0x14c>
    13d6:	0c c0       	rjmp	.+24     	; 0x13f0 <Timer_Init+0xe0>
      {
         case TIMER_NORMAL_MODE:
				CLEAR_BIT(TCCR2_R,WGM20_B);
    13d8:	85 b5       	in	r24, 0x25	; 37
    13da:	8f 7b       	andi	r24, 0xBF	; 191
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <Timer_Init+0xd2>
				CLEAR_BIT(TCCR2_R,WGM21_B);
				break;
         case TIMER_PHASECORRECT_MODE:
				SET_BIT(TCCR2_R,WGM20_B);
    13de:	85 b5       	in	r24, 0x25	; 37
    13e0:	80 64       	ori	r24, 0x40	; 64
    13e2:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2_R,WGM21_B);
    13e4:	85 b5       	in	r24, 0x25	; 37
    13e6:	87 7f       	andi	r24, 0xF7	; 247
    13e8:	08 c0       	rjmp	.+16     	; 0x13fa <Timer_Init+0xea>
				break;
         case TIMER_CTC_MODE:
				CLEAR_BIT(TCCR2_R,WGM20_B);
    13ea:	85 b5       	in	r24, 0x25	; 37
    13ec:	8f 7b       	andi	r24, 0xBF	; 191
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <Timer_Init+0xe4>
				SET_BIT(TCCR2_R,WGM21_B);
				break;
         case TIMER_FASTPWM_MODE:
				SET_BIT(TCCR2_R,WGM20_B);
    13f0:	85 b5       	in	r24, 0x25	; 37
    13f2:	80 64       	ori	r24, 0x40	; 64
    13f4:	85 bd       	out	0x25, r24	; 37
				SET_BIT(TCCR2_R,WGM21_B);
    13f6:	85 b5       	in	r24, 0x25	; 37
    13f8:	88 60       	ori	r24, 0x08	; 8
    13fa:	85 bd       	out	0x25, r24	; 37
				return E_ERROR;
				break;
      }

      //clear the CS bits in the Timer control register and set the prescaler value
      TCCR2_R &= 0xF8;
    13fc:	85 b5       	in	r24, 0x25	; 37
    13fe:	88 7f       	andi	r24, 0xF8	; 248
    1400:	85 bd       	out	0x25, r24	; 37
      TCCR2_R |= strTimerConfigType->enuTimerScaler;
    1402:	85 b5       	in	r24, 0x25	; 37
    1404:	93 81       	ldd	r25, Z+3	; 0x03
    1406:	89 2b       	or	r24, r25
    1408:	85 bd       	out	0x25, r24	; 37

      //set the prescaler value in a global variable for other functions to use
      switch(strTimerConfigType->enuTimerScaler)
    140a:	92 30       	cpi	r25, 0x02	; 2
    140c:	b1 f0       	breq	.+44     	; 0x143a <Timer_Init+0x12a>
    140e:	93 30       	cpi	r25, 0x03	; 3
    1410:	28 f4       	brcc	.+10     	; 0x141c <Timer_Init+0x10c>
    1412:	99 23       	and	r25, r25
    1414:	51 f0       	breq	.+20     	; 0x142a <Timer_Init+0x11a>
    1416:	91 30       	cpi	r25, 0x01	; 1
    1418:	19 f5       	brne	.+70     	; 0x1460 <Timer_Init+0x150>
    141a:	0c c0       	rjmp	.+24     	; 0x1434 <Timer_Init+0x124>
    141c:	94 30       	cpi	r25, 0x04	; 4
    141e:	99 f0       	breq	.+38     	; 0x1446 <Timer_Init+0x136>
    1420:	94 30       	cpi	r25, 0x04	; 4
    1422:	70 f0       	brcs	.+28     	; 0x1440 <Timer_Init+0x130>
    1424:	95 30       	cpi	r25, 0x05	; 5
    1426:	e1 f4       	brne	.+56     	; 0x1460 <Timer_Init+0x150>
    1428:	11 c0       	rjmp	.+34     	; 0x144c <Timer_Init+0x13c>
      {
         case TIMER_STOP:          Gu16_T2Prescaler=0;       break;
    142a:	10 92 ff 01 	sts	0x01FF, r1
    142e:	10 92 fe 01 	sts	0x01FE, r1
    1432:	12 c0       	rjmp	.+36     	; 0x1458 <Timer_Init+0x148>
         case TIMER_SCALER_1:      Gu16_T2Prescaler=1;       break;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0b c0       	rjmp	.+22     	; 0x1450 <Timer_Init+0x140>
         case TIMER_SCALER_8:      Gu16_T2Prescaler=8;       break;
    143a:	88 e0       	ldi	r24, 0x08	; 8
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	08 c0       	rjmp	.+16     	; 0x1450 <Timer_Init+0x140>
         case TIMER_SCALER_64:     Gu16_T2Prescaler=64;      break;
    1440:	80 e4       	ldi	r24, 0x40	; 64
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	05 c0       	rjmp	.+10     	; 0x1450 <Timer_Init+0x140>
         case TIMER_SCALER_256:    Gu16_T2Prescaler=256;     break;
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <Timer_Init+0x140>
         case TIMER_SCALER_1024:   Gu16_T2Prescaler=1024;    break;
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	94 e0       	ldi	r25, 0x04	; 4
    1450:	90 93 ff 01 	sts	0x01FF, r25
    1454:	80 93 fe 01 	sts	0x01FE, r24
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	08 95       	ret
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	08 95       	ret
    1460:	81 e0       	ldi	r24, 0x01	; 1
   else
   {
   }
   //return E_OK state
   return E_OK;
}
    1462:	08 95       	ret

00001464 <Timer_OCMode>:
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to initialize the OCR pin for use in PWM generation
************************************************************************************/
enuErrorStatus_t Timer_OCMode(uint8_t u8GroupId, enuOCMode_t enuOCMode)
{
   if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER0)
    1464:	a8 2f       	mov	r26, r24
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	fd 01       	movw	r30, r26
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	eb 58       	subi	r30, 0x8B	; 139
    1474:	fe 4f       	sbci	r31, 0xFE	; 254
    1476:	e0 81       	ld	r30, Z
    1478:	ee 23       	and	r30, r30
    147a:	e9 f4       	brne	.+58     	; 0x14b6 <Timer_OCMode+0x52>
   {
		//set the OC0 pin mode by setting the correct configuration of the COM bits for the mode the user has selected
		switch(enuOCMode)
    147c:	61 30       	cpi	r22, 0x01	; 1
    147e:	59 f0       	breq	.+22     	; 0x1496 <Timer_OCMode+0x32>
    1480:	61 30       	cpi	r22, 0x01	; 1
    1482:	30 f0       	brcs	.+12     	; 0x1490 <Timer_OCMode+0x2c>
    1484:	62 30       	cpi	r22, 0x02	; 2
    1486:	69 f0       	breq	.+26     	; 0x14a2 <Timer_OCMode+0x3e>
    1488:	63 30       	cpi	r22, 0x03	; 3
    148a:	09 f0       	breq	.+2      	; 0x148e <Timer_OCMode+0x2a>
    148c:	79 c0       	rjmp	.+242    	; 0x1580 <Timer_OCMode+0x11c>
    148e:	0c c0       	rjmp	.+24     	; 0x14a8 <Timer_OCMode+0x44>
		{
			case OC_DISCONNECTED:
				CLEAR_BIT(TCCR0_R,COM00_B);
    1490:	83 b7       	in	r24, 0x33	; 51
    1492:	8f 7e       	andi	r24, 0xEF	; 239
    1494:	02 c0       	rjmp	.+4      	; 0x149a <Timer_OCMode+0x36>
				CLEAR_BIT(TCCR0_R,COM01_B);
				break;
			case OC_TOGGLE:
				SET_BIT(TCCR0_R,COM00_B);
    1496:	83 b7       	in	r24, 0x33	; 51
    1498:	80 61       	ori	r24, 0x10	; 16
    149a:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0_R,COM01_B);
    149c:	83 b7       	in	r24, 0x33	; 51
    149e:	8f 7d       	andi	r24, 0xDF	; 223
    14a0:	08 c0       	rjmp	.+16     	; 0x14b2 <Timer_OCMode+0x4e>
				break;
			case OC_NON_INVERTING:
				CLEAR_BIT(TCCR0_R,COM00_B);
    14a2:	83 b7       	in	r24, 0x33	; 51
    14a4:	8f 7e       	andi	r24, 0xEF	; 239
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <Timer_OCMode+0x48>
				SET_BIT(TCCR0_R,COM01_B);
				break;
			case OC_INVERTING:
				SET_BIT(TCCR0_R,COM00_B);
    14a8:	83 b7       	in	r24, 0x33	; 51
    14aa:	80 61       	ori	r24, 0x10	; 16
    14ac:	83 bf       	out	0x33, r24	; 51
				SET_BIT(TCCR0_R,COM01_B);
    14ae:	83 b7       	in	r24, 0x33	; 51
    14b0:	80 62       	ori	r24, 0x20	; 32
    14b2:	83 bf       	out	0x33, r24	; 51
    14b4:	63 c0       	rjmp	.+198    	; 0x157c <Timer_OCMode+0x118>
			default:
				return E_ERROR;
				break;
		}
   }
   else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER1)
    14b6:	e1 30       	cpi	r30, 0x01	; 1
    14b8:	09 f0       	breq	.+2      	; 0x14bc <Timer_OCMode+0x58>
    14ba:	43 c0       	rjmp	.+134    	; 0x1542 <Timer_OCMode+0xde>
   {
		if(astrTimerConfigParameters[u8GroupId].enuTimer1OCSelect == TIMER1_OCA)
    14bc:	aa 0f       	add	r26, r26
    14be:	bb 1f       	adc	r27, r27
    14c0:	aa 0f       	add	r26, r26
    14c2:	bb 1f       	adc	r27, r27
    14c4:	a9 58       	subi	r26, 0x89	; 137
    14c6:	be 4f       	sbci	r27, 0xFE	; 254
    14c8:	8c 91       	ld	r24, X
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	e1 f4       	brne	.+56     	; 0x1506 <Timer_OCMode+0xa2>
		{
	   	//select the appropriate mode for the OCR1A Pin the user has selected
	   	//and clearing the appropriate bits in the TCCR1A Register, Values are
	   	//demonstrated in the datasheet
	      switch(enuOCMode)
    14ce:	61 30       	cpi	r22, 0x01	; 1
    14d0:	59 f0       	breq	.+22     	; 0x14e8 <Timer_OCMode+0x84>
    14d2:	61 30       	cpi	r22, 0x01	; 1
    14d4:	30 f0       	brcs	.+12     	; 0x14e2 <Timer_OCMode+0x7e>
    14d6:	62 30       	cpi	r22, 0x02	; 2
    14d8:	69 f0       	breq	.+26     	; 0x14f4 <Timer_OCMode+0x90>
    14da:	63 30       	cpi	r22, 0x03	; 3
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <Timer_OCMode+0x7c>
    14de:	50 c0       	rjmp	.+160    	; 0x1580 <Timer_OCMode+0x11c>
    14e0:	0c c0       	rjmp	.+24     	; 0x14fa <Timer_OCMode+0x96>
	      {
	         case OC_DISCONNECTED:
					CLEAR_BIT(TCCR1A_R,COM1A0_B);
    14e2:	8f b5       	in	r24, 0x2f	; 47
    14e4:	8f 7b       	andi	r24, 0xBF	; 191
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <Timer_OCMode+0x88>
					CLEAR_BIT(TCCR1A_R,COM1A1_B);
					break;
	         case OC_TOGGLE:
					SET_BIT(TCCR1A_R,COM1A0_B);
    14e8:	8f b5       	in	r24, 0x2f	; 47
    14ea:	80 64       	ori	r24, 0x40	; 64
    14ec:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A_R,COM1A1_B);
    14ee:	8f b5       	in	r24, 0x2f	; 47
    14f0:	8f 77       	andi	r24, 0x7F	; 127
    14f2:	25 c0       	rjmp	.+74     	; 0x153e <Timer_OCMode+0xda>
					break;
	         case OC_NON_INVERTING:
					CLEAR_BIT(TCCR1A_R,COM1A0_B);
    14f4:	8f b5       	in	r24, 0x2f	; 47
    14f6:	8f 7b       	andi	r24, 0xBF	; 191
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <Timer_OCMode+0x9a>
					SET_BIT(TCCR1A_R,COM1A1_B);
					break;
	         case OC_INVERTING:
					SET_BIT(TCCR1A_R,COM1A0_B);
    14fa:	8f b5       	in	r24, 0x2f	; 47
    14fc:	80 64       	ori	r24, 0x40	; 64
    14fe:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A_R,COM1A1_B);
    1500:	8f b5       	in	r24, 0x2f	; 47
    1502:	80 68       	ori	r24, 0x80	; 128
    1504:	1c c0       	rjmp	.+56     	; 0x153e <Timer_OCMode+0xda>
	         default:
					return E_ERROR;
					break;
	      }
		}
		else if(astrTimerConfigParameters[u8GroupId].enuTimer1OCSelect == TIMER1_OCB)
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	e9 f5       	brne	.+122    	; 0x1584 <Timer_OCMode+0x120>
		{
		   //select the appropriate mode for the OCR1B Pin the user has selected
		   //and clearing the appropriate bits in the TCCR1A Register, Values are
		   //demonstrated in the datasheet
		   switch (enuOCMode)
    150a:	61 30       	cpi	r22, 0x01	; 1
    150c:	51 f0       	breq	.+20     	; 0x1522 <Timer_OCMode+0xbe>
    150e:	61 30       	cpi	r22, 0x01	; 1
    1510:	28 f0       	brcs	.+10     	; 0x151c <Timer_OCMode+0xb8>
    1512:	62 30       	cpi	r22, 0x02	; 2
    1514:	61 f0       	breq	.+24     	; 0x152e <Timer_OCMode+0xca>
    1516:	63 30       	cpi	r22, 0x03	; 3
    1518:	99 f5       	brne	.+102    	; 0x1580 <Timer_OCMode+0x11c>
    151a:	0c c0       	rjmp	.+24     	; 0x1534 <Timer_OCMode+0xd0>
		   {
		      case OC_DISCONNECTED:
					CLEAR_BIT(TCCR1A_R,COM1B0_B);
    151c:	8f b5       	in	r24, 0x2f	; 47
    151e:	8f 7e       	andi	r24, 0xEF	; 239
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <Timer_OCMode+0xc2>
					CLEAR_BIT(TCCR1A_R,COM1B1_B);
					break;
		      case OC_TOGGLE:
					SET_BIT(TCCR1A_R,COM1B0_B);
    1522:	8f b5       	in	r24, 0x2f	; 47
    1524:	80 61       	ori	r24, 0x10	; 16
    1526:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A_R,COM1B1_B);
    1528:	8f b5       	in	r24, 0x2f	; 47
    152a:	8f 7d       	andi	r24, 0xDF	; 223
    152c:	08 c0       	rjmp	.+16     	; 0x153e <Timer_OCMode+0xda>
					break;
		      case OC_NON_INVERTING:
					CLEAR_BIT(TCCR1A_R,COM1B0_B);
    152e:	8f b5       	in	r24, 0x2f	; 47
    1530:	8f 7e       	andi	r24, 0xEF	; 239
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <Timer_OCMode+0xd4>
					SET_BIT(TCCR1A_R,COM1B1_B);
					break;
		      case OC_INVERTING:
					SET_BIT(TCCR1A_R,COM1B0_B);
    1534:	8f b5       	in	r24, 0x2f	; 47
    1536:	80 61       	ori	r24, 0x10	; 16
    1538:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A_R,COM1B1_B);
    153a:	8f b5       	in	r24, 0x2f	; 47
    153c:	80 62       	ori	r24, 0x20	; 32
    153e:	8f bd       	out	0x2f, r24	; 47
    1540:	1d c0       	rjmp	.+58     	; 0x157c <Timer_OCMode+0x118>
		}
	   else
	   {
	   }
   }
   else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER2)
    1542:	e2 30       	cpi	r30, 0x02	; 2
    1544:	f9 f4       	brne	.+62     	; 0x1584 <Timer_OCMode+0x120>
   {
      //set the OC2 pin mode by setting the correct configuration of the COM bits for the mode the user has selected
      switch (enuOCMode)
    1546:	61 30       	cpi	r22, 0x01	; 1
    1548:	51 f0       	breq	.+20     	; 0x155e <Timer_OCMode+0xfa>
    154a:	61 30       	cpi	r22, 0x01	; 1
    154c:	28 f0       	brcs	.+10     	; 0x1558 <Timer_OCMode+0xf4>
    154e:	62 30       	cpi	r22, 0x02	; 2
    1550:	61 f0       	breq	.+24     	; 0x156a <Timer_OCMode+0x106>
    1552:	63 30       	cpi	r22, 0x03	; 3
    1554:	a9 f4       	brne	.+42     	; 0x1580 <Timer_OCMode+0x11c>
    1556:	0c c0       	rjmp	.+24     	; 0x1570 <Timer_OCMode+0x10c>
      {
         case OC_DISCONNECTED:
				CLEAR_BIT(TCCR2_R,COM20_B);
    1558:	85 b5       	in	r24, 0x25	; 37
    155a:	8f 7e       	andi	r24, 0xEF	; 239
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <Timer_OCMode+0xfe>
				CLEAR_BIT(TCCR2_R,COM21_B);
				break;
         case OC_TOGGLE:
				SET_BIT(TCCR2_R,COM20_B);
    155e:	85 b5       	in	r24, 0x25	; 37
    1560:	80 61       	ori	r24, 0x10	; 16
    1562:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2_R,COM21_B);
    1564:	85 b5       	in	r24, 0x25	; 37
    1566:	8f 7d       	andi	r24, 0xDF	; 223
    1568:	08 c0       	rjmp	.+16     	; 0x157a <Timer_OCMode+0x116>
				break;
         case OC_NON_INVERTING:
				CLEAR_BIT(TCCR2_R,COM20_B);
    156a:	85 b5       	in	r24, 0x25	; 37
    156c:	8f 7e       	andi	r24, 0xEF	; 239
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <Timer_OCMode+0x110>
				SET_BIT(TCCR2_R,COM21_B);
				break;
         case OC_INVERTING:
				SET_BIT(TCCR2_R,COM20_B);
    1570:	85 b5       	in	r24, 0x25	; 37
    1572:	80 61       	ori	r24, 0x10	; 16
    1574:	85 bd       	out	0x25, r24	; 37
				SET_BIT(TCCR2_R,COM21_B);
    1576:	85 b5       	in	r24, 0x25	; 37
    1578:	80 62       	ori	r24, 0x20	; 32
    157a:	85 bd       	out	0x25, r24	; 37
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	08 95       	ret
				break;
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	08 95       	ret
    1584:	81 e0       	ldi	r24, 0x01	; 1
   else
   {
   }
   //return E_OK state
   return E_OK;
}
    1586:	08 95       	ret

00001588 <Timer_OVInterruptEnable>:
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to enable overflow interrupt
************************************************************************************/
enuErrorStatus_t Timer_OVInterruptEnable(uint8_t u8GroupId)
{
	if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER0)
    1588:	e8 2f       	mov	r30, r24
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	ee 0f       	add	r30, r30
    158e:	ff 1f       	adc	r31, r31
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	eb 58       	subi	r30, 0x8B	; 139
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	e0 81       	ld	r30, Z
    159a:	ee 23       	and	r30, r30
    159c:	19 f4       	brne	.+6      	; 0x15a4 <Timer_OVInterruptEnable+0x1c>
	{
		//set the TOIE bit to enable the overflow interrupt
		SET_BIT(TIMSK_R,TOIE0_B);
    159e:	89 b7       	in	r24, 0x39	; 57
    15a0:	81 60       	ori	r24, 0x01	; 1
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <Timer_OVInterruptEnable+0x2e>
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER1)
    15a4:	e1 30       	cpi	r30, 0x01	; 1
    15a6:	19 f4       	brne	.+6      	; 0x15ae <Timer_OVInterruptEnable+0x26>
	{
	   //set the appropriate pin in the TIMSK register to enable overflow interrupt
	   SET_BIT(TIMSK_R,TOIE1_B);
    15a8:	89 b7       	in	r24, 0x39	; 57
    15aa:	84 60       	ori	r24, 0x04	; 4
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <Timer_OVInterruptEnable+0x2e>
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER2)
    15ae:	e2 30       	cpi	r30, 0x02	; 2
    15b0:	19 f4       	brne	.+6      	; 0x15b8 <Timer_OVInterruptEnable+0x30>
	{
	   //set the TOIE bit to enable the overflow interrupt
	   SET_BIT(TIMSK_R,TOIE2_B);
    15b2:	89 b7       	in	r24, 0x39	; 57
    15b4:	80 64       	ori	r24, 0x40	; 64
    15b6:	89 bf       	out	0x39, r24	; 57
	}
	else
	{
	}
   return E_OK;
}
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	08 95       	ret

000015bc <Timer_OVInterruptDisable>:
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to disable overflow interrupt
************************************************************************************/
enuErrorStatus_t Timer_OVInterruptDisable(uint8_t u8GroupId)
{
	if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER0)
    15bc:	e8 2f       	mov	r30, r24
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	ee 0f       	add	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	eb 58       	subi	r30, 0x8B	; 139
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	e0 81       	ld	r30, Z
    15ce:	ee 23       	and	r30, r30
    15d0:	19 f4       	brne	.+6      	; 0x15d8 <Timer_OVInterruptDisable+0x1c>
	{
		//clear the TOIE bit to disable the overflow interrupt
		CLEAR_BIT(TIMSK_R,TOIE0_B);
    15d2:	89 b7       	in	r24, 0x39	; 57
    15d4:	8e 7f       	andi	r24, 0xFE	; 254
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <Timer_OVInterruptDisable+0x2e>
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER1)
    15d8:	e1 30       	cpi	r30, 0x01	; 1
    15da:	19 f4       	brne	.+6      	; 0x15e2 <Timer_OVInterruptDisable+0x26>
	{
	   //clear the appropriate pin in the TIMSK register to disable overflow interrupt
	   CLEAR_BIT(TIMSK_R,TOIE1_B);
    15dc:	89 b7       	in	r24, 0x39	; 57
    15de:	8b 7f       	andi	r24, 0xFB	; 251
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <Timer_OVInterruptDisable+0x2e>
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER2)
    15e2:	e2 30       	cpi	r30, 0x02	; 2
    15e4:	19 f4       	brne	.+6      	; 0x15ec <Timer_OVInterruptDisable+0x30>
	{
	   //clear the TOIE bit to disable the overflow interrupt
	   CLEAR_BIT(TIMSK_R,TOIE2_B);
    15e6:	89 b7       	in	r24, 0x39	; 57
    15e8:	8f 7b       	andi	r24, 0xBF	; 191
    15ea:	89 bf       	out	0x39, r24	; 57
	}
	else
	{
	}
   return E_OK;
}
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	08 95       	ret

000015f0 <Timer_OCInterruptEnable>:
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to enable output compare interrupt
************************************************************************************/
enuErrorStatus_t Timer_OCInterruptEnable(uint8_t u8GroupId)
{
	if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER0)
    15f0:	a8 2f       	mov	r26, r24
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	fd 01       	movw	r30, r26
    15f6:	ee 0f       	add	r30, r30
    15f8:	ff 1f       	adc	r31, r31
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	eb 58       	subi	r30, 0x8B	; 139
    1600:	fe 4f       	sbci	r31, 0xFE	; 254
    1602:	e0 81       	ld	r30, Z
    1604:	ee 23       	and	r30, r30
    1606:	19 f4       	brne	.+6      	; 0x160e <Timer_OCInterruptEnable+0x1e>
	{
		//set the TOIE bit to enable output compare interrupt
	   SET_BIT(TIMSK_R,OCIE0_B);
    1608:	89 b7       	in	r24, 0x39	; 57
    160a:	82 60       	ori	r24, 0x02	; 2
    160c:	17 c0       	rjmp	.+46     	; 0x163c <Timer_OCInterruptEnable+0x4c>
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER1)
    160e:	e1 30       	cpi	r30, 0x01	; 1
    1610:	89 f4       	brne	.+34     	; 0x1634 <Timer_OCInterruptEnable+0x44>
	{
		if(astrTimerConfigParameters[u8GroupId].enuTimer1OCSelect == TIMER1_OCA)
    1612:	aa 0f       	add	r26, r26
    1614:	bb 1f       	adc	r27, r27
    1616:	aa 0f       	add	r26, r26
    1618:	bb 1f       	adc	r27, r27
    161a:	a9 58       	subi	r26, 0x89	; 137
    161c:	be 4f       	sbci	r27, 0xFE	; 254
    161e:	8c 91       	ld	r24, X
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	19 f4       	brne	.+6      	; 0x162a <Timer_OCInterruptEnable+0x3a>
		{
			//set the appropriate pin in the TIMSK register to enable output compare A interrupt
		   SET_BIT(TIMSK_R,OCIE1A_B);
    1624:	89 b7       	in	r24, 0x39	; 57
    1626:	80 61       	ori	r24, 0x10	; 16
    1628:	09 c0       	rjmp	.+18     	; 0x163c <Timer_OCInterruptEnable+0x4c>
		}
		else if(astrTimerConfigParameters[u8GroupId].enuTimer1OCSelect == TIMER1_OCB)
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	41 f4       	brne	.+16     	; 0x163e <Timer_OCInterruptEnable+0x4e>
		{
		   //set the appropriate pin in the TIMSK register to enable output compare B interrupt
		   SET_BIT(TIMSK_R,OCIE1B_B);
    162e:	89 b7       	in	r24, 0x39	; 57
    1630:	88 60       	ori	r24, 0x08	; 8
    1632:	04 c0       	rjmp	.+8      	; 0x163c <Timer_OCInterruptEnable+0x4c>
		}
	   else
	   {
	   }
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER2)
    1634:	e2 30       	cpi	r30, 0x02	; 2
    1636:	19 f4       	brne	.+6      	; 0x163e <Timer_OCInterruptEnable+0x4e>
	{
	   //set the TOIE bit to enable output compare interrupt
	   SET_BIT(TIMSK_R,OCIE2_B);
    1638:	89 b7       	in	r24, 0x39	; 57
    163a:	80 68       	ori	r24, 0x80	; 128
    163c:	89 bf       	out	0x39, r24	; 57
	}
	else
	{
	}
   return E_OK;
}
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	08 95       	ret

00001642 <Timer_OCInterruptDisable>:
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to disable output compare interrupt
************************************************************************************/
enuErrorStatus_t Timer_OCInterruptDisable(uint8_t u8GroupId)
{
	if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER0)
    1642:	a8 2f       	mov	r26, r24
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	fd 01       	movw	r30, r26
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	eb 58       	subi	r30, 0x8B	; 139
    1652:	fe 4f       	sbci	r31, 0xFE	; 254
    1654:	e0 81       	ld	r30, Z
    1656:	ee 23       	and	r30, r30
    1658:	19 f4       	brne	.+6      	; 0x1660 <Timer_OCInterruptDisable+0x1e>
	{
		//clear the TOIE bit to disable output compare interrupt
	   CLEAR_BIT(TIMSK_R,OCIE0_B);
    165a:	89 b7       	in	r24, 0x39	; 57
    165c:	8d 7f       	andi	r24, 0xFD	; 253
    165e:	17 c0       	rjmp	.+46     	; 0x168e <Timer_OCInterruptDisable+0x4c>
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER1)
    1660:	e1 30       	cpi	r30, 0x01	; 1
    1662:	89 f4       	brne	.+34     	; 0x1686 <Timer_OCInterruptDisable+0x44>
	{
		if(astrTimerConfigParameters[u8GroupId].enuTimer1OCSelect == TIMER1_OCA)
    1664:	aa 0f       	add	r26, r26
    1666:	bb 1f       	adc	r27, r27
    1668:	aa 0f       	add	r26, r26
    166a:	bb 1f       	adc	r27, r27
    166c:	a9 58       	subi	r26, 0x89	; 137
    166e:	be 4f       	sbci	r27, 0xFE	; 254
    1670:	8c 91       	ld	r24, X
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	19 f4       	brne	.+6      	; 0x167c <Timer_OCInterruptDisable+0x3a>
		{
			//Clear the appropriate pin in the TIMSK register to disable output compare A interrupt
		   CLEAR_BIT(TIMSK_R,OCIE1A_B);
    1676:	89 b7       	in	r24, 0x39	; 57
    1678:	8f 7e       	andi	r24, 0xEF	; 239
    167a:	09 c0       	rjmp	.+18     	; 0x168e <Timer_OCInterruptDisable+0x4c>
		}
		else if(astrTimerConfigParameters[u8GroupId].enuTimer1OCSelect == TIMER1_OCB)
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	41 f4       	brne	.+16     	; 0x1690 <Timer_OCInterruptDisable+0x4e>
		{
			//Clear the appropriate pin in the TIMSK register to disable output compare B interrupt
			CLEAR_BIT(TIMSK_R,OCIE1B_B);
    1680:	89 b7       	in	r24, 0x39	; 57
    1682:	87 7f       	andi	r24, 0xF7	; 247
    1684:	04 c0       	rjmp	.+8      	; 0x168e <Timer_OCInterruptDisable+0x4c>
		}
	   else
	   {
	   }
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER2)
    1686:	e2 30       	cpi	r30, 0x02	; 2
    1688:	19 f4       	brne	.+6      	; 0x1690 <Timer_OCInterruptDisable+0x4e>
	{
	   //clear the TOIE bit to disable output compare interrupt
	   CLEAR_BIT(TIMSK_R,OCIE2_B);
    168a:	89 b7       	in	r24, 0x39	; 57
    168c:	8f 77       	andi	r24, 0x7F	; 127
    168e:	89 bf       	out	0x39, r24	; 57
	}
	else
	{
	}
   return E_OK;
}
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	08 95       	ret

00001694 <Timer_Start>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to start the timer and set a callback function to be called when time runs up
************************************************************************************/
enuErrorStatus_t Timer_Start(uint8_t u8GroupId, uint64_t u64TimerValue, void(*pfCallback)(void))
{
    1694:	2f 92       	push	r2
    1696:	3f 92       	push	r3
    1698:	4f 92       	push	r4
    169a:	5f 92       	push	r5
    169c:	6f 92       	push	r6
    169e:	7f 92       	push	r7
    16a0:	8f 92       	push	r8
    16a2:	9f 92       	push	r9
    16a4:	af 92       	push	r10
    16a6:	bf 92       	push	r11
    16a8:	cf 92       	push	r12
    16aa:	df 92       	push	r13
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	60 97       	sbiw	r28, 0x10	; 16
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	98 2f       	mov	r25, r24
    16ca:	70 2e       	mov	r7, r16
    16cc:	81 2e       	mov	r8, r17
    16ce:	62 2e       	mov	r6, r18
    16d0:	53 2e       	mov	r5, r19
    16d2:	44 2e       	mov	r4, r20
    16d4:	35 2e       	mov	r3, r21
    16d6:	26 2e       	mov	r2, r22
    16d8:	97 2e       	mov	r9, r23
   enuTimerScaler_t enuTimerScaler = TIMER_STOP;
   
   if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER0)
    16da:	a8 2f       	mov	r26, r24
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	fd 01       	movw	r30, r26
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	ee 0f       	add	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	eb 58       	subi	r30, 0x8B	; 139
    16ea:	fe 4f       	sbci	r31, 0xFE	; 254
    16ec:	e0 81       	ld	r30, Z
    16ee:	ee 23       	and	r30, r30
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <Timer_Start+0x60>
    16f2:	85 c1       	rjmp	.+778    	; 0x19fe <Timer_Start+0x36a>
   {
      //check if the timer interrupts are enabled
      if (GET_BIT(TIMSK_R,TOIE0_B) || GET_BIT(TIMSK_R,OCIE0_B))
    16f4:	09 b6       	in	r0, 0x39	; 57
    16f6:	00 fc       	sbrc	r0, 0
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <Timer_Start+0x6c>
    16fa:	09 b6       	in	r0, 0x39	; 57
    16fc:	01 fe       	sbrs	r0, 1
    16fe:	08 c0       	rjmp	.+16     	; 0x1710 <Timer_Start+0x7c>
      {
         //check if the user has not sent a pointer to function to execute
         if (pfCallback == NULLPTR)
    1700:	e1 14       	cp	r14, r1
    1702:	f1 04       	cpc	r15, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <Timer_Start+0x74>
    1706:	06 c3       	rjmp	.+1548   	; 0x1d14 <Timer_Start+0x680>
            return E_ERROR;
         }
         else
         {
            //else store this pointer to function in the global pointer to function for the ISR to be able to execute
            G_fptr = pfCallback;
    1708:	f0 92 d7 01 	sts	0x01D7, r15
    170c:	e0 92 d6 01 	sts	0x01D6, r14
         }
      }

      //if the user sent a 0 time delay
      if (u64TimerValue == 0)
    1710:	87 2d       	mov	r24, r7
    1712:	88 29       	or	r24, r8
    1714:	86 29       	or	r24, r6
    1716:	85 29       	or	r24, r5
    1718:	84 29       	or	r24, r4
    171a:	83 29       	or	r24, r3
    171c:	82 29       	or	r24, r2
    171e:	89 29       	or	r24, r9
    1720:	09 f4       	brne	.+2      	; 0x1724 <Timer_Start+0x90>
    1722:	f8 c2       	rjmp	.+1520   	; 0x1d14 <Timer_Start+0x680>
         //return an error
         return E_ERROR;
      }

      //else select the appropriate timer prescaler depending on the time sent for the least number of overflows
      else if(u64TimerValue <= 256)
    1724:	99 20       	and	r9, r9
    1726:	99 f4       	brne	.+38     	; 0x174e <Timer_Start+0xba>
    1728:	22 20       	and	r2, r2
    172a:	89 f4       	brne	.+34     	; 0x174e <Timer_Start+0xba>
    172c:	33 20       	and	r3, r3
    172e:	79 f4       	brne	.+30     	; 0x174e <Timer_Start+0xba>
    1730:	44 20       	and	r4, r4
    1732:	69 f4       	brne	.+26     	; 0x174e <Timer_Start+0xba>
    1734:	55 20       	and	r5, r5
    1736:	59 f4       	brne	.+22     	; 0x174e <Timer_Start+0xba>
    1738:	66 20       	and	r6, r6
    173a:	49 f4       	brne	.+18     	; 0x174e <Timer_Start+0xba>
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	88 15       	cp	r24, r8
    1740:	30 f0       	brcs	.+12     	; 0x174e <Timer_Start+0xba>
    1742:	88 16       	cp	r8, r24
    1744:	11 f4       	brne	.+4      	; 0x174a <Timer_Start+0xb6>
    1746:	77 20       	and	r7, r7
    1748:	11 f4       	brne	.+4      	; 0x174e <Timer_Start+0xba>
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	cf c0       	rjmp	.+414    	; 0x18ec <Timer_Start+0x258>
      {
      	enuTimerScaler = TIMER_SCALER_8;
      }
      else if(u64TimerValue > 256 && u64TimerValue <= 2048)
    174e:	87 2d       	mov	r24, r7
    1750:	81 50       	subi	r24, 0x01	; 1
    1752:	21 e0       	ldi	r18, 0x01	; 1
    1754:	87 15       	cp	r24, r7
    1756:	08 f0       	brcs	.+2      	; 0x175a <Timer_Start+0xc6>
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	88 2d       	mov	r24, r8
    175c:	82 50       	subi	r24, 0x02	; 2
    175e:	31 e0       	ldi	r19, 0x01	; 1
    1760:	88 15       	cp	r24, r8
    1762:	08 f0       	brcs	.+2      	; 0x1766 <Timer_Start+0xd2>
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f2 2f       	mov	r31, r18
    1768:	f8 0f       	add	r31, r24
    176a:	21 e0       	ldi	r18, 0x01	; 1
    176c:	f8 17       	cp	r31, r24
    176e:	08 f0       	brcs	.+2      	; 0x1772 <Timer_Start+0xde>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	32 2b       	or	r19, r18
    1774:	86 2d       	mov	r24, r6
    1776:	81 50       	subi	r24, 0x01	; 1
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	86 15       	cp	r24, r6
    177c:	08 f0       	brcs	.+2      	; 0x1780 <Timer_Start+0xec>
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	e3 2f       	mov	r30, r19
    1782:	e8 0f       	add	r30, r24
    1784:	21 e0       	ldi	r18, 0x01	; 1
    1786:	e8 17       	cp	r30, r24
    1788:	08 f0       	brcs	.+2      	; 0x178c <Timer_Start+0xf8>
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	42 2b       	or	r20, r18
    178e:	85 2d       	mov	r24, r5
    1790:	81 50       	subi	r24, 0x01	; 1
    1792:	31 e0       	ldi	r19, 0x01	; 1
    1794:	85 15       	cp	r24, r5
    1796:	08 f0       	brcs	.+2      	; 0x179a <Timer_Start+0x106>
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	74 2f       	mov	r23, r20
    179c:	78 0f       	add	r23, r24
    179e:	21 e0       	ldi	r18, 0x01	; 1
    17a0:	78 17       	cp	r23, r24
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <Timer_Start+0x112>
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	32 2b       	or	r19, r18
    17a8:	84 2d       	mov	r24, r4
    17aa:	81 50       	subi	r24, 0x01	; 1
    17ac:	41 e0       	ldi	r20, 0x01	; 1
    17ae:	84 15       	cp	r24, r4
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <Timer_Start+0x120>
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	63 2f       	mov	r22, r19
    17b6:	68 0f       	add	r22, r24
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	68 17       	cp	r22, r24
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <Timer_Start+0x12c>
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	42 2b       	or	r20, r18
    17c2:	83 2d       	mov	r24, r3
    17c4:	81 50       	subi	r24, 0x01	; 1
    17c6:	31 e0       	ldi	r19, 0x01	; 1
    17c8:	83 15       	cp	r24, r3
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <Timer_Start+0x13a>
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	54 2f       	mov	r21, r20
    17d0:	58 0f       	add	r21, r24
    17d2:	21 e0       	ldi	r18, 0x01	; 1
    17d4:	58 17       	cp	r21, r24
    17d6:	08 f0       	brcs	.+2      	; 0x17da <Timer_Start+0x146>
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	32 2b       	or	r19, r18
    17dc:	82 2d       	mov	r24, r2
    17de:	81 50       	subi	r24, 0x01	; 1
    17e0:	21 e0       	ldi	r18, 0x01	; 1
    17e2:	82 15       	cp	r24, r2
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <Timer_Start+0x154>
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	43 2f       	mov	r20, r19
    17ea:	48 0f       	add	r20, r24
    17ec:	31 e0       	ldi	r19, 0x01	; 1
    17ee:	48 17       	cp	r20, r24
    17f0:	08 f0       	brcs	.+2      	; 0x17f4 <Timer_Start+0x160>
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	23 2b       	or	r18, r19
    17f6:	9a 94       	dec	r9
    17f8:	29 0d       	add	r18, r9
    17fa:	93 94       	inc	r9
    17fc:	22 23       	and	r18, r18
    17fe:	71 f4       	brne	.+28     	; 0x181c <Timer_Start+0x188>
    1800:	44 23       	and	r20, r20
    1802:	61 f4       	brne	.+24     	; 0x181c <Timer_Start+0x188>
    1804:	55 23       	and	r21, r21
    1806:	51 f4       	brne	.+20     	; 0x181c <Timer_Start+0x188>
    1808:	66 23       	and	r22, r22
    180a:	41 f4       	brne	.+16     	; 0x181c <Timer_Start+0x188>
    180c:	77 23       	and	r23, r23
    180e:	31 f4       	brne	.+12     	; 0x181c <Timer_Start+0x188>
    1810:	ee 23       	and	r30, r30
    1812:	21 f4       	brne	.+8      	; 0x181c <Timer_Start+0x188>
    1814:	f7 30       	cpi	r31, 0x07	; 7
    1816:	10 f4       	brcc	.+4      	; 0x181c <Timer_Start+0x188>
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	68 c0       	rjmp	.+208    	; 0x18ec <Timer_Start+0x258>
      {
      	enuTimerScaler = TIMER_SCALER_64;
      }
      else if(u64TimerValue > 2048 && u64TimerValue <= 8192)
    181c:	87 2d       	mov	r24, r7
    181e:	81 50       	subi	r24, 0x01	; 1
    1820:	21 e0       	ldi	r18, 0x01	; 1
    1822:	87 15       	cp	r24, r7
    1824:	08 f0       	brcs	.+2      	; 0x1828 <Timer_Start+0x194>
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	88 2d       	mov	r24, r8
    182a:	89 50       	subi	r24, 0x09	; 9
    182c:	31 e0       	ldi	r19, 0x01	; 1
    182e:	88 15       	cp	r24, r8
    1830:	08 f0       	brcs	.+2      	; 0x1834 <Timer_Start+0x1a0>
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	f2 2f       	mov	r31, r18
    1836:	f8 0f       	add	r31, r24
    1838:	21 e0       	ldi	r18, 0x01	; 1
    183a:	f8 17       	cp	r31, r24
    183c:	08 f0       	brcs	.+2      	; 0x1840 <Timer_Start+0x1ac>
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	32 2b       	or	r19, r18
    1842:	86 2d       	mov	r24, r6
    1844:	81 50       	subi	r24, 0x01	; 1
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	86 15       	cp	r24, r6
    184a:	08 f0       	brcs	.+2      	; 0x184e <Timer_Start+0x1ba>
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	e3 2f       	mov	r30, r19
    1850:	e8 0f       	add	r30, r24
    1852:	21 e0       	ldi	r18, 0x01	; 1
    1854:	e8 17       	cp	r30, r24
    1856:	08 f0       	brcs	.+2      	; 0x185a <Timer_Start+0x1c6>
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	42 2b       	or	r20, r18
    185c:	85 2d       	mov	r24, r5
    185e:	81 50       	subi	r24, 0x01	; 1
    1860:	31 e0       	ldi	r19, 0x01	; 1
    1862:	85 15       	cp	r24, r5
    1864:	08 f0       	brcs	.+2      	; 0x1868 <Timer_Start+0x1d4>
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	74 2f       	mov	r23, r20
    186a:	78 0f       	add	r23, r24
    186c:	21 e0       	ldi	r18, 0x01	; 1
    186e:	78 17       	cp	r23, r24
    1870:	08 f0       	brcs	.+2      	; 0x1874 <Timer_Start+0x1e0>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	32 2b       	or	r19, r18
    1876:	84 2d       	mov	r24, r4
    1878:	81 50       	subi	r24, 0x01	; 1
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	84 15       	cp	r24, r4
    187e:	08 f0       	brcs	.+2      	; 0x1882 <Timer_Start+0x1ee>
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	63 2f       	mov	r22, r19
    1884:	68 0f       	add	r22, r24
    1886:	21 e0       	ldi	r18, 0x01	; 1
    1888:	68 17       	cp	r22, r24
    188a:	08 f0       	brcs	.+2      	; 0x188e <Timer_Start+0x1fa>
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	42 2b       	or	r20, r18
    1890:	83 2d       	mov	r24, r3
    1892:	81 50       	subi	r24, 0x01	; 1
    1894:	31 e0       	ldi	r19, 0x01	; 1
    1896:	83 15       	cp	r24, r3
    1898:	08 f0       	brcs	.+2      	; 0x189c <Timer_Start+0x208>
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	54 2f       	mov	r21, r20
    189e:	58 0f       	add	r21, r24
    18a0:	21 e0       	ldi	r18, 0x01	; 1
    18a2:	58 17       	cp	r21, r24
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <Timer_Start+0x214>
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	32 2b       	or	r19, r18
    18aa:	82 2d       	mov	r24, r2
    18ac:	81 50       	subi	r24, 0x01	; 1
    18ae:	21 e0       	ldi	r18, 0x01	; 1
    18b0:	82 15       	cp	r24, r2
    18b2:	08 f0       	brcs	.+2      	; 0x18b6 <Timer_Start+0x222>
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	43 2f       	mov	r20, r19
    18b8:	48 0f       	add	r20, r24
    18ba:	31 e0       	ldi	r19, 0x01	; 1
    18bc:	48 17       	cp	r20, r24
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <Timer_Start+0x22e>
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	23 2b       	or	r18, r19
    18c4:	9a 94       	dec	r9
    18c6:	29 0d       	add	r18, r9
    18c8:	93 94       	inc	r9
    18ca:	22 23       	and	r18, r18
    18cc:	61 f4       	brne	.+24     	; 0x18e6 <Timer_Start+0x252>
    18ce:	44 23       	and	r20, r20
    18d0:	51 f4       	brne	.+20     	; 0x18e6 <Timer_Start+0x252>
    18d2:	55 23       	and	r21, r21
    18d4:	41 f4       	brne	.+16     	; 0x18e6 <Timer_Start+0x252>
    18d6:	66 23       	and	r22, r22
    18d8:	31 f4       	brne	.+12     	; 0x18e6 <Timer_Start+0x252>
    18da:	77 23       	and	r23, r23
    18dc:	21 f4       	brne	.+8      	; 0x18e6 <Timer_Start+0x252>
    18de:	ee 23       	and	r30, r30
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <Timer_Start+0x252>
    18e2:	f8 31       	cpi	r31, 0x18	; 24
    18e4:	10 f0       	brcs	.+4      	; 0x18ea <Timer_Start+0x256>
    18e6:	85 e0       	ldi	r24, 0x05	; 5
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <Timer_Start+0x258>
    18ea:	84 e0       	ldi	r24, 0x04	; 4
      {
      	enuTimerScaler = TIMER_SCALER_1024;
      }

      //initialize the timer in normal mode with the new prescaler
      astrTimerConfigParameters[u8GroupId].enuTimerScaler = enuTimerScaler;
    18ec:	aa 0f       	add	r26, r26
    18ee:	bb 1f       	adc	r27, r27
    18f0:	aa 0f       	add	r26, r26
    18f2:	bb 1f       	adc	r27, r27
    18f4:	ab 58       	subi	r26, 0x8B	; 139
    18f6:	be 4f       	sbci	r27, 0xFE	; 254
    18f8:	13 96       	adiw	r26, 0x03	; 3
    18fa:	8c 93       	st	X, r24
      Timer_Init(&astrTimerConfigParameters[u8GroupId]);
    18fc:	89 2f       	mov	r24, r25
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	8b 58       	subi	r24, 0x8B	; 139
    190a:	9e 4f       	sbci	r25, 0xFE	; 254
    190c:	0e 94 88 09 	call	0x1310	; 0x1310 <Timer_Init>

      //calculate tick time of the selected prescaler
      uint32_t u32TimerFreq  =F_CPU / Gu16_T0Prescaler;

      //calculate the number of overflows required to reach the selected time
      Gu32_T0MaxOVCount = ((u64TimerValue * u32TimerFreq) / (T0_TICKS * USEC_TO_SEC));
    1910:	20 91 e9 01 	lds	r18, 0x01E9
    1914:	30 91 ea 01 	lds	r19, 0x01EA
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	72 e1       	ldi	r23, 0x12	; 18
    1920:	8a e7       	ldi	r24, 0x7A	; 122
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
    1928:	59 01       	movw	r10, r18
    192a:	6a 01       	movw	r12, r20
    192c:	a6 01       	movw	r20, r12
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a7 2c       	mov	r10, r7
    1938:	b8 2c       	mov	r11, r8
    193a:	c6 2c       	mov	r12, r6
    193c:	d5 2c       	mov	r13, r5
    193e:	e4 2c       	mov	r14, r4
    1940:	f3 2c       	mov	r15, r3
    1942:	02 2d       	mov	r16, r2
    1944:	19 2d       	mov	r17, r9
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    194a:	29 83       	std	Y+1, r18	; 0x01
    194c:	3a 83       	std	Y+2, r19	; 0x02
    194e:	4b 83       	std	Y+3, r20	; 0x03
    1950:	5c 83       	std	Y+4, r21	; 0x04
    1952:	6d 83       	std	Y+5, r22	; 0x05
    1954:	7e 83       	std	Y+6, r23	; 0x06
    1956:	8f 83       	std	Y+7, r24	; 0x07
    1958:	98 87       	std	Y+8, r25	; 0x08
    195a:	aa 24       	eor	r10, r10
    195c:	00 e4       	ldi	r16, 0x40	; 64
    195e:	b0 2e       	mov	r11, r16
    1960:	12 e4       	ldi	r17, 0x42	; 66
    1962:	c1 2e       	mov	r12, r17
    1964:	bf e0       	ldi	r27, 0x0F	; 15
    1966:	db 2e       	mov	r13, r27
    1968:	ee 24       	eor	r14, r14
    196a:	ff 24       	eor	r15, r15
    196c:	00 e0       	ldi	r16, 0x00	; 0
    196e:	10 e0       	ldi	r17, 0x00	; 0
    1970:	0e 94 c3 01 	call	0x386	; 0x386 <__udivdi3>
    1974:	92 2e       	mov	r9, r18
    1976:	83 2e       	mov	r8, r19
    1978:	74 2e       	mov	r7, r20
    197a:	65 2e       	mov	r6, r21
    197c:	56 2e       	mov	r5, r22
    197e:	47 2e       	mov	r4, r23
    1980:	38 2e       	mov	r3, r24
    1982:	29 2e       	mov	r2, r25
    1984:	20 93 d8 01 	sts	0x01D8, r18
    1988:	30 93 d9 01 	sts	0x01D9, r19
    198c:	40 93 da 01 	sts	0x01DA, r20
    1990:	50 93 db 01 	sts	0x01DB, r21
    1994:	60 93 dc 01 	sts	0x01DC, r22
    1998:	70 93 dd 01 	sts	0x01DD, r23
    199c:	80 93 de 01 	sts	0x01DE, r24
    19a0:	90 93 df 01 	sts	0x01DF, r25

      //calculate the time required to setup  the last overflow iteration
      Gu32_T0LastOVTicks = ((u64TimerValue * u32TimerFreq) / USEC_TO_SEC) - (Gu32_T0MaxOVCount * T0_TICKS);
    19a4:	29 81       	ldd	r18, Y+1	; 0x01
    19a6:	3a 81       	ldd	r19, Y+2	; 0x02
    19a8:	4b 81       	ldd	r20, Y+3	; 0x03
    19aa:	5c 81       	ldd	r21, Y+4	; 0x04
    19ac:	6d 81       	ldd	r22, Y+5	; 0x05
    19ae:	7e 81       	ldd	r23, Y+6	; 0x06
    19b0:	8f 81       	ldd	r24, Y+7	; 0x07
    19b2:	98 85       	ldd	r25, Y+8	; 0x08
    19b4:	a0 e4       	ldi	r26, 0x40	; 64
    19b6:	aa 2e       	mov	r10, r26
    19b8:	f2 e4       	ldi	r31, 0x42	; 66
    19ba:	bf 2e       	mov	r11, r31
    19bc:	ef e0       	ldi	r30, 0x0F	; 15
    19be:	ce 2e       	mov	r12, r30
    19c0:	dd 24       	eor	r13, r13
    19c2:	0e 94 c3 01 	call	0x386	; 0x386 <__udivdi3>
    19c6:	12 2f       	mov	r17, r18
    19c8:	29 2d       	mov	r18, r9
    19ca:	38 2d       	mov	r19, r8
    19cc:	47 2d       	mov	r20, r7
    19ce:	56 2d       	mov	r21, r6
    19d0:	65 2d       	mov	r22, r5
    19d2:	74 2d       	mov	r23, r4
    19d4:	83 2d       	mov	r24, r3
    19d6:	92 2d       	mov	r25, r2
    19d8:	08 e0       	ldi	r16, 0x08	; 8
    19da:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    19de:	12 1b       	sub	r17, r18
    19e0:	10 93 e8 01 	sts	0x01E8, r17


      //if the time can be achieved without overflows
      if (Gu32_T0MaxOVCount == 0)
    19e4:	98 28       	or	r9, r8
    19e6:	97 28       	or	r9, r7
    19e8:	96 28       	or	r9, r6
    19ea:	95 28       	or	r9, r5
    19ec:	94 28       	or	r9, r4
    19ee:	93 28       	or	r9, r3
    19f0:	92 28       	or	r9, r2
    19f2:	19 f4       	brne	.+6      	; 0x19fa <Timer_Start+0x366>
      {
         //set the timer value to overflow on the exact timing
         TCNT0_R = (T0_TICKS - Gu32_T0LastOVTicks);
    19f4:	11 95       	neg	r17
    19f6:	12 bf       	out	0x32, r17	; 50
    19f8:	8f c1       	rjmp	.+798    	; 0x1d18 <Timer_Start+0x684>
      }
      else
      {
         //else, set the overflow to 0
         TCNT0_R = 0;
    19fa:	12 be       	out	0x32, r1	; 50
    19fc:	8d c1       	rjmp	.+794    	; 0x1d18 <Timer_Start+0x684>
      }
   }
   else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER1)
    19fe:	e1 30       	cpi	r30, 0x01	; 1
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <Timer_Start+0x370>
    1a02:	8a c1       	rjmp	.+788    	; 0x1d18 <Timer_Start+0x684>
   {

   }
   else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER2)
    1a04:	e2 30       	cpi	r30, 0x02	; 2
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <Timer_Start+0x376>
    1a08:	87 c1       	rjmp	.+782    	; 0x1d18 <Timer_Start+0x684>
   {
      //check if the timer interrupts are enabled
      if (GET_BIT(TIMSK_R,TOIE2_B) || GET_BIT(TIMSK_R,OCIE2_B))
    1a0a:	09 b6       	in	r0, 0x39	; 57
    1a0c:	06 fc       	sbrc	r0, 6
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <Timer_Start+0x382>
    1a10:	09 b6       	in	r0, 0x39	; 57
    1a12:	07 fe       	sbrs	r0, 7
    1a14:	08 c0       	rjmp	.+16     	; 0x1a26 <Timer_Start+0x392>
      {
         //check if the user has not sent a pointer to function to execute
         if (pfCallback == NULLPTR)
    1a16:	e1 14       	cp	r14, r1
    1a18:	f1 04       	cpc	r15, r1
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <Timer_Start+0x38a>
    1a1c:	7b c1       	rjmp	.+758    	; 0x1d14 <Timer_Start+0x680>
            return E_ERROR;
         }
         else
         {
            //else store this pointer to function in the global pointer to function for the ISR to be able to execute
            G_fptr2 = pfCallback;
    1a1e:	f0 92 ec 01 	sts	0x01EC, r15
    1a22:	e0 92 eb 01 	sts	0x01EB, r14
         }
      }

		//if the user sent a 0 time delay
		if (u64TimerValue == 0)
    1a26:	87 2d       	mov	r24, r7
    1a28:	88 29       	or	r24, r8
    1a2a:	86 29       	or	r24, r6
    1a2c:	85 29       	or	r24, r5
    1a2e:	84 29       	or	r24, r4
    1a30:	83 29       	or	r24, r3
    1a32:	82 29       	or	r24, r2
    1a34:	89 29       	or	r24, r9
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <Timer_Start+0x3a6>
    1a38:	6d c1       	rjmp	.+730    	; 0x1d14 <Timer_Start+0x680>
			//return an error
			return E_ERROR;
		}

		//else select the appropriate timer prescaler depending on the time sent for the least number of overflows
		else if (u64TimerValue <= 256)
    1a3a:	99 20       	and	r9, r9
    1a3c:	99 f4       	brne	.+38     	; 0x1a64 <Timer_Start+0x3d0>
    1a3e:	22 20       	and	r2, r2
    1a40:	89 f4       	brne	.+34     	; 0x1a64 <Timer_Start+0x3d0>
    1a42:	33 20       	and	r3, r3
    1a44:	79 f4       	brne	.+30     	; 0x1a64 <Timer_Start+0x3d0>
    1a46:	44 20       	and	r4, r4
    1a48:	69 f4       	brne	.+26     	; 0x1a64 <Timer_Start+0x3d0>
    1a4a:	55 20       	and	r5, r5
    1a4c:	59 f4       	brne	.+22     	; 0x1a64 <Timer_Start+0x3d0>
    1a4e:	66 20       	and	r6, r6
    1a50:	49 f4       	brne	.+18     	; 0x1a64 <Timer_Start+0x3d0>
    1a52:	e1 e0       	ldi	r30, 0x01	; 1
    1a54:	e8 15       	cp	r30, r8
    1a56:	30 f0       	brcs	.+12     	; 0x1a64 <Timer_Start+0x3d0>
    1a58:	8e 16       	cp	r8, r30
    1a5a:	11 f4       	brne	.+4      	; 0x1a60 <Timer_Start+0x3cc>
    1a5c:	77 20       	and	r7, r7
    1a5e:	11 f4       	brne	.+4      	; 0x1a64 <Timer_Start+0x3d0>
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	cf c0       	rjmp	.+414    	; 0x1c02 <Timer_Start+0x56e>
		{
			enuTimerScaler = TIMER_SCALER_8;
		}
		else if (u64TimerValue>256 && u64TimerValue<=2048)
    1a64:	87 2d       	mov	r24, r7
    1a66:	81 50       	subi	r24, 0x01	; 1
    1a68:	21 e0       	ldi	r18, 0x01	; 1
    1a6a:	87 15       	cp	r24, r7
    1a6c:	08 f0       	brcs	.+2      	; 0x1a70 <Timer_Start+0x3dc>
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	88 2d       	mov	r24, r8
    1a72:	82 50       	subi	r24, 0x02	; 2
    1a74:	31 e0       	ldi	r19, 0x01	; 1
    1a76:	88 15       	cp	r24, r8
    1a78:	08 f0       	brcs	.+2      	; 0x1a7c <Timer_Start+0x3e8>
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	f2 2f       	mov	r31, r18
    1a7e:	f8 0f       	add	r31, r24
    1a80:	21 e0       	ldi	r18, 0x01	; 1
    1a82:	f8 17       	cp	r31, r24
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <Timer_Start+0x3f4>
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	32 2b       	or	r19, r18
    1a8a:	86 2d       	mov	r24, r6
    1a8c:	81 50       	subi	r24, 0x01	; 1
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	86 15       	cp	r24, r6
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <Timer_Start+0x402>
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	e3 2f       	mov	r30, r19
    1a98:	e8 0f       	add	r30, r24
    1a9a:	21 e0       	ldi	r18, 0x01	; 1
    1a9c:	e8 17       	cp	r30, r24
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <Timer_Start+0x40e>
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	42 2b       	or	r20, r18
    1aa4:	85 2d       	mov	r24, r5
    1aa6:	81 50       	subi	r24, 0x01	; 1
    1aa8:	31 e0       	ldi	r19, 0x01	; 1
    1aaa:	85 15       	cp	r24, r5
    1aac:	08 f0       	brcs	.+2      	; 0x1ab0 <Timer_Start+0x41c>
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	74 2f       	mov	r23, r20
    1ab2:	78 0f       	add	r23, r24
    1ab4:	21 e0       	ldi	r18, 0x01	; 1
    1ab6:	78 17       	cp	r23, r24
    1ab8:	08 f0       	brcs	.+2      	; 0x1abc <Timer_Start+0x428>
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	32 2b       	or	r19, r18
    1abe:	84 2d       	mov	r24, r4
    1ac0:	81 50       	subi	r24, 0x01	; 1
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	84 15       	cp	r24, r4
    1ac6:	08 f0       	brcs	.+2      	; 0x1aca <Timer_Start+0x436>
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	63 2f       	mov	r22, r19
    1acc:	68 0f       	add	r22, r24
    1ace:	21 e0       	ldi	r18, 0x01	; 1
    1ad0:	68 17       	cp	r22, r24
    1ad2:	08 f0       	brcs	.+2      	; 0x1ad6 <Timer_Start+0x442>
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	42 2b       	or	r20, r18
    1ad8:	83 2d       	mov	r24, r3
    1ada:	81 50       	subi	r24, 0x01	; 1
    1adc:	31 e0       	ldi	r19, 0x01	; 1
    1ade:	83 15       	cp	r24, r3
    1ae0:	08 f0       	brcs	.+2      	; 0x1ae4 <Timer_Start+0x450>
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	54 2f       	mov	r21, r20
    1ae6:	58 0f       	add	r21, r24
    1ae8:	21 e0       	ldi	r18, 0x01	; 1
    1aea:	58 17       	cp	r21, r24
    1aec:	08 f0       	brcs	.+2      	; 0x1af0 <Timer_Start+0x45c>
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	32 2b       	or	r19, r18
    1af2:	82 2d       	mov	r24, r2
    1af4:	81 50       	subi	r24, 0x01	; 1
    1af6:	21 e0       	ldi	r18, 0x01	; 1
    1af8:	82 15       	cp	r24, r2
    1afa:	08 f0       	brcs	.+2      	; 0x1afe <Timer_Start+0x46a>
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	43 2f       	mov	r20, r19
    1b00:	48 0f       	add	r20, r24
    1b02:	31 e0       	ldi	r19, 0x01	; 1
    1b04:	48 17       	cp	r20, r24
    1b06:	08 f0       	brcs	.+2      	; 0x1b0a <Timer_Start+0x476>
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	23 2b       	or	r18, r19
    1b0c:	9a 94       	dec	r9
    1b0e:	29 0d       	add	r18, r9
    1b10:	93 94       	inc	r9
    1b12:	22 23       	and	r18, r18
    1b14:	71 f4       	brne	.+28     	; 0x1b32 <Timer_Start+0x49e>
    1b16:	44 23       	and	r20, r20
    1b18:	61 f4       	brne	.+24     	; 0x1b32 <Timer_Start+0x49e>
    1b1a:	55 23       	and	r21, r21
    1b1c:	51 f4       	brne	.+20     	; 0x1b32 <Timer_Start+0x49e>
    1b1e:	66 23       	and	r22, r22
    1b20:	41 f4       	brne	.+16     	; 0x1b32 <Timer_Start+0x49e>
    1b22:	77 23       	and	r23, r23
    1b24:	31 f4       	brne	.+12     	; 0x1b32 <Timer_Start+0x49e>
    1b26:	ee 23       	and	r30, r30
    1b28:	21 f4       	brne	.+8      	; 0x1b32 <Timer_Start+0x49e>
    1b2a:	f7 30       	cpi	r31, 0x07	; 7
    1b2c:	10 f4       	brcc	.+4      	; 0x1b32 <Timer_Start+0x49e>
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	68 c0       	rjmp	.+208    	; 0x1c02 <Timer_Start+0x56e>
		{
			enuTimerScaler = TIMER_SCALER_64;
		}
		else if (u64TimerValue>2048 && u64TimerValue<=8192)
    1b32:	87 2d       	mov	r24, r7
    1b34:	81 50       	subi	r24, 0x01	; 1
    1b36:	21 e0       	ldi	r18, 0x01	; 1
    1b38:	87 15       	cp	r24, r7
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <Timer_Start+0x4aa>
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	88 2d       	mov	r24, r8
    1b40:	89 50       	subi	r24, 0x09	; 9
    1b42:	31 e0       	ldi	r19, 0x01	; 1
    1b44:	88 15       	cp	r24, r8
    1b46:	08 f0       	brcs	.+2      	; 0x1b4a <Timer_Start+0x4b6>
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	f2 2f       	mov	r31, r18
    1b4c:	f8 0f       	add	r31, r24
    1b4e:	21 e0       	ldi	r18, 0x01	; 1
    1b50:	f8 17       	cp	r31, r24
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <Timer_Start+0x4c2>
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	32 2b       	or	r19, r18
    1b58:	86 2d       	mov	r24, r6
    1b5a:	81 50       	subi	r24, 0x01	; 1
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	86 15       	cp	r24, r6
    1b60:	08 f0       	brcs	.+2      	; 0x1b64 <Timer_Start+0x4d0>
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	e3 2f       	mov	r30, r19
    1b66:	e8 0f       	add	r30, r24
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	e8 17       	cp	r30, r24
    1b6c:	08 f0       	brcs	.+2      	; 0x1b70 <Timer_Start+0x4dc>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	42 2b       	or	r20, r18
    1b72:	85 2d       	mov	r24, r5
    1b74:	81 50       	subi	r24, 0x01	; 1
    1b76:	31 e0       	ldi	r19, 0x01	; 1
    1b78:	85 15       	cp	r24, r5
    1b7a:	08 f0       	brcs	.+2      	; 0x1b7e <Timer_Start+0x4ea>
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	74 2f       	mov	r23, r20
    1b80:	78 0f       	add	r23, r24
    1b82:	21 e0       	ldi	r18, 0x01	; 1
    1b84:	78 17       	cp	r23, r24
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <Timer_Start+0x4f6>
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	32 2b       	or	r19, r18
    1b8c:	84 2d       	mov	r24, r4
    1b8e:	81 50       	subi	r24, 0x01	; 1
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	84 15       	cp	r24, r4
    1b94:	08 f0       	brcs	.+2      	; 0x1b98 <Timer_Start+0x504>
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	63 2f       	mov	r22, r19
    1b9a:	68 0f       	add	r22, r24
    1b9c:	21 e0       	ldi	r18, 0x01	; 1
    1b9e:	68 17       	cp	r22, r24
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <Timer_Start+0x510>
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	42 2b       	or	r20, r18
    1ba6:	83 2d       	mov	r24, r3
    1ba8:	81 50       	subi	r24, 0x01	; 1
    1baa:	31 e0       	ldi	r19, 0x01	; 1
    1bac:	83 15       	cp	r24, r3
    1bae:	08 f0       	brcs	.+2      	; 0x1bb2 <Timer_Start+0x51e>
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	54 2f       	mov	r21, r20
    1bb4:	58 0f       	add	r21, r24
    1bb6:	21 e0       	ldi	r18, 0x01	; 1
    1bb8:	58 17       	cp	r21, r24
    1bba:	08 f0       	brcs	.+2      	; 0x1bbe <Timer_Start+0x52a>
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	32 2b       	or	r19, r18
    1bc0:	82 2d       	mov	r24, r2
    1bc2:	81 50       	subi	r24, 0x01	; 1
    1bc4:	21 e0       	ldi	r18, 0x01	; 1
    1bc6:	82 15       	cp	r24, r2
    1bc8:	08 f0       	brcs	.+2      	; 0x1bcc <Timer_Start+0x538>
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	43 2f       	mov	r20, r19
    1bce:	48 0f       	add	r20, r24
    1bd0:	31 e0       	ldi	r19, 0x01	; 1
    1bd2:	48 17       	cp	r20, r24
    1bd4:	08 f0       	brcs	.+2      	; 0x1bd8 <Timer_Start+0x544>
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	23 2b       	or	r18, r19
    1bda:	9a 94       	dec	r9
    1bdc:	29 0d       	add	r18, r9
    1bde:	93 94       	inc	r9
    1be0:	22 23       	and	r18, r18
    1be2:	61 f4       	brne	.+24     	; 0x1bfc <Timer_Start+0x568>
    1be4:	44 23       	and	r20, r20
    1be6:	51 f4       	brne	.+20     	; 0x1bfc <Timer_Start+0x568>
    1be8:	55 23       	and	r21, r21
    1bea:	41 f4       	brne	.+16     	; 0x1bfc <Timer_Start+0x568>
    1bec:	66 23       	and	r22, r22
    1bee:	31 f4       	brne	.+12     	; 0x1bfc <Timer_Start+0x568>
    1bf0:	77 23       	and	r23, r23
    1bf2:	21 f4       	brne	.+8      	; 0x1bfc <Timer_Start+0x568>
    1bf4:	ee 23       	and	r30, r30
    1bf6:	11 f4       	brne	.+4      	; 0x1bfc <Timer_Start+0x568>
    1bf8:	f8 31       	cpi	r31, 0x18	; 24
    1bfa:	10 f0       	brcs	.+4      	; 0x1c00 <Timer_Start+0x56c>
    1bfc:	85 e0       	ldi	r24, 0x05	; 5
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <Timer_Start+0x56e>
    1c00:	84 e0       	ldi	r24, 0x04	; 4
		{
			enuTimerScaler = TIMER_SCALER_1024;
		}

      //initialize the timer in normal mode with the new prescaler
      astrTimerConfigParameters[u8GroupId].enuTimerScaler = enuTimerScaler;
    1c02:	aa 0f       	add	r26, r26
    1c04:	bb 1f       	adc	r27, r27
    1c06:	aa 0f       	add	r26, r26
    1c08:	bb 1f       	adc	r27, r27
    1c0a:	ab 58       	subi	r26, 0x8B	; 139
    1c0c:	be 4f       	sbci	r27, 0xFE	; 254
    1c0e:	13 96       	adiw	r26, 0x03	; 3
    1c10:	8c 93       	st	X, r24
      Timer_Init(&astrTimerConfigParameters[u8GroupId]);
    1c12:	89 2f       	mov	r24, r25
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	8b 58       	subi	r24, 0x8B	; 139
    1c20:	9e 4f       	sbci	r25, 0xFE	; 254
    1c22:	0e 94 88 09 	call	0x1310	; 0x1310 <Timer_Init>

      //calculate tick time of the selected prescaler
      uint32_t u32TimerFreq = F_CPU / Gu16_T2Prescaler;

      //calculate the number of overflows required to reach the selected time
      Gu32_T2MaxOVCount = ((u64TimerValue * u32TimerFreq) / (T2_TICKS * USEC_TO_SEC));
    1c26:	20 91 fe 01 	lds	r18, 0x01FE
    1c2a:	30 91 ff 01 	lds	r19, 0x01FF
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	72 e1       	ldi	r23, 0x12	; 18
    1c36:	8a e7       	ldi	r24, 0x7A	; 122
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
    1c3e:	59 01       	movw	r10, r18
    1c40:	6a 01       	movw	r12, r20
    1c42:	a6 01       	movw	r20, r12
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a7 2c       	mov	r10, r7
    1c4e:	b8 2c       	mov	r11, r8
    1c50:	c6 2c       	mov	r12, r6
    1c52:	d5 2c       	mov	r13, r5
    1c54:	e4 2c       	mov	r14, r4
    1c56:	f3 2c       	mov	r15, r3
    1c58:	02 2d       	mov	r16, r2
    1c5a:	19 2d       	mov	r17, r9
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    1c60:	29 87       	std	Y+9, r18	; 0x09
    1c62:	3a 87       	std	Y+10, r19	; 0x0a
    1c64:	4b 87       	std	Y+11, r20	; 0x0b
    1c66:	5c 87       	std	Y+12, r21	; 0x0c
    1c68:	6d 87       	std	Y+13, r22	; 0x0d
    1c6a:	7e 87       	std	Y+14, r23	; 0x0e
    1c6c:	8f 87       	std	Y+15, r24	; 0x0f
    1c6e:	98 8b       	std	Y+16, r25	; 0x10
    1c70:	aa 24       	eor	r10, r10
    1c72:	00 e4       	ldi	r16, 0x40	; 64
    1c74:	b0 2e       	mov	r11, r16
    1c76:	12 e4       	ldi	r17, 0x42	; 66
    1c78:	c1 2e       	mov	r12, r17
    1c7a:	bf e0       	ldi	r27, 0x0F	; 15
    1c7c:	db 2e       	mov	r13, r27
    1c7e:	ee 24       	eor	r14, r14
    1c80:	ff 24       	eor	r15, r15
    1c82:	00 e0       	ldi	r16, 0x00	; 0
    1c84:	10 e0       	ldi	r17, 0x00	; 0
    1c86:	0e 94 c3 01 	call	0x386	; 0x386 <__udivdi3>
    1c8a:	92 2e       	mov	r9, r18
    1c8c:	83 2e       	mov	r8, r19
    1c8e:	74 2e       	mov	r7, r20
    1c90:	65 2e       	mov	r6, r21
    1c92:	56 2e       	mov	r5, r22
    1c94:	47 2e       	mov	r4, r23
    1c96:	38 2e       	mov	r3, r24
    1c98:	29 2e       	mov	r2, r25
    1c9a:	20 93 ed 01 	sts	0x01ED, r18
    1c9e:	30 93 ee 01 	sts	0x01EE, r19
    1ca2:	40 93 ef 01 	sts	0x01EF, r20
    1ca6:	50 93 f0 01 	sts	0x01F0, r21
    1caa:	60 93 f1 01 	sts	0x01F1, r22
    1cae:	70 93 f2 01 	sts	0x01F2, r23
    1cb2:	80 93 f3 01 	sts	0x01F3, r24
    1cb6:	90 93 f4 01 	sts	0x01F4, r25

      //calculate the time required to setup  the last overflow iteration
      Gu32_T2LastOVTicks = ((u64TimerValue * u32TimerFreq) / USEC_TO_SEC) - (Gu32_T2MaxOVCount * T2_TICKS);
    1cba:	29 85       	ldd	r18, Y+9	; 0x09
    1cbc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cbe:	4b 85       	ldd	r20, Y+11	; 0x0b
    1cc0:	5c 85       	ldd	r21, Y+12	; 0x0c
    1cc2:	6d 85       	ldd	r22, Y+13	; 0x0d
    1cc4:	7e 85       	ldd	r23, Y+14	; 0x0e
    1cc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc8:	98 89       	ldd	r25, Y+16	; 0x10
    1cca:	a0 e4       	ldi	r26, 0x40	; 64
    1ccc:	aa 2e       	mov	r10, r26
    1cce:	f2 e4       	ldi	r31, 0x42	; 66
    1cd0:	bf 2e       	mov	r11, r31
    1cd2:	ef e0       	ldi	r30, 0x0F	; 15
    1cd4:	ce 2e       	mov	r12, r30
    1cd6:	dd 24       	eor	r13, r13
    1cd8:	0e 94 c3 01 	call	0x386	; 0x386 <__udivdi3>
    1cdc:	12 2f       	mov	r17, r18
    1cde:	29 2d       	mov	r18, r9
    1ce0:	38 2d       	mov	r19, r8
    1ce2:	47 2d       	mov	r20, r7
    1ce4:	56 2d       	mov	r21, r6
    1ce6:	65 2d       	mov	r22, r5
    1ce8:	74 2d       	mov	r23, r4
    1cea:	83 2d       	mov	r24, r3
    1cec:	92 2d       	mov	r25, r2
    1cee:	08 e0       	ldi	r16, 0x08	; 8
    1cf0:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    1cf4:	12 1b       	sub	r17, r18
    1cf6:	10 93 fd 01 	sts	0x01FD, r17


      //if the time can be achieved without overflows
      if (Gu32_T2MaxOVCount == 0)
    1cfa:	98 28       	or	r9, r8
    1cfc:	97 28       	or	r9, r7
    1cfe:	96 28       	or	r9, r6
    1d00:	95 28       	or	r9, r5
    1d02:	94 28       	or	r9, r4
    1d04:	93 28       	or	r9, r3
    1d06:	92 28       	or	r9, r2
    1d08:	19 f4       	brne	.+6      	; 0x1d10 <Timer_Start+0x67c>
      {
         //set the timer value to overflow on the exact timing
         TCNT2_R = (T2_TICKS - Gu32_T2LastOVTicks);
    1d0a:	11 95       	neg	r17
    1d0c:	14 bd       	out	0x24, r17	; 36
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <Timer_Start+0x684>
      }
      else
      {
         //else, set the overflow to 0
         TCNT2_R=0;
    1d10:	14 bc       	out	0x24, r1	; 36
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <Timer_Start+0x684>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <Timer_Start+0x686>
    1d18:	81 e0       	ldi	r24, 0x01	; 1
   else
   {
   }
   //return E_OK state
   return E_OK;
}
    1d1a:	60 96       	adiw	r28, 0x10	; 16
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	ff 90       	pop	r15
    1d30:	ef 90       	pop	r14
    1d32:	df 90       	pop	r13
    1d34:	cf 90       	pop	r12
    1d36:	bf 90       	pop	r11
    1d38:	af 90       	pop	r10
    1d3a:	9f 90       	pop	r9
    1d3c:	8f 90       	pop	r8
    1d3e:	7f 90       	pop	r7
    1d40:	6f 90       	pop	r6
    1d42:	5f 90       	pop	r5
    1d44:	4f 90       	pop	r4
    1d46:	3f 90       	pop	r3
    1d48:	2f 90       	pop	r2
    1d4a:	08 95       	ret

00001d4c <Timer_Stop>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to stop the timer if running
************************************************************************************/
enuErrorStatus_t Timer_Stop(uint8_t u8GroupId)
{
    1d4c:	1f 93       	push	r17
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	18 2f       	mov	r17, r24
	//turn off all timer interrupts
	Timer_OVInterruptDisable(u8GroupId);
    1d54:	0e 94 de 0a 	call	0x15bc	; 0x15bc <Timer_OVInterruptDisable>
	Timer_OCInterruptDisable(u8GroupId);
    1d58:	81 2f       	mov	r24, r17
    1d5a:	0e 94 21 0b 	call	0x1642	; 0x1642 <Timer_OCInterruptDisable>
	//initialize the timer with no clock to stop it
   astrTimerConfigParameters[u8GroupId].enuTimerScaler = TIMER_STOP;
    1d5e:	c1 2f       	mov	r28, r17
    1d60:	d0 e0       	ldi	r29, 0x00	; 0
    1d62:	cc 0f       	add	r28, r28
    1d64:	dd 1f       	adc	r29, r29
    1d66:	cc 0f       	add	r28, r28
    1d68:	dd 1f       	adc	r29, r29
    1d6a:	cb 58       	subi	r28, 0x8B	; 139
    1d6c:	de 4f       	sbci	r29, 0xFE	; 254
    1d6e:	1b 82       	std	Y+3, r1	; 0x03
   Timer_Init(&astrTimerConfigParameters[u8GroupId]);
    1d70:	ce 01       	movw	r24, r28
    1d72:	0e 94 88 09 	call	0x1310	; 0x1310 <Timer_Init>
	if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER0)
    1d76:	88 81       	ld	r24, Y
    1d78:	88 23       	and	r24, r24
    1d7a:	31 f5       	brne	.+76     	; 0x1dc8 <Timer_Stop+0x7c>
	{
		//clear the timer overflow flag
		SET_BIT(TIFR_R,TOV0_B);
    1d7c:	88 b7       	in	r24, 0x38	; 56
    1d7e:	81 60       	ori	r24, 0x01	; 1
    1d80:	88 bf       	out	0x38, r24	; 56

		//reset all global variables
		Gu32_T0MaxOVCount=0;
    1d82:	10 92 d8 01 	sts	0x01D8, r1
    1d86:	10 92 d9 01 	sts	0x01D9, r1
    1d8a:	10 92 da 01 	sts	0x01DA, r1
    1d8e:	10 92 db 01 	sts	0x01DB, r1
    1d92:	10 92 dc 01 	sts	0x01DC, r1
    1d96:	10 92 dd 01 	sts	0x01DD, r1
    1d9a:	10 92 de 01 	sts	0x01DE, r1
    1d9e:	10 92 df 01 	sts	0x01DF, r1
		Gu32_T0LastOVTicks=0;
    1da2:	10 92 e8 01 	sts	0x01E8, r1
		Gu32_T0CurrentOVCount=0;
    1da6:	10 92 e0 01 	sts	0x01E0, r1
    1daa:	10 92 e1 01 	sts	0x01E1, r1
    1dae:	10 92 e2 01 	sts	0x01E2, r1
    1db2:	10 92 e3 01 	sts	0x01E3, r1
    1db6:	10 92 e4 01 	sts	0x01E4, r1
    1dba:	10 92 e5 01 	sts	0x01E5, r1
    1dbe:	10 92 e6 01 	sts	0x01E6, r1
    1dc2:	10 92 e7 01 	sts	0x01E7, r1
    1dc6:	29 c0       	rjmp	.+82     	; 0x1e1a <Timer_Stop+0xce>
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER1)
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	39 f1       	breq	.+78     	; 0x1e1a <Timer_Stop+0xce>
	{

	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER2)
    1dcc:	82 30       	cpi	r24, 0x02	; 2
    1dce:	29 f5       	brne	.+74     	; 0x1e1a <Timer_Stop+0xce>
	{
	   //clear the timer overflow flag
	   SET_BIT(TIFR_R,TOV2_B);
    1dd0:	88 b7       	in	r24, 0x38	; 56
    1dd2:	80 64       	ori	r24, 0x40	; 64
    1dd4:	88 bf       	out	0x38, r24	; 56

	   //reset all global variables
	   Gu32_T2MaxOVCount=0;
    1dd6:	10 92 ed 01 	sts	0x01ED, r1
    1dda:	10 92 ee 01 	sts	0x01EE, r1
    1dde:	10 92 ef 01 	sts	0x01EF, r1
    1de2:	10 92 f0 01 	sts	0x01F0, r1
    1de6:	10 92 f1 01 	sts	0x01F1, r1
    1dea:	10 92 f2 01 	sts	0x01F2, r1
    1dee:	10 92 f3 01 	sts	0x01F3, r1
    1df2:	10 92 f4 01 	sts	0x01F4, r1
	   Gu32_T2LastOVTicks=0;
    1df6:	10 92 fd 01 	sts	0x01FD, r1
	   Gu32_T2CurrentOVCount=0;
    1dfa:	10 92 f5 01 	sts	0x01F5, r1
    1dfe:	10 92 f6 01 	sts	0x01F6, r1
    1e02:	10 92 f7 01 	sts	0x01F7, r1
    1e06:	10 92 f8 01 	sts	0x01F8, r1
    1e0a:	10 92 f9 01 	sts	0x01F9, r1
    1e0e:	10 92 fa 01 	sts	0x01FA, r1
    1e12:	10 92 fb 01 	sts	0x01FB, r1
    1e16:	10 92 fc 01 	sts	0x01FC, r1
	else
	{
	}
   //return E_OK state
   return E_OK;
}
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	08 95       	ret

00001e24 <Timer_GetStatus>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=time's up or 0=timer is still running
* Description: A function to check if a previously set up timer is still running or not
************************************************************************************/
enuErrorStatus_t Timer_GetStatus(uint8_t u8GroupId)
{
    1e24:	df 92       	push	r13
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	d8 2e       	mov	r13, r24
	if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER0)
    1e30:	e8 2f       	mov	r30, r24
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	ee 0f       	add	r30, r30
    1e36:	ff 1f       	adc	r31, r31
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	eb 58       	subi	r30, 0x8B	; 139
    1e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e40:	e0 81       	ld	r30, Z
    1e42:	ee 23       	and	r30, r30
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <Timer_GetStatus+0x24>
    1e46:	a2 c0       	rjmp	.+324    	; 0x1f8c <Timer_GetStatus+0x168>
	{
		//if the current overflow value is less than the total overflows value
      if (Gu32_T0CurrentOVCount < Gu32_T0MaxOVCount)
    1e48:	b0 91 e0 01 	lds	r27, 0x01E0
    1e4c:	90 91 e1 01 	lds	r25, 0x01E1
    1e50:	20 91 e2 01 	lds	r18, 0x01E2
    1e54:	30 91 e3 01 	lds	r19, 0x01E3
    1e58:	40 91 e4 01 	lds	r20, 0x01E4
    1e5c:	60 91 e5 01 	lds	r22, 0x01E5
    1e60:	a0 91 e6 01 	lds	r26, 0x01E6
    1e64:	f0 90 e7 01 	lds	r15, 0x01E7
    1e68:	e0 90 d8 01 	lds	r14, 0x01D8
    1e6c:	80 91 d9 01 	lds	r24, 0x01D9
    1e70:	50 91 da 01 	lds	r21, 0x01DA
    1e74:	70 91 db 01 	lds	r23, 0x01DB
    1e78:	e0 91 dc 01 	lds	r30, 0x01DC
    1e7c:	f0 91 dd 01 	lds	r31, 0x01DD
    1e80:	10 91 de 01 	lds	r17, 0x01DE
    1e84:	00 91 df 01 	lds	r16, 0x01DF
    1e88:	f0 16       	cp	r15, r16
    1e8a:	e0 f0       	brcs	.+56     	; 0x1ec4 <Timer_GetStatus+0xa0>
    1e8c:	0f 15       	cp	r16, r15
    1e8e:	f1 f4       	brne	.+60     	; 0x1ecc <Timer_GetStatus+0xa8>
    1e90:	a1 17       	cp	r26, r17
    1e92:	c0 f0       	brcs	.+48     	; 0x1ec4 <Timer_GetStatus+0xa0>
    1e94:	1a 17       	cp	r17, r26
    1e96:	d1 f4       	brne	.+52     	; 0x1ecc <Timer_GetStatus+0xa8>
    1e98:	6f 17       	cp	r22, r31
    1e9a:	a0 f0       	brcs	.+40     	; 0x1ec4 <Timer_GetStatus+0xa0>
    1e9c:	f6 17       	cp	r31, r22
    1e9e:	b1 f4       	brne	.+44     	; 0x1ecc <Timer_GetStatus+0xa8>
    1ea0:	4e 17       	cp	r20, r30
    1ea2:	80 f0       	brcs	.+32     	; 0x1ec4 <Timer_GetStatus+0xa0>
    1ea4:	e4 17       	cp	r30, r20
    1ea6:	91 f4       	brne	.+36     	; 0x1ecc <Timer_GetStatus+0xa8>
    1ea8:	37 17       	cp	r19, r23
    1eaa:	60 f0       	brcs	.+24     	; 0x1ec4 <Timer_GetStatus+0xa0>
    1eac:	73 17       	cp	r23, r19
    1eae:	71 f4       	brne	.+28     	; 0x1ecc <Timer_GetStatus+0xa8>
    1eb0:	25 17       	cp	r18, r21
    1eb2:	40 f0       	brcs	.+16     	; 0x1ec4 <Timer_GetStatus+0xa0>
    1eb4:	52 17       	cp	r21, r18
    1eb6:	51 f4       	brne	.+20     	; 0x1ecc <Timer_GetStatus+0xa8>
    1eb8:	98 17       	cp	r25, r24
    1eba:	20 f0       	brcs	.+8      	; 0x1ec4 <Timer_GetStatus+0xa0>
    1ebc:	89 17       	cp	r24, r25
    1ebe:	31 f4       	brne	.+12     	; 0x1ecc <Timer_GetStatus+0xa8>
    1ec0:	be 15       	cp	r27, r14
    1ec2:	20 f4       	brcc	.+8      	; 0x1ecc <Timer_GetStatus+0xa8>
      {
         //check the over flow flag
         if (GET_BIT(TIFR_R,TOV0_B))
    1ec4:	08 b6       	in	r0, 0x38	; 56
    1ec6:	00 fe       	sbrs	r0, 0
    1ec8:	0f c1       	rjmp	.+542    	; 0x20e8 <Timer_GetStatus+0x2c4>
    1eca:	1c c0       	rjmp	.+56     	; 0x1f04 <Timer_GetStatus+0xe0>
         else
         {
         }
      }
      //if the current overflow value equals the calculated total overflows value
      else if (Gu32_T0CurrentOVCount == Gu32_T0MaxOVCount)
    1ecc:	be 15       	cp	r27, r14
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <Timer_GetStatus+0xae>
    1ed0:	58 c0       	rjmp	.+176    	; 0x1f82 <Timer_GetStatus+0x15e>
    1ed2:	98 17       	cp	r25, r24
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <Timer_GetStatus+0xb4>
    1ed6:	55 c0       	rjmp	.+170    	; 0x1f82 <Timer_GetStatus+0x15e>
    1ed8:	25 17       	cp	r18, r21
    1eda:	09 f0       	breq	.+2      	; 0x1ede <Timer_GetStatus+0xba>
    1edc:	52 c0       	rjmp	.+164    	; 0x1f82 <Timer_GetStatus+0x15e>
    1ede:	37 17       	cp	r19, r23
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <Timer_GetStatus+0xc0>
    1ee2:	4f c0       	rjmp	.+158    	; 0x1f82 <Timer_GetStatus+0x15e>
    1ee4:	4e 17       	cp	r20, r30
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <Timer_GetStatus+0xc6>
    1ee8:	4c c0       	rjmp	.+152    	; 0x1f82 <Timer_GetStatus+0x15e>
    1eea:	6f 17       	cp	r22, r31
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <Timer_GetStatus+0xcc>
    1eee:	49 c0       	rjmp	.+146    	; 0x1f82 <Timer_GetStatus+0x15e>
    1ef0:	a1 17       	cp	r26, r17
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <Timer_GetStatus+0xd2>
    1ef4:	46 c0       	rjmp	.+140    	; 0x1f82 <Timer_GetStatus+0x15e>
    1ef6:	f0 16       	cp	r15, r16
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <Timer_GetStatus+0xd8>
    1efa:	43 c0       	rjmp	.+134    	; 0x1f82 <Timer_GetStatus+0x15e>
      {
         //set the timer value to the remaining timing
         TCNT0_R = ((T0_TICKS - 1) - Gu32_T0LastOVTicks);
    1efc:	80 91 e8 01 	lds	r24, 0x01E8
    1f00:	80 95       	com	r24
    1f02:	82 bf       	out	0x32, r24	; 50
         //clear the overflow flag
         SET_BIT(TIFR_R,TOV0_B);
    1f04:	88 b7       	in	r24, 0x38	; 56
    1f06:	81 60       	ori	r24, 0x01	; 1
    1f08:	88 bf       	out	0x38, r24	; 56
         //increase the overflow counter
         Gu32_T0CurrentOVCount++;
    1f0a:	fb 2f       	mov	r31, r27
    1f0c:	ff 5f       	subi	r31, 0xFF	; 255
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	fb 17       	cp	r31, r27
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <Timer_GetStatus+0xf2>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	e8 2f       	mov	r30, r24
    1f18:	e9 0f       	add	r30, r25
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	e9 17       	cp	r30, r25
    1f1e:	08 f0       	brcs	.+2      	; 0x1f22 <Timer_GetStatus+0xfe>
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	78 2f       	mov	r23, r24
    1f24:	72 0f       	add	r23, r18
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	72 17       	cp	r23, r18
    1f2a:	08 f0       	brcs	.+2      	; 0x1f2e <Timer_GetStatus+0x10a>
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	58 2f       	mov	r21, r24
    1f30:	53 0f       	add	r21, r19
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	53 17       	cp	r21, r19
    1f36:	08 f0       	brcs	.+2      	; 0x1f3a <Timer_GetStatus+0x116>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	38 2f       	mov	r19, r24
    1f3c:	34 0f       	add	r19, r20
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	34 17       	cp	r19, r20
    1f42:	08 f0       	brcs	.+2      	; 0x1f46 <Timer_GetStatus+0x122>
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	28 2f       	mov	r18, r24
    1f48:	26 0f       	add	r18, r22
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	26 17       	cp	r18, r22
    1f4e:	08 f0       	brcs	.+2      	; 0x1f52 <Timer_GetStatus+0x12e>
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	98 2f       	mov	r25, r24
    1f54:	9a 0f       	add	r25, r26
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	9a 17       	cp	r25, r26
    1f5a:	08 f0       	brcs	.+2      	; 0x1f5e <Timer_GetStatus+0x13a>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	8f 0d       	add	r24, r15
    1f60:	f0 93 e0 01 	sts	0x01E0, r31
    1f64:	e0 93 e1 01 	sts	0x01E1, r30
    1f68:	70 93 e2 01 	sts	0x01E2, r23
    1f6c:	50 93 e3 01 	sts	0x01E3, r21
    1f70:	30 93 e4 01 	sts	0x01E4, r19
    1f74:	20 93 e5 01 	sts	0x01E5, r18
    1f78:	90 93 e6 01 	sts	0x01E6, r25
    1f7c:	80 93 e7 01 	sts	0x01E7, r24
    1f80:	b3 c0       	rjmp	.+358    	; 0x20e8 <Timer_GetStatus+0x2c4>
      }
      //if the time is up
      else
      {
         //check if the global pointer to function holds a valid function address
         if (G_fptr != NULLPTR)
    1f82:	e0 91 d6 01 	lds	r30, 0x01D6
    1f86:	f0 91 d7 01 	lds	r31, 0x01D7
    1f8a:	a8 c0       	rjmp	.+336    	; 0x20dc <Timer_GetStatus+0x2b8>
         Timer_Stop(u8GroupId);
         //return a E_OK state
      }
      return E_OK;
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER1)
    1f8c:	e1 30       	cpi	r30, 0x01	; 1
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <Timer_GetStatus+0x16e>
    1f90:	ab c0       	rjmp	.+342    	; 0x20e8 <Timer_GetStatus+0x2c4>
	{
      return E_OK;
	}
	else if(astrTimerConfigParameters[u8GroupId].enuTimerModule == TIMER2)
    1f92:	e2 30       	cpi	r30, 0x02	; 2
    1f94:	11 f0       	breq	.+4      	; 0x1f9a <Timer_GetStatus+0x176>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	a8 c0       	rjmp	.+336    	; 0x20ea <Timer_GetStatus+0x2c6>
	{
      //if the current overflow value is less than the total overflows value
      if (Gu32_T2CurrentOVCount < Gu32_T2MaxOVCount)
    1f9a:	b0 91 f5 01 	lds	r27, 0x01F5
    1f9e:	90 91 f6 01 	lds	r25, 0x01F6
    1fa2:	20 91 f7 01 	lds	r18, 0x01F7
    1fa6:	30 91 f8 01 	lds	r19, 0x01F8
    1faa:	40 91 f9 01 	lds	r20, 0x01F9
    1fae:	60 91 fa 01 	lds	r22, 0x01FA
    1fb2:	a0 91 fb 01 	lds	r26, 0x01FB
    1fb6:	f0 90 fc 01 	lds	r15, 0x01FC
    1fba:	e0 90 ed 01 	lds	r14, 0x01ED
    1fbe:	80 91 ee 01 	lds	r24, 0x01EE
    1fc2:	50 91 ef 01 	lds	r21, 0x01EF
    1fc6:	70 91 f0 01 	lds	r23, 0x01F0
    1fca:	e0 91 f1 01 	lds	r30, 0x01F1
    1fce:	f0 91 f2 01 	lds	r31, 0x01F2
    1fd2:	10 91 f3 01 	lds	r17, 0x01F3
    1fd6:	00 91 f4 01 	lds	r16, 0x01F4
    1fda:	f0 16       	cp	r15, r16
    1fdc:	e0 f0       	brcs	.+56     	; 0x2016 <Timer_GetStatus+0x1f2>
    1fde:	0f 15       	cp	r16, r15
    1fe0:	f1 f4       	brne	.+60     	; 0x201e <Timer_GetStatus+0x1fa>
    1fe2:	a1 17       	cp	r26, r17
    1fe4:	c0 f0       	brcs	.+48     	; 0x2016 <Timer_GetStatus+0x1f2>
    1fe6:	1a 17       	cp	r17, r26
    1fe8:	d1 f4       	brne	.+52     	; 0x201e <Timer_GetStatus+0x1fa>
    1fea:	6f 17       	cp	r22, r31
    1fec:	a0 f0       	brcs	.+40     	; 0x2016 <Timer_GetStatus+0x1f2>
    1fee:	f6 17       	cp	r31, r22
    1ff0:	b1 f4       	brne	.+44     	; 0x201e <Timer_GetStatus+0x1fa>
    1ff2:	4e 17       	cp	r20, r30
    1ff4:	80 f0       	brcs	.+32     	; 0x2016 <Timer_GetStatus+0x1f2>
    1ff6:	e4 17       	cp	r30, r20
    1ff8:	91 f4       	brne	.+36     	; 0x201e <Timer_GetStatus+0x1fa>
    1ffa:	37 17       	cp	r19, r23
    1ffc:	60 f0       	brcs	.+24     	; 0x2016 <Timer_GetStatus+0x1f2>
    1ffe:	73 17       	cp	r23, r19
    2000:	71 f4       	brne	.+28     	; 0x201e <Timer_GetStatus+0x1fa>
    2002:	25 17       	cp	r18, r21
    2004:	40 f0       	brcs	.+16     	; 0x2016 <Timer_GetStatus+0x1f2>
    2006:	52 17       	cp	r21, r18
    2008:	51 f4       	brne	.+20     	; 0x201e <Timer_GetStatus+0x1fa>
    200a:	98 17       	cp	r25, r24
    200c:	20 f0       	brcs	.+8      	; 0x2016 <Timer_GetStatus+0x1f2>
    200e:	89 17       	cp	r24, r25
    2010:	31 f4       	brne	.+12     	; 0x201e <Timer_GetStatus+0x1fa>
    2012:	be 15       	cp	r27, r14
    2014:	20 f4       	brcc	.+8      	; 0x201e <Timer_GetStatus+0x1fa>
      {
         //check the over flow flag
         if (GET_BIT(TIFR_R,TOV2_B))
    2016:	08 b6       	in	r0, 0x38	; 56
    2018:	06 fe       	sbrs	r0, 6
    201a:	66 c0       	rjmp	.+204    	; 0x20e8 <Timer_GetStatus+0x2c4>
    201c:	1c c0       	rjmp	.+56     	; 0x2056 <Timer_GetStatus+0x232>
         else
         {
         }
      }
      //if the current overflow value equals the calculated total overflows value
      else if (Gu32_T2CurrentOVCount == Gu32_T2MaxOVCount)
    201e:	be 15       	cp	r27, r14
    2020:	09 f0       	breq	.+2      	; 0x2024 <Timer_GetStatus+0x200>
    2022:	58 c0       	rjmp	.+176    	; 0x20d4 <Timer_GetStatus+0x2b0>
    2024:	98 17       	cp	r25, r24
    2026:	09 f0       	breq	.+2      	; 0x202a <Timer_GetStatus+0x206>
    2028:	55 c0       	rjmp	.+170    	; 0x20d4 <Timer_GetStatus+0x2b0>
    202a:	25 17       	cp	r18, r21
    202c:	09 f0       	breq	.+2      	; 0x2030 <Timer_GetStatus+0x20c>
    202e:	52 c0       	rjmp	.+164    	; 0x20d4 <Timer_GetStatus+0x2b0>
    2030:	37 17       	cp	r19, r23
    2032:	09 f0       	breq	.+2      	; 0x2036 <Timer_GetStatus+0x212>
    2034:	4f c0       	rjmp	.+158    	; 0x20d4 <Timer_GetStatus+0x2b0>
    2036:	4e 17       	cp	r20, r30
    2038:	09 f0       	breq	.+2      	; 0x203c <Timer_GetStatus+0x218>
    203a:	4c c0       	rjmp	.+152    	; 0x20d4 <Timer_GetStatus+0x2b0>
    203c:	6f 17       	cp	r22, r31
    203e:	09 f0       	breq	.+2      	; 0x2042 <Timer_GetStatus+0x21e>
    2040:	49 c0       	rjmp	.+146    	; 0x20d4 <Timer_GetStatus+0x2b0>
    2042:	a1 17       	cp	r26, r17
    2044:	09 f0       	breq	.+2      	; 0x2048 <Timer_GetStatus+0x224>
    2046:	46 c0       	rjmp	.+140    	; 0x20d4 <Timer_GetStatus+0x2b0>
    2048:	f0 16       	cp	r15, r16
    204a:	09 f0       	breq	.+2      	; 0x204e <Timer_GetStatus+0x22a>
    204c:	43 c0       	rjmp	.+134    	; 0x20d4 <Timer_GetStatus+0x2b0>
      {
         //set the timer value to the remaining timing
         TCNT2_R=((T2_TICKS - 1) - Gu32_T2LastOVTicks);
    204e:	80 91 fd 01 	lds	r24, 0x01FD
    2052:	80 95       	com	r24
    2054:	84 bd       	out	0x24, r24	; 36
         //clear the overflow flag
         SET_BIT(TIFR_R,TOV2_B);
    2056:	88 b7       	in	r24, 0x38	; 56
    2058:	80 64       	ori	r24, 0x40	; 64
    205a:	88 bf       	out	0x38, r24	; 56
         //increase the overflow counter
         Gu32_T2CurrentOVCount++;
    205c:	fb 2f       	mov	r31, r27
    205e:	ff 5f       	subi	r31, 0xFF	; 255
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	fb 17       	cp	r31, r27
    2064:	08 f0       	brcs	.+2      	; 0x2068 <Timer_GetStatus+0x244>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	e8 2f       	mov	r30, r24
    206a:	e9 0f       	add	r30, r25
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	e9 17       	cp	r30, r25
    2070:	08 f0       	brcs	.+2      	; 0x2074 <Timer_GetStatus+0x250>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	78 2f       	mov	r23, r24
    2076:	72 0f       	add	r23, r18
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	72 17       	cp	r23, r18
    207c:	08 f0       	brcs	.+2      	; 0x2080 <Timer_GetStatus+0x25c>
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	58 2f       	mov	r21, r24
    2082:	53 0f       	add	r21, r19
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	53 17       	cp	r21, r19
    2088:	08 f0       	brcs	.+2      	; 0x208c <Timer_GetStatus+0x268>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	38 2f       	mov	r19, r24
    208e:	34 0f       	add	r19, r20
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	34 17       	cp	r19, r20
    2094:	08 f0       	brcs	.+2      	; 0x2098 <Timer_GetStatus+0x274>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	28 2f       	mov	r18, r24
    209a:	26 0f       	add	r18, r22
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	26 17       	cp	r18, r22
    20a0:	08 f0       	brcs	.+2      	; 0x20a4 <Timer_GetStatus+0x280>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	98 2f       	mov	r25, r24
    20a6:	9a 0f       	add	r25, r26
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	9a 17       	cp	r25, r26
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <Timer_GetStatus+0x28c>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	8f 0d       	add	r24, r15
    20b2:	f0 93 f5 01 	sts	0x01F5, r31
    20b6:	e0 93 f6 01 	sts	0x01F6, r30
    20ba:	70 93 f7 01 	sts	0x01F7, r23
    20be:	50 93 f8 01 	sts	0x01F8, r21
    20c2:	30 93 f9 01 	sts	0x01F9, r19
    20c6:	20 93 fa 01 	sts	0x01FA, r18
    20ca:	90 93 fb 01 	sts	0x01FB, r25
    20ce:	80 93 fc 01 	sts	0x01FC, r24
    20d2:	0a c0       	rjmp	.+20     	; 0x20e8 <Timer_GetStatus+0x2c4>
      }
      //if the time is up
      else
      {
         //check if the global pointer to function holds a valid function address
         if(G_fptr2 != NULLPTR)
    20d4:	e0 91 eb 01 	lds	r30, 0x01EB
    20d8:	f0 91 ec 01 	lds	r31, 0x01EC
    20dc:	30 97       	sbiw	r30, 0x00	; 0
    20de:	09 f0       	breq	.+2      	; 0x20e2 <Timer_GetStatus+0x2be>
         {
            //if so, call the function
            G_fptr2();
    20e0:	09 95       	icall
         }
         else
         {
         }
         //stop the timer
         Timer_Stop(u8GroupId);
    20e2:	8d 2d       	mov	r24, r13
    20e4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Timer_Stop>
    20e8:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		// if all failed, return an error state
		return E_ERROR;
	}
}
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	ff 90       	pop	r15
    20f0:	ef 90       	pop	r14
    20f2:	df 90       	pop	r13
    20f4:	08 95       	ret

000020f6 <Timer1_Init>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to initialize timer 1 according to the sent parameters
************************************************************************************/
enuErrorStatus_t Timer1_Init( enuTimer1Mode_t enuMode,enuTimer1Scaler_t enuScaler)
{
    20f6:	38 2f       	mov	r19, r24
   //select the appropriate mode the user has selected by selecting 
   //and clearing the appropriate bits in the TCCR1A & TCCR1B Registers
   //Values are demonstrated in the datasheet
   switch (enuMode)
    20f8:	8d 30       	cpi	r24, 0x0D	; 13
    20fa:	28 f0       	brcs	.+10     	; 0x2106 <Timer1_Init+0x10>
    20fc:	8e 50       	subi	r24, 0x0E	; 14
    20fe:	82 30       	cpi	r24, 0x02	; 2
    2100:	10 f0       	brcs	.+4      	; 0x2106 <Timer1_Init+0x10>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	08 95       	ret
      case TIMER1_PWM_PHASE_OCRA_TOP_MODE:
      case TIMER1_CTC_ICR_TOP_MODE:
      case TIMER1_FASTPWM_ICR_TOP_MODE:
      case TIMER1_FASTPWM_OCRA_TOP_MODE:
         
         TCCR1A_R &= 0b11111100;
    2106:	8f b5       	in	r24, 0x2f	; 47
    2108:	8c 7f       	andi	r24, 0xFC	; 252
    210a:	8f bd       	out	0x2f, r24	; 47
         TCCR1A_R |= (enuMode & 0x03);
    210c:	9f b5       	in	r25, 0x2f	; 47
    210e:	83 2f       	mov	r24, r19
    2110:	83 70       	andi	r24, 0x03	; 3
    2112:	89 2b       	or	r24, r25
    2114:	8f bd       	out	0x2f, r24	; 47
         
         TCCR1B_R &= 0b11100111;
    2116:	8e b5       	in	r24, 0x2e	; 46
    2118:	87 7e       	andi	r24, 0xE7	; 231
    211a:	8e bd       	out	0x2e, r24	; 46
         TCCR1B_R |= ((enuMode & 0b00001100)<<1);
    211c:	2e b5       	in	r18, 0x2e	; 46
    211e:	83 2f       	mov	r24, r19
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	8c 70       	andi	r24, 0x0C	; 12
    2124:	90 70       	andi	r25, 0x00	; 0
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	28 2b       	or	r18, r24
    212c:	2e bd       	out	0x2e, r18	; 46
         break;
      
   }
   
   //clear the prescaler bits in the TCCR1B
   TCCR1B_R &=0XF8;
    212e:	8e b5       	in	r24, 0x2e	; 46
    2130:	88 7f       	andi	r24, 0xF8	; 248
    2132:	8e bd       	out	0x2e, r24	; 46
   //enter the prescaler number the user has selected
   TCCR1B_R|=enuScaler;
    2134:	8e b5       	in	r24, 0x2e	; 46
    2136:	86 2b       	or	r24, r22
    2138:	8e bd       	out	0x2e, r24	; 46
    213a:	81 e0       	ldi	r24, 0x01	; 1
   return E_OK;
}
    213c:	08 95       	ret

0000213e <Timer1_OVF_SetCallback>:

void (*Timer1_OVF_Callback)(void)=NULLPTR;
enuErrorStatus_t Timer1_OVF_SetCallback(void (*local_Fptr)(void))
{
   if (local_Fptr == NULLPTR)
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	11 f4       	brne	.+4      	; 0x2146 <Timer1_OVF_SetCallback+0x8>
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	08 95       	ret
   {
      return E_ERROR;
   }
   Timer1_OVF_Callback=local_Fptr;
    2146:	90 93 01 02 	sts	0x0201, r25
    214a:	80 93 00 02 	sts	0x0200, r24
    214e:	81 e0       	ldi	r24, 0x01	; 1
   return E_OK;
}
    2150:	08 95       	ret

00002152 <Timer1_GetOVFCount>:


uint32_t Timer1_OVF_Counter=0;
enuErrorStatus_t Timer1_GetOVFCount(uint32_t *buffer)
{
    2152:	fc 01       	movw	r30, r24
   if (buffer == NULLPTR)
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	11 f4       	brne	.+4      	; 0x215c <Timer1_GetOVFCount+0xa>
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	08 95       	ret
   {
      return E_ERROR;
   }
   *buffer=Timer1_OVF_Counter;
    215c:	80 91 02 02 	lds	r24, 0x0202
    2160:	90 91 03 02 	lds	r25, 0x0203
    2164:	a0 91 04 02 	lds	r26, 0x0204
    2168:	b0 91 05 02 	lds	r27, 0x0205
    216c:	80 83       	st	Z, r24
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	a2 83       	std	Z+2, r26	; 0x02
    2172:	b3 83       	std	Z+3, r27	; 0x03
    2174:	81 e0       	ldi	r24, 0x01	; 1
   return E_OK;
}
    2176:	08 95       	ret

00002178 <Timer1_ResetOVFCount>:

enuErrorStatus_t Timer1_ResetOVFCount(void)
{
   Timer1_OVF_Counter=0;
    2178:	10 92 02 02 	sts	0x0202, r1
    217c:	10 92 03 02 	sts	0x0203, r1
    2180:	10 92 04 02 	sts	0x0204, r1
    2184:	10 92 05 02 	sts	0x0205, r1
   return E_OK;
}
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	08 95       	ret

0000218c <__vector_11>:


/******************** ISR FUNCTIONS ****************************************/
//ISR function to run in case  of a timer overflow interrupt
ISR(TIMER0_OVF_vect)
{
    218c:	1f 92       	push	r1
    218e:	0f 92       	push	r0
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	0f 92       	push	r0
    2194:	11 24       	eor	r1, r1
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	2f 93       	push	r18
    21a0:	3f 93       	push	r19
    21a2:	4f 93       	push	r20
    21a4:	5f 93       	push	r21
    21a6:	6f 93       	push	r22
    21a8:	7f 93       	push	r23
    21aa:	8f 93       	push	r24
    21ac:	9f 93       	push	r25
    21ae:	af 93       	push	r26
    21b0:	bf 93       	push	r27
    21b2:	ef 93       	push	r30
    21b4:	ff 93       	push	r31
   //if the current overflow value is less than the total overflows value
   if (Gu32_T0CurrentOVCount < Gu32_T0MaxOVCount)
    21b6:	60 91 e0 01 	lds	r22, 0x01E0
    21ba:	90 91 e1 01 	lds	r25, 0x01E1
    21be:	20 91 e2 01 	lds	r18, 0x01E2
    21c2:	30 91 e3 01 	lds	r19, 0x01E3
    21c6:	40 91 e4 01 	lds	r20, 0x01E4
    21ca:	50 91 e5 01 	lds	r21, 0x01E5
    21ce:	e0 91 e6 01 	lds	r30, 0x01E6
    21d2:	f0 90 e7 01 	lds	r15, 0x01E7
    21d6:	e0 90 d8 01 	lds	r14, 0x01D8
    21da:	80 91 d9 01 	lds	r24, 0x01D9
    21de:	70 91 da 01 	lds	r23, 0x01DA
    21e2:	f0 91 db 01 	lds	r31, 0x01DB
    21e6:	a0 91 dc 01 	lds	r26, 0x01DC
    21ea:	b0 91 dd 01 	lds	r27, 0x01DD
    21ee:	10 91 de 01 	lds	r17, 0x01DE
    21f2:	00 91 df 01 	lds	r16, 0x01DF
    21f6:	f0 16       	cp	r15, r16
    21f8:	c0 f1       	brcs	.+112    	; 0x226a <__vector_11+0xde>
    21fa:	0f 15       	cp	r16, r15
    21fc:	d1 f4       	brne	.+52     	; 0x2232 <__vector_11+0xa6>
    21fe:	e1 17       	cp	r30, r17
    2200:	a0 f1       	brcs	.+104    	; 0x226a <__vector_11+0xde>
    2202:	1e 17       	cp	r17, r30
    2204:	b1 f4       	brne	.+44     	; 0x2232 <__vector_11+0xa6>
    2206:	5b 17       	cp	r21, r27
    2208:	80 f1       	brcs	.+96     	; 0x226a <__vector_11+0xde>
    220a:	b5 17       	cp	r27, r21
    220c:	91 f4       	brne	.+36     	; 0x2232 <__vector_11+0xa6>
    220e:	4a 17       	cp	r20, r26
    2210:	60 f1       	brcs	.+88     	; 0x226a <__vector_11+0xde>
    2212:	a4 17       	cp	r26, r20
    2214:	71 f4       	brne	.+28     	; 0x2232 <__vector_11+0xa6>
    2216:	3f 17       	cp	r19, r31
    2218:	40 f1       	brcs	.+80     	; 0x226a <__vector_11+0xde>
    221a:	f3 17       	cp	r31, r19
    221c:	51 f4       	brne	.+20     	; 0x2232 <__vector_11+0xa6>
    221e:	27 17       	cp	r18, r23
    2220:	20 f1       	brcs	.+72     	; 0x226a <__vector_11+0xde>
    2222:	72 17       	cp	r23, r18
    2224:	31 f4       	brne	.+12     	; 0x2232 <__vector_11+0xa6>
    2226:	98 17       	cp	r25, r24
    2228:	00 f1       	brcs	.+64     	; 0x226a <__vector_11+0xde>
    222a:	89 17       	cp	r24, r25
    222c:	11 f4       	brne	.+4      	; 0x2232 <__vector_11+0xa6>
    222e:	6e 15       	cp	r22, r14
    2230:	e0 f0       	brcs	.+56     	; 0x226a <__vector_11+0xde>
   {
      //increase the overflow counter
      Gu32_T0CurrentOVCount++;
   }
   //if the current overflow value equals the calculated total overflows value
   else if (Gu32_T0CurrentOVCount == Gu32_T0MaxOVCount)
    2232:	6e 15       	cp	r22, r14
    2234:	09 f0       	breq	.+2      	; 0x2238 <__vector_11+0xac>
    2236:	55 c0       	rjmp	.+170    	; 0x22e2 <__vector_11+0x156>
    2238:	98 17       	cp	r25, r24
    223a:	09 f0       	breq	.+2      	; 0x223e <__vector_11+0xb2>
    223c:	52 c0       	rjmp	.+164    	; 0x22e2 <__vector_11+0x156>
    223e:	27 17       	cp	r18, r23
    2240:	09 f0       	breq	.+2      	; 0x2244 <__vector_11+0xb8>
    2242:	4f c0       	rjmp	.+158    	; 0x22e2 <__vector_11+0x156>
    2244:	3f 17       	cp	r19, r31
    2246:	09 f0       	breq	.+2      	; 0x224a <__vector_11+0xbe>
    2248:	4c c0       	rjmp	.+152    	; 0x22e2 <__vector_11+0x156>
    224a:	4a 17       	cp	r20, r26
    224c:	09 f0       	breq	.+2      	; 0x2250 <__vector_11+0xc4>
    224e:	49 c0       	rjmp	.+146    	; 0x22e2 <__vector_11+0x156>
    2250:	5b 17       	cp	r21, r27
    2252:	09 f0       	breq	.+2      	; 0x2256 <__vector_11+0xca>
    2254:	46 c0       	rjmp	.+140    	; 0x22e2 <__vector_11+0x156>
    2256:	e1 17       	cp	r30, r17
    2258:	09 f0       	breq	.+2      	; 0x225c <__vector_11+0xd0>
    225a:	43 c0       	rjmp	.+134    	; 0x22e2 <__vector_11+0x156>
    225c:	f0 16       	cp	r15, r16
    225e:	09 f0       	breq	.+2      	; 0x2262 <__vector_11+0xd6>
    2260:	40 c0       	rjmp	.+128    	; 0x22e2 <__vector_11+0x156>
   {
      //set the timer value to the remaining timing
      TCNT0_R=((T0_TICKS-1)-Gu32_T0LastOVTicks);
    2262:	80 91 e8 01 	lds	r24, 0x01E8
    2266:	80 95       	com	r24
    2268:	82 bf       	out	0x32, r24	; 50
      //increase the overflow counter
      Gu32_T0CurrentOVCount++;
    226a:	a6 2f       	mov	r26, r22
    226c:	af 5f       	subi	r26, 0xFF	; 255
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	a6 17       	cp	r26, r22
    2272:	08 f0       	brcs	.+2      	; 0x2276 <__vector_11+0xea>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	f8 2f       	mov	r31, r24
    2278:	f9 0f       	add	r31, r25
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	f9 17       	cp	r31, r25
    227e:	08 f0       	brcs	.+2      	; 0x2282 <__vector_11+0xf6>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	78 2f       	mov	r23, r24
    2284:	72 0f       	add	r23, r18
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	72 17       	cp	r23, r18
    228a:	08 f0       	brcs	.+2      	; 0x228e <__vector_11+0x102>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	68 2f       	mov	r22, r24
    2290:	63 0f       	add	r22, r19
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	63 17       	cp	r22, r19
    2296:	08 f0       	brcs	.+2      	; 0x229a <__vector_11+0x10e>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	38 2f       	mov	r19, r24
    229c:	34 0f       	add	r19, r20
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	34 17       	cp	r19, r20
    22a2:	08 f0       	brcs	.+2      	; 0x22a6 <__vector_11+0x11a>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	28 2f       	mov	r18, r24
    22a8:	25 0f       	add	r18, r21
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	25 17       	cp	r18, r21
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <__vector_11+0x126>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	98 2f       	mov	r25, r24
    22b4:	9e 0f       	add	r25, r30
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	9e 17       	cp	r25, r30
    22ba:	08 f0       	brcs	.+2      	; 0x22be <__vector_11+0x132>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	8f 0d       	add	r24, r15
    22c0:	a0 93 e0 01 	sts	0x01E0, r26
    22c4:	f0 93 e1 01 	sts	0x01E1, r31
    22c8:	70 93 e2 01 	sts	0x01E2, r23
    22cc:	60 93 e3 01 	sts	0x01E3, r22
    22d0:	30 93 e4 01 	sts	0x01E4, r19
    22d4:	20 93 e5 01 	sts	0x01E5, r18
    22d8:	90 93 e6 01 	sts	0x01E6, r25
    22dc:	80 93 e7 01 	sts	0x01E7, r24
    22e0:	17 c0       	rjmp	.+46     	; 0x2310 <__vector_11+0x184>
   }
   //if the time is up
   else
   {
      //reset the overflow counter
      Gu32_T0CurrentOVCount=0;
    22e2:	10 92 e0 01 	sts	0x01E0, r1
    22e6:	10 92 e1 01 	sts	0x01E1, r1
    22ea:	10 92 e2 01 	sts	0x01E2, r1
    22ee:	10 92 e3 01 	sts	0x01E3, r1
    22f2:	10 92 e4 01 	sts	0x01E4, r1
    22f6:	10 92 e5 01 	sts	0x01E5, r1
    22fa:	10 92 e6 01 	sts	0x01E6, r1
    22fe:	10 92 e7 01 	sts	0x01E7, r1
      //check if the global pointer to function holds a valid function address
      if (G_fptr != NULLPTR)
    2302:	e0 91 d6 01 	lds	r30, 0x01D6
    2306:	f0 91 d7 01 	lds	r31, 0x01D7
    230a:	30 97       	sbiw	r30, 0x00	; 0
    230c:	09 f0       	breq	.+2      	; 0x2310 <__vector_11+0x184>
      {
         //call the function
         G_fptr();
    230e:	09 95       	icall
      }
   }
}
    2310:	ff 91       	pop	r31
    2312:	ef 91       	pop	r30
    2314:	bf 91       	pop	r27
    2316:	af 91       	pop	r26
    2318:	9f 91       	pop	r25
    231a:	8f 91       	pop	r24
    231c:	7f 91       	pop	r23
    231e:	6f 91       	pop	r22
    2320:	5f 91       	pop	r21
    2322:	4f 91       	pop	r20
    2324:	3f 91       	pop	r19
    2326:	2f 91       	pop	r18
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	0f 90       	pop	r0
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	0f 90       	pop	r0
    2336:	1f 90       	pop	r1
    2338:	18 95       	reti

0000233a <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    233a:	1f 92       	push	r1
    233c:	0f 92       	push	r0
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	0f 92       	push	r0
    2342:	11 24       	eor	r1, r1
    2344:	2f 93       	push	r18
    2346:	3f 93       	push	r19
    2348:	4f 93       	push	r20
    234a:	5f 93       	push	r21
    234c:	6f 93       	push	r22
    234e:	7f 93       	push	r23
    2350:	8f 93       	push	r24
    2352:	9f 93       	push	r25
    2354:	af 93       	push	r26
    2356:	bf 93       	push	r27
    2358:	ef 93       	push	r30
    235a:	ff 93       	push	r31
   Timer1_OVF_Counter++;
    235c:	80 91 02 02 	lds	r24, 0x0202
    2360:	90 91 03 02 	lds	r25, 0x0203
    2364:	a0 91 04 02 	lds	r26, 0x0204
    2368:	b0 91 05 02 	lds	r27, 0x0205
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	a1 1d       	adc	r26, r1
    2370:	b1 1d       	adc	r27, r1
    2372:	80 93 02 02 	sts	0x0202, r24
    2376:	90 93 03 02 	sts	0x0203, r25
    237a:	a0 93 04 02 	sts	0x0204, r26
    237e:	b0 93 05 02 	sts	0x0205, r27
   if (Timer1_OVF_Callback != NULLPTR)
    2382:	e0 91 00 02 	lds	r30, 0x0200
    2386:	f0 91 01 02 	lds	r31, 0x0201
    238a:	30 97       	sbiw	r30, 0x00	; 0
    238c:	09 f0       	breq	.+2      	; 0x2390 <__vector_9+0x56>
   {
      Timer1_OVF_Callback();
    238e:	09 95       	icall
   }
}
    2390:	ff 91       	pop	r31
    2392:	ef 91       	pop	r30
    2394:	bf 91       	pop	r27
    2396:	af 91       	pop	r26
    2398:	9f 91       	pop	r25
    239a:	8f 91       	pop	r24
    239c:	7f 91       	pop	r23
    239e:	6f 91       	pop	r22
    23a0:	5f 91       	pop	r21
    23a2:	4f 91       	pop	r20
    23a4:	3f 91       	pop	r19
    23a6:	2f 91       	pop	r18
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	0f 90       	pop	r0
    23ae:	1f 90       	pop	r1
    23b0:	18 95       	reti

000023b2 <__vector_5>:

//ISR function to run in case  of a timer overflow interrupt
ISR(TIMER2_OVF_vect)
{
    23b2:	1f 92       	push	r1
    23b4:	0f 92       	push	r0
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	0f 92       	push	r0
    23ba:	11 24       	eor	r1, r1
    23bc:	ef 92       	push	r14
    23be:	ff 92       	push	r15
    23c0:	0f 93       	push	r16
    23c2:	1f 93       	push	r17
    23c4:	2f 93       	push	r18
    23c6:	3f 93       	push	r19
    23c8:	4f 93       	push	r20
    23ca:	5f 93       	push	r21
    23cc:	6f 93       	push	r22
    23ce:	7f 93       	push	r23
    23d0:	8f 93       	push	r24
    23d2:	9f 93       	push	r25
    23d4:	af 93       	push	r26
    23d6:	bf 93       	push	r27
    23d8:	ef 93       	push	r30
    23da:	ff 93       	push	r31
   //if the current overflow value is less than the total overflows value
   if (Gu32_T2CurrentOVCount < Gu32_T2MaxOVCount)
    23dc:	60 91 f5 01 	lds	r22, 0x01F5
    23e0:	90 91 f6 01 	lds	r25, 0x01F6
    23e4:	20 91 f7 01 	lds	r18, 0x01F7
    23e8:	30 91 f8 01 	lds	r19, 0x01F8
    23ec:	40 91 f9 01 	lds	r20, 0x01F9
    23f0:	50 91 fa 01 	lds	r21, 0x01FA
    23f4:	e0 91 fb 01 	lds	r30, 0x01FB
    23f8:	f0 90 fc 01 	lds	r15, 0x01FC
    23fc:	e0 90 ed 01 	lds	r14, 0x01ED
    2400:	80 91 ee 01 	lds	r24, 0x01EE
    2404:	70 91 ef 01 	lds	r23, 0x01EF
    2408:	f0 91 f0 01 	lds	r31, 0x01F0
    240c:	a0 91 f1 01 	lds	r26, 0x01F1
    2410:	b0 91 f2 01 	lds	r27, 0x01F2
    2414:	10 91 f3 01 	lds	r17, 0x01F3
    2418:	00 91 f4 01 	lds	r16, 0x01F4
    241c:	f0 16       	cp	r15, r16
    241e:	c0 f1       	brcs	.+112    	; 0x2490 <__vector_5+0xde>
    2420:	0f 15       	cp	r16, r15
    2422:	d1 f4       	brne	.+52     	; 0x2458 <__vector_5+0xa6>
    2424:	e1 17       	cp	r30, r17
    2426:	a0 f1       	brcs	.+104    	; 0x2490 <__vector_5+0xde>
    2428:	1e 17       	cp	r17, r30
    242a:	b1 f4       	brne	.+44     	; 0x2458 <__vector_5+0xa6>
    242c:	5b 17       	cp	r21, r27
    242e:	80 f1       	brcs	.+96     	; 0x2490 <__vector_5+0xde>
    2430:	b5 17       	cp	r27, r21
    2432:	91 f4       	brne	.+36     	; 0x2458 <__vector_5+0xa6>
    2434:	4a 17       	cp	r20, r26
    2436:	60 f1       	brcs	.+88     	; 0x2490 <__vector_5+0xde>
    2438:	a4 17       	cp	r26, r20
    243a:	71 f4       	brne	.+28     	; 0x2458 <__vector_5+0xa6>
    243c:	3f 17       	cp	r19, r31
    243e:	40 f1       	brcs	.+80     	; 0x2490 <__vector_5+0xde>
    2440:	f3 17       	cp	r31, r19
    2442:	51 f4       	brne	.+20     	; 0x2458 <__vector_5+0xa6>
    2444:	27 17       	cp	r18, r23
    2446:	20 f1       	brcs	.+72     	; 0x2490 <__vector_5+0xde>
    2448:	72 17       	cp	r23, r18
    244a:	31 f4       	brne	.+12     	; 0x2458 <__vector_5+0xa6>
    244c:	98 17       	cp	r25, r24
    244e:	00 f1       	brcs	.+64     	; 0x2490 <__vector_5+0xde>
    2450:	89 17       	cp	r24, r25
    2452:	11 f4       	brne	.+4      	; 0x2458 <__vector_5+0xa6>
    2454:	6e 15       	cp	r22, r14
    2456:	e0 f0       	brcs	.+56     	; 0x2490 <__vector_5+0xde>
   {
      //increase the overflow counter
      Gu32_T2CurrentOVCount++;
   }
   //if the current overflow value equals the calculated total overflows value
   else if (Gu32_T2CurrentOVCount == Gu32_T2MaxOVCount)
    2458:	6e 15       	cp	r22, r14
    245a:	09 f0       	breq	.+2      	; 0x245e <__vector_5+0xac>
    245c:	55 c0       	rjmp	.+170    	; 0x2508 <__vector_5+0x156>
    245e:	98 17       	cp	r25, r24
    2460:	09 f0       	breq	.+2      	; 0x2464 <__vector_5+0xb2>
    2462:	52 c0       	rjmp	.+164    	; 0x2508 <__vector_5+0x156>
    2464:	27 17       	cp	r18, r23
    2466:	09 f0       	breq	.+2      	; 0x246a <__vector_5+0xb8>
    2468:	4f c0       	rjmp	.+158    	; 0x2508 <__vector_5+0x156>
    246a:	3f 17       	cp	r19, r31
    246c:	09 f0       	breq	.+2      	; 0x2470 <__vector_5+0xbe>
    246e:	4c c0       	rjmp	.+152    	; 0x2508 <__vector_5+0x156>
    2470:	4a 17       	cp	r20, r26
    2472:	09 f0       	breq	.+2      	; 0x2476 <__vector_5+0xc4>
    2474:	49 c0       	rjmp	.+146    	; 0x2508 <__vector_5+0x156>
    2476:	5b 17       	cp	r21, r27
    2478:	09 f0       	breq	.+2      	; 0x247c <__vector_5+0xca>
    247a:	46 c0       	rjmp	.+140    	; 0x2508 <__vector_5+0x156>
    247c:	e1 17       	cp	r30, r17
    247e:	09 f0       	breq	.+2      	; 0x2482 <__vector_5+0xd0>
    2480:	43 c0       	rjmp	.+134    	; 0x2508 <__vector_5+0x156>
    2482:	f0 16       	cp	r15, r16
    2484:	09 f0       	breq	.+2      	; 0x2488 <__vector_5+0xd6>
    2486:	40 c0       	rjmp	.+128    	; 0x2508 <__vector_5+0x156>
   {
      //set the timer value to the remaining timing
      TCNT2_R=((T2_TICKS-1)-Gu32_T2LastOVTicks);
    2488:	80 91 fd 01 	lds	r24, 0x01FD
    248c:	80 95       	com	r24
    248e:	84 bd       	out	0x24, r24	; 36
      //increase the overflow counter
      Gu32_T2CurrentOVCount++;
    2490:	a6 2f       	mov	r26, r22
    2492:	af 5f       	subi	r26, 0xFF	; 255
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	a6 17       	cp	r26, r22
    2498:	08 f0       	brcs	.+2      	; 0x249c <__vector_5+0xea>
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	f8 2f       	mov	r31, r24
    249e:	f9 0f       	add	r31, r25
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	f9 17       	cp	r31, r25
    24a4:	08 f0       	brcs	.+2      	; 0x24a8 <__vector_5+0xf6>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	78 2f       	mov	r23, r24
    24aa:	72 0f       	add	r23, r18
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	72 17       	cp	r23, r18
    24b0:	08 f0       	brcs	.+2      	; 0x24b4 <__vector_5+0x102>
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	68 2f       	mov	r22, r24
    24b6:	63 0f       	add	r22, r19
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	63 17       	cp	r22, r19
    24bc:	08 f0       	brcs	.+2      	; 0x24c0 <__vector_5+0x10e>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	38 2f       	mov	r19, r24
    24c2:	34 0f       	add	r19, r20
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	34 17       	cp	r19, r20
    24c8:	08 f0       	brcs	.+2      	; 0x24cc <__vector_5+0x11a>
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	28 2f       	mov	r18, r24
    24ce:	25 0f       	add	r18, r21
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	25 17       	cp	r18, r21
    24d4:	08 f0       	brcs	.+2      	; 0x24d8 <__vector_5+0x126>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	98 2f       	mov	r25, r24
    24da:	9e 0f       	add	r25, r30
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	9e 17       	cp	r25, r30
    24e0:	08 f0       	brcs	.+2      	; 0x24e4 <__vector_5+0x132>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	8f 0d       	add	r24, r15
    24e6:	a0 93 f5 01 	sts	0x01F5, r26
    24ea:	f0 93 f6 01 	sts	0x01F6, r31
    24ee:	70 93 f7 01 	sts	0x01F7, r23
    24f2:	60 93 f8 01 	sts	0x01F8, r22
    24f6:	30 93 f9 01 	sts	0x01F9, r19
    24fa:	20 93 fa 01 	sts	0x01FA, r18
    24fe:	90 93 fb 01 	sts	0x01FB, r25
    2502:	80 93 fc 01 	sts	0x01FC, r24
    2506:	17 c0       	rjmp	.+46     	; 0x2536 <__vector_5+0x184>
   }
   //if the time is up
   else
   {
      //reset the overflow counter
      Gu32_T2CurrentOVCount=0;
    2508:	10 92 f5 01 	sts	0x01F5, r1
    250c:	10 92 f6 01 	sts	0x01F6, r1
    2510:	10 92 f7 01 	sts	0x01F7, r1
    2514:	10 92 f8 01 	sts	0x01F8, r1
    2518:	10 92 f9 01 	sts	0x01F9, r1
    251c:	10 92 fa 01 	sts	0x01FA, r1
    2520:	10 92 fb 01 	sts	0x01FB, r1
    2524:	10 92 fc 01 	sts	0x01FC, r1
      //check if the global pointer to function holds a valid function address
      if (G_fptr2 != NULLPTR)
    2528:	e0 91 eb 01 	lds	r30, 0x01EB
    252c:	f0 91 ec 01 	lds	r31, 0x01EC
    2530:	30 97       	sbiw	r30, 0x00	; 0
    2532:	09 f0       	breq	.+2      	; 0x2536 <__vector_5+0x184>
      {
         //call the function
         G_fptr2();
    2534:	09 95       	icall
      }
   }
}
    2536:	ff 91       	pop	r31
    2538:	ef 91       	pop	r30
    253a:	bf 91       	pop	r27
    253c:	af 91       	pop	r26
    253e:	9f 91       	pop	r25
    2540:	8f 91       	pop	r24
    2542:	7f 91       	pop	r23
    2544:	6f 91       	pop	r22
    2546:	5f 91       	pop	r21
    2548:	4f 91       	pop	r20
    254a:	3f 91       	pop	r19
    254c:	2f 91       	pop	r18
    254e:	1f 91       	pop	r17
    2550:	0f 91       	pop	r16
    2552:	ff 90       	pop	r15
    2554:	ef 90       	pop	r14
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <PWM_Init>:
* Parameters	: strPWMConfigType
* Return Value	: enuErrorStatus_t
* Description  : Initialize the PWM module according to the configuration
*************************************************************************************************/
enuErrorStatus_t PWM_Init(strPWMConfigType_t* strPWMConfigType)
{
    2560:	dc 01       	movw	r26, r24
	enuErrorStatus_t enuRetVar;
	
	if(((((strPWMConfigType->enuPWMModule == PWM0) 			|| (strPWMConfigType->enuPWMModule == PWM2)) 											&&
    2562:	ec 91       	ld	r30, X
    2564:	ee 23       	and	r30, r30
    2566:	11 f0       	breq	.+4      	; 0x256c <PWM_Init+0xc>
    2568:	e3 30       	cpi	r30, 0x03	; 3
    256a:	39 f4       	brne	.+14     	; 0x257a <PWM_Init+0x1a>
    256c:	11 96       	adiw	r26, 0x01	; 1
    256e:	8c 91       	ld	r24, X
    2570:	11 97       	sbiw	r26, 0x01	; 1
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	69 f0       	breq	.+26     	; 0x2590 <PWM_Init+0x30>
    2576:	85 30       	cpi	r24, 0x05	; 5
    2578:	59 f0       	breq	.+22     	; 0x2590 <PWM_Init+0x30>
    257a:	8e 2f       	mov	r24, r30
    257c:	81 50       	subi	r24, 0x01	; 1
    257e:	82 30       	cpi	r24, 0x02	; 2
    2580:	08 f0       	brcs	.+2      	; 0x2584 <PWM_Init+0x24>
    2582:	ca c0       	rjmp	.+404    	; 0x2718 <PWM_Init+0x1b8>
    2584:	11 96       	adiw	r26, 0x01	; 1
    2586:	8c 91       	ld	r24, X
    2588:	11 97       	sbiw	r26, 0x01	; 1
    258a:	8f 30       	cpi	r24, 0x0F	; 15
    258c:	08 f0       	brcs	.+2      	; 0x2590 <PWM_Init+0x30>
    258e:	c4 c0       	rjmp	.+392    	; 0x2718 <PWM_Init+0x1b8>
    2590:	12 96       	adiw	r26, 0x02	; 2
    2592:	2c 91       	ld	r18, X
    2594:	12 97       	sbiw	r26, 0x02	; 2
    2596:	22 23       	and	r18, r18
    2598:	29 f0       	breq	.+10     	; 0x25a4 <PWM_Init+0x44>
    259a:	23 30       	cpi	r18, 0x03	; 3
    259c:	19 f0       	breq	.+6      	; 0x25a4 <PWM_Init+0x44>
    259e:	22 30       	cpi	r18, 0x02	; 2
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <PWM_Init+0x44>
    25a2:	ba c0       	rjmp	.+372    	; 0x2718 <PWM_Init+0x1b8>
    25a4:	13 96       	adiw	r26, 0x03	; 3
    25a6:	3c 91       	ld	r19, X
    25a8:	13 97       	sbiw	r26, 0x03	; 3
    25aa:	36 30       	cpi	r19, 0x06	; 6
    25ac:	08 f0       	brcs	.+2      	; 0x25b0 <PWM_Init+0x50>
    25ae:	b4 c0       	rjmp	.+360    	; 0x2718 <PWM_Init+0x1b8>
		  ((strPWMConfigType->enuPWMMode >= PWM_MODE_MIN_VALUE) && (strPWMConfigType->enuPWMMode < PWM_MODE_MAX_VALUE)))) 					&&
	   ((strPWMConfigType->enuPWMCompareOutputMode == NORMAL_OPERATION)	|| (strPWMConfigType->enuPWMCompareOutputMode == INVERTED_PWM) ||
		 (strPWMConfigType->enuPWMCompareOutputMode == NON_INVERTED_PWM))	&&
		(strPWMConfigType->enuPWMClock >= PWM_CLOCK_MIN_VALUE)				&& (strPWMConfigType->enuPWMClock < PWM_CLOCK_MAX_VALUE))
	{
		switch(strPWMConfigType->enuPWMModule)
    25b0:	e1 30       	cpi	r30, 0x01	; 1
    25b2:	91 f1       	breq	.+100    	; 0x2618 <PWM_Init+0xb8>
    25b4:	e1 30       	cpi	r30, 0x01	; 1
    25b6:	38 f0       	brcs	.+14     	; 0x25c6 <PWM_Init+0x66>
    25b8:	e2 30       	cpi	r30, 0x02	; 2
    25ba:	09 f4       	brne	.+2      	; 0x25be <PWM_Init+0x5e>
    25bc:	58 c0       	rjmp	.+176    	; 0x266e <PWM_Init+0x10e>
    25be:	e3 30       	cpi	r30, 0x03	; 3
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <PWM_Init+0x64>
    25c2:	a4 c0       	rjmp	.+328    	; 0x270c <PWM_Init+0x1ac>
    25c4:	7c c0       	rjmp	.+248    	; 0x26be <PWM_Init+0x15e>
		{
			case PWM0:
				/* Selecting the PWM module mode */
				if(strPWMConfigType->enuPWMMode == PC_PWM_8_BITS)
    25c6:	11 96       	adiw	r26, 0x01	; 1
    25c8:	8c 91       	ld	r24, X
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	31 f4       	brne	.+12     	; 0x25da <PWM_Init+0x7a>
				{
					/* Selecting PC PWM mode */
					ASSIGN_BIT(TCCR0_R, PWM_TC0_WGM00, PWM_WGM_VALUE_HIGH);
    25ce:	83 b7       	in	r24, 0x33	; 51
    25d0:	80 64       	ori	r24, 0x40	; 64
    25d2:	83 bf       	out	0x33, r24	; 51
					ASSIGN_BIT(TCCR0_R, PWM_TC0_WGM01, PWM_WGM_VALUE_LOW);
    25d4:	83 b7       	in	r24, 0x33	; 51
    25d6:	87 7f       	andi	r24, 0xF7	; 247
    25d8:	07 c0       	rjmp	.+14     	; 0x25e8 <PWM_Init+0x88>
				}
				else if(strPWMConfigType->enuPWMMode == FAST_PWM_8_BITS)
    25da:	85 30       	cpi	r24, 0x05	; 5
    25dc:	31 f4       	brne	.+12     	; 0x25ea <PWM_Init+0x8a>
				{
					/* Selecting Fast PWM mode */
					ASSIGN_BIT(TCCR0_R, PWM_TC0_WGM00, PWM_WGM_VALUE_HIGH);
    25de:	83 b7       	in	r24, 0x33	; 51
    25e0:	80 64       	ori	r24, 0x40	; 64
    25e2:	83 bf       	out	0x33, r24	; 51
					ASSIGN_BIT(TCCR0_R, PWM_TC0_WGM01, PWM_WGM_VALUE_HIGH);
    25e4:	83 b7       	in	r24, 0x33	; 51
    25e6:	88 60       	ori	r24, 0x08	; 8
    25e8:	83 bf       	out	0x33, r24	; 51
				}
				else
				{
				}
				/* Selecting the behavior of the compare match mode output (Inverted or Non-inverted PWM) */
				ASSIGN_BITS(TCCR0_R, PWM_TC0_COMPARE_OUTPUT_MODE_START_BIT, strPWMConfigType->enuPWMCompareOutputMode, PWM_TC0_COMPARE_OUTPUT_MODE_MASK);
    25ea:	83 b7       	in	r24, 0x33	; 51
    25ec:	92 2f       	mov	r25, r18
    25ee:	92 95       	swap	r25
    25f0:	90 7f       	andi	r25, 0xF0	; 240
    25f2:	8f 7c       	andi	r24, 0xCF	; 207
    25f4:	98 2b       	or	r25, r24
    25f6:	93 bf       	out	0x33, r25	; 51
				/* Selecting the pre-configured clock prescaler value */
				ASSIGN_BITS(TCCR0_R, PWM_CLOCK_SELECT_START_BIT, strPWMConfigType->enuPWMClock, PWM_CLOCK_SELECT_MASK);
    25f8:	83 b7       	in	r24, 0x33	; 51
    25fa:	88 7f       	andi	r24, 0xF8	; 248
    25fc:	83 2b       	or	r24, r19
    25fe:	83 bf       	out	0x33, r24	; 51
				/* Stopping the PWM signal at the beginning of initialization phase */
				if(strPWMConfigType->enuPWMCompareOutputMode == INVERTED_PWM)
    2600:	23 30       	cpi	r18, 0x03	; 3
    2602:	19 f4       	brne	.+6      	; 0x260a <PWM_Init+0xaa>
				{
					CLEAR_BITS(OCR0_R, PWM_TC0_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC0_COMPARE_OUTPUT_REGISTER_MASK);
    2604:	8c b7       	in	r24, 0x3c	; 60
    2606:	1c be       	out	0x3c, r1	; 60
    2608:	81 c0       	rjmp	.+258    	; 0x270c <PWM_Init+0x1ac>
				}
				else if(strPWMConfigType->enuPWMCompareOutputMode == NON_INVERTED_PWM)
    260a:	22 30       	cpi	r18, 0x02	; 2
    260c:	09 f0       	breq	.+2      	; 0x2610 <PWM_Init+0xb0>
    260e:	7e c0       	rjmp	.+252    	; 0x270c <PWM_Init+0x1ac>
				{
					SET_BITS(OCR0_R, PWM_TC0_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC0_COMPARE_OUTPUT_REGISTER_MASK);
    2610:	8c b7       	in	r24, 0x3c	; 60
    2612:	8f ef       	ldi	r24, 0xFF	; 255
    2614:	8c bf       	out	0x3c, r24	; 60
    2616:	7a c0       	rjmp	.+244    	; 0x270c <PWM_Init+0x1ac>
				{
				}
				break;
			case PWM1A:
				/* Selecting the PWM module mode */
				ASSIGN_BITS(TCCR1A_R, PWM_TC1_WGM10_WGM11_START_BIT, strPWMConfigType->enuPWMMode, PWM_TC1_WGM10_WGM11_MASK);
    2618:	8f b5       	in	r24, 0x2f	; 47
    261a:	11 96       	adiw	r26, 0x01	; 1
    261c:	9c 91       	ld	r25, X
    261e:	8c 7f       	andi	r24, 0xFC	; 252
    2620:	89 2b       	or	r24, r25
    2622:	8f bd       	out	0x2f, r24	; 47
				ASSIGN_BITS(TCCR1B_R, PWM_TC1_WGM12_WGM13_START_BIT, strPWMConfigType->enuPWMMode, PWM_TC1_WGM12_WGM13_MASK);
    2624:	8e b5       	in	r24, 0x2e	; 46
    2626:	99 0f       	add	r25, r25
    2628:	99 0f       	add	r25, r25
    262a:	99 0f       	add	r25, r25
    262c:	8f 79       	andi	r24, 0x9F	; 159
    262e:	98 2b       	or	r25, r24
    2630:	9e bd       	out	0x2e, r25	; 46
				/* Selecting the behavior of the compare match mode output for channel A (Inverted or Non-inverted PWM) */
				ASSIGN_BITS(TCCR1A_R, PWM_TC1A_COMPARE_OUTPUT_MODE_START_BIT, strPWMConfigType->enuPWMCompareOutputMode, PWM_TC1A_COMPARE_OUTPUT_MODE_MASK);
    2632:	8f b5       	in	r24, 0x2f	; 47
    2634:	92 2f       	mov	r25, r18
    2636:	92 95       	swap	r25
    2638:	99 0f       	add	r25, r25
    263a:	99 0f       	add	r25, r25
    263c:	90 7c       	andi	r25, 0xC0	; 192
    263e:	8f 73       	andi	r24, 0x3F	; 63
    2640:	98 2b       	or	r25, r24
    2642:	9f bd       	out	0x2f, r25	; 47
				/* Selecting the pre-configured clock prescaler value */
				ASSIGN_BITS(TCCR1B_R, PWM_CLOCK_SELECT_START_BIT, strPWMConfigType->enuPWMClock, PWM_CLOCK_SELECT_MASK);
    2644:	8e b5       	in	r24, 0x2e	; 46
    2646:	88 7f       	andi	r24, 0xF8	; 248
    2648:	83 2b       	or	r24, r19
    264a:	8e bd       	out	0x2e, r24	; 46
				/* Stopping the PWM signal at the beginning of initialization phase */
				if(strPWMConfigType->enuPWMCompareOutputMode == INVERTED_PWM)
    264c:	23 30       	cpi	r18, 0x03	; 3
    264e:	29 f4       	brne	.+10     	; 0x265a <PWM_Init+0xfa>
				{
					CLEAR_BITS(OCR1A_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    2650:	8a b5       	in	r24, 0x2a	; 42
    2652:	9b b5       	in	r25, 0x2b	; 43
    2654:	1b bc       	out	0x2b, r1	; 43
    2656:	1a bc       	out	0x2a, r1	; 42
    2658:	59 c0       	rjmp	.+178    	; 0x270c <PWM_Init+0x1ac>
				}
				else if(strPWMConfigType->enuPWMCompareOutputMode == NON_INVERTED_PWM)
    265a:	22 30       	cpi	r18, 0x02	; 2
    265c:	09 f0       	breq	.+2      	; 0x2660 <PWM_Init+0x100>
    265e:	56 c0       	rjmp	.+172    	; 0x270c <PWM_Init+0x1ac>
				{
					SET_BITS(OCR1A_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    2660:	8a b5       	in	r24, 0x2a	; 42
    2662:	9b b5       	in	r25, 0x2b	; 43
    2664:	8f ef       	ldi	r24, 0xFF	; 255
    2666:	9f ef       	ldi	r25, 0xFF	; 255
    2668:	9b bd       	out	0x2b, r25	; 43
    266a:	8a bd       	out	0x2a, r24	; 42
    266c:	4f c0       	rjmp	.+158    	; 0x270c <PWM_Init+0x1ac>
				{
				}
				break;
			case PWM1B:
				/* Selecting the PWM module mode */
				ASSIGN_BITS(TCCR1A_R, PWM_TC1_WGM10_WGM11_START_BIT, strPWMConfigType->enuPWMMode, PWM_TC1_WGM10_WGM11_MASK);
    266e:	8f b5       	in	r24, 0x2f	; 47
    2670:	11 96       	adiw	r26, 0x01	; 1
    2672:	9c 91       	ld	r25, X
    2674:	8c 7f       	andi	r24, 0xFC	; 252
    2676:	89 2b       	or	r24, r25
    2678:	8f bd       	out	0x2f, r24	; 47
				ASSIGN_BITS(TCCR1B_R, PWM_TC1_WGM12_WGM13_START_BIT, strPWMConfigType->enuPWMMode, PWM_TC1_WGM12_WGM13_MASK);
    267a:	8e b5       	in	r24, 0x2e	; 46
    267c:	99 0f       	add	r25, r25
    267e:	99 0f       	add	r25, r25
    2680:	99 0f       	add	r25, r25
    2682:	8f 79       	andi	r24, 0x9F	; 159
    2684:	98 2b       	or	r25, r24
    2686:	9e bd       	out	0x2e, r25	; 46
				/* Selecting the behavior of the compare match mode output for channel B (Inverted or Non-inverted PWM) */
				ASSIGN_BITS(TCCR1A_R, PWM_TC1B_COMPARE_OUTPUT_MODE_START_BIT, strPWMConfigType->enuPWMCompareOutputMode, PWM_TC1B_COMPARE_OUTPUT_MODE_MASK);
    2688:	8f b5       	in	r24, 0x2f	; 47
    268a:	92 2f       	mov	r25, r18
    268c:	92 95       	swap	r25
    268e:	90 7f       	andi	r25, 0xF0	; 240
    2690:	8f 7c       	andi	r24, 0xCF	; 207
    2692:	98 2b       	or	r25, r24
    2694:	9f bd       	out	0x2f, r25	; 47
				/* Selecting the pre-configured clock prescaler value */
				ASSIGN_BITS(TCCR1B_R, PWM_CLOCK_SELECT_START_BIT, strPWMConfigType->enuPWMClock, PWM_CLOCK_SELECT_MASK);
    2696:	8e b5       	in	r24, 0x2e	; 46
    2698:	88 7f       	andi	r24, 0xF8	; 248
    269a:	83 2b       	or	r24, r19
    269c:	8e bd       	out	0x2e, r24	; 46
				/* Stopping the PWM signal at the beginning of initialization phase */
				if(strPWMConfigType->enuPWMCompareOutputMode == INVERTED_PWM)
    269e:	23 30       	cpi	r18, 0x03	; 3
    26a0:	29 f4       	brne	.+10     	; 0x26ac <PWM_Init+0x14c>
				{
					CLEAR_BITS(OCR1B_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    26a2:	88 b5       	in	r24, 0x28	; 40
    26a4:	99 b5       	in	r25, 0x29	; 41
    26a6:	19 bc       	out	0x29, r1	; 41
    26a8:	18 bc       	out	0x28, r1	; 40
    26aa:	30 c0       	rjmp	.+96     	; 0x270c <PWM_Init+0x1ac>
				}
				else if(strPWMConfigType->enuPWMCompareOutputMode == NON_INVERTED_PWM)
    26ac:	22 30       	cpi	r18, 0x02	; 2
    26ae:	71 f5       	brne	.+92     	; 0x270c <PWM_Init+0x1ac>
				{
					SET_BITS(OCR1B_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    26b0:	88 b5       	in	r24, 0x28	; 40
    26b2:	99 b5       	in	r25, 0x29	; 41
    26b4:	8f ef       	ldi	r24, 0xFF	; 255
    26b6:	9f ef       	ldi	r25, 0xFF	; 255
    26b8:	99 bd       	out	0x29, r25	; 41
    26ba:	88 bd       	out	0x28, r24	; 40
    26bc:	27 c0       	rjmp	.+78     	; 0x270c <PWM_Init+0x1ac>
				{
				}
				break;
			case PWM2:
				/* Selecting the PWM module mode */
				if(strPWMConfigType->enuPWMMode == PC_PWM_8_BITS)
    26be:	11 96       	adiw	r26, 0x01	; 1
    26c0:	8c 91       	ld	r24, X
    26c2:	81 30       	cpi	r24, 0x01	; 1
    26c4:	31 f4       	brne	.+12     	; 0x26d2 <PWM_Init+0x172>
				{
					/* Selecting PC PWM mode */
					ASSIGN_BIT(TCCR2_R, PWM_TC2_WGM20, PWM_WGM_VALUE_HIGH);
    26c6:	85 b5       	in	r24, 0x25	; 37
    26c8:	80 64       	ori	r24, 0x40	; 64
    26ca:	85 bd       	out	0x25, r24	; 37
					ASSIGN_BIT(TCCR2_R, PWM_TC2_WGM21, PWM_WGM_VALUE_LOW);
    26cc:	85 b5       	in	r24, 0x25	; 37
    26ce:	87 7f       	andi	r24, 0xF7	; 247
    26d0:	07 c0       	rjmp	.+14     	; 0x26e0 <PWM_Init+0x180>
				}
				else if(strPWMConfigType->enuPWMMode == FAST_PWM_8_BITS)
    26d2:	85 30       	cpi	r24, 0x05	; 5
    26d4:	31 f4       	brne	.+12     	; 0x26e2 <PWM_Init+0x182>
				{
					/* Selecting Fast PWM mode */
					ASSIGN_BIT(TCCR2_R, PWM_TC2_WGM20, PWM_WGM_VALUE_HIGH);
    26d6:	85 b5       	in	r24, 0x25	; 37
    26d8:	80 64       	ori	r24, 0x40	; 64
    26da:	85 bd       	out	0x25, r24	; 37
					ASSIGN_BIT(TCCR2_R, PWM_TC2_WGM21, PWM_WGM_VALUE_HIGH);
    26dc:	85 b5       	in	r24, 0x25	; 37
    26de:	88 60       	ori	r24, 0x08	; 8
    26e0:	85 bd       	out	0x25, r24	; 37
				}
				else
				{
				}
				/* Selecting the behavior of the compare match mode output (Inverted or Non-inverted PWM) */
				ASSIGN_BITS(TCCR2_R, PWM_TC2_COMPARE_OUTPUT_MODE_START_BIT, strPWMConfigType->enuPWMCompareOutputMode, PWM_TC2_COMPARE_OUTPUT_MODE_MASK);
    26e2:	85 b5       	in	r24, 0x25	; 37
    26e4:	92 2f       	mov	r25, r18
    26e6:	92 95       	swap	r25
    26e8:	90 7f       	andi	r25, 0xF0	; 240
    26ea:	8f 7c       	andi	r24, 0xCF	; 207
    26ec:	98 2b       	or	r25, r24
    26ee:	95 bd       	out	0x25, r25	; 37
				/* Selecting the pre-configured clock prescaler value */
				ASSIGN_BITS(TCCR2_R, PWM_CLOCK_SELECT_START_BIT, strPWMConfigType->enuPWMClock, PWM_CLOCK_SELECT_MASK);
    26f0:	85 b5       	in	r24, 0x25	; 37
    26f2:	88 7f       	andi	r24, 0xF8	; 248
    26f4:	83 2b       	or	r24, r19
    26f6:	85 bd       	out	0x25, r24	; 37
				/* Stopping the PWM signal at the beginning of initialization phase */
				if(strPWMConfigType->enuPWMCompareOutputMode == INVERTED_PWM)
    26f8:	23 30       	cpi	r18, 0x03	; 3
    26fa:	19 f4       	brne	.+6      	; 0x2702 <PWM_Init+0x1a2>
				{
					CLEAR_BITS(OCR2_R, PWM_TC0_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC0_COMPARE_OUTPUT_REGISTER_MASK);
    26fc:	83 b5       	in	r24, 0x23	; 35
    26fe:	13 bc       	out	0x23, r1	; 35
    2700:	05 c0       	rjmp	.+10     	; 0x270c <PWM_Init+0x1ac>
				}
				else if(strPWMConfigType->enuPWMCompareOutputMode == NON_INVERTED_PWM)
    2702:	22 30       	cpi	r18, 0x02	; 2
    2704:	19 f4       	brne	.+6      	; 0x270c <PWM_Init+0x1ac>
				{
					SET_BITS(OCR2_R, PWM_TC0_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC0_COMPARE_OUTPUT_REGISTER_MASK);
    2706:	83 b5       	in	r24, 0x23	; 35
    2708:	8f ef       	ldi	r24, 0xFF	; 255
    270a:	83 bd       	out	0x23, r24	; 35
				}
				break;
			default:
				break;
		}
		aenuPWMState[strPWMConfigType->enuPWMModule] = PWM_INIT_DONE;
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	ea 5f       	subi	r30, 0xFA	; 250
    2710:	fd 4f       	sbci	r31, 0xFD	; 253
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	80 83       	st	Z, r24
    2716:	08 95       	ret
*************************************************************************************************/
enuErrorStatus_t PWM_Init(strPWMConfigType_t* strPWMConfigType)
{
	enuErrorStatus_t enuRetVar;
	
	if(((((strPWMConfigType->enuPWMModule == PWM0) 			|| (strPWMConfigType->enuPWMModule == PWM2)) 											&&
    2718:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
    271a:	08 95       	ret

0000271c <PWM_Start>:
* Parameters	: u8GroupId, u8DutyCycle
* Return Value	: enuErrorStatus_t
* Description  : Start the PWM signal with the specified duty cycle
*************************************************************************************************/
enuErrorStatus_t PWM_Start(uint8_t u8GroupId, uint8_t u8DutyCycle)
{
    271c:	1f 93       	push	r17
	enuErrorStatus_t enuRetVar;
	uint16_t u16PWMRegisterValue;
	
	if((aenuPWMState[astrPWMConfigParameters[u8GroupId].enuPWMModule] == PWM_INIT_DONE) &&
    271e:	e8 2f       	mov	r30, r24
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	ee 0f       	add	r30, r30
    2724:	ff 1f       	adc	r31, r31
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	e3 58       	subi	r30, 0x83	; 131
    272c:	fe 4f       	sbci	r31, 0xFE	; 254
    272e:	10 81       	ld	r17, Z
    2730:	e1 2f       	mov	r30, r17
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	ea 5f       	subi	r30, 0xFA	; 250
    2736:	fd 4f       	sbci	r31, 0xFD	; 253
    2738:	80 81       	ld	r24, Z
    273a:	81 30       	cpi	r24, 0x01	; 1
    273c:	69 f5       	brne	.+90     	; 0x2798 <PWM_Start+0x7c>
    273e:	65 36       	cpi	r22, 0x65	; 101
    2740:	58 f5       	brcc	.+86     	; 0x2798 <PWM_Start+0x7c>
		(u8DutyCycle >= PWM_DUTY_CYCLE_MIN_VALUE) && (u8DutyCycle <= PWM_DUTY_CYCLE_MAX_VALUE))
	{
		/* Calculating the PWM register value required according to the equation */
		u16PWMRegisterValue = PWM_CALCULATE_REGISTER_VALUE(PWM_FREQUENCY_10K, u8DutyCycle);
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	20 e1       	ldi	r18, 0x10	; 16
    274a:	37 e2       	ldi	r19, 0x27	; 39
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
    2754:	24 e6       	ldi	r18, 0x64	; 100
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
		switch(astrPWMConfigParameters[u8GroupId].enuPWMModule)
    2760:	11 30       	cpi	r17, 0x01	; 1
    2762:	49 f0       	breq	.+18     	; 0x2776 <PWM_Start+0x5a>
    2764:	11 30       	cpi	r17, 0x01	; 1
    2766:	28 f0       	brcs	.+10     	; 0x2772 <PWM_Start+0x56>
    2768:	12 30       	cpi	r17, 0x02	; 2
    276a:	61 f0       	breq	.+24     	; 0x2784 <PWM_Start+0x68>
    276c:	13 30       	cpi	r17, 0x03	; 3
    276e:	81 f4       	brne	.+32     	; 0x2790 <PWM_Start+0x74>
    2770:	11 c0       	rjmp	.+34     	; 0x2794 <PWM_Start+0x78>
		{
			case PWM0:
				/* Loading the PWM register value into OCR0 register */
				OCR0_R = (uint8_t)u16PWMRegisterValue;
    2772:	2c bf       	out	0x3c, r18	; 60
    2774:	0d c0       	rjmp	.+26     	; 0x2790 <PWM_Start+0x74>
				break;
			case PWM1A:
				ICR1_R = PWM_FREQUENCY_10K;
    2776:	80 e1       	ldi	r24, 0x10	; 16
    2778:	97 e2       	ldi	r25, 0x27	; 39
    277a:	97 bd       	out	0x27, r25	; 39
    277c:	86 bd       	out	0x26, r24	; 38
				/* Loading the PWM register value into OCR1A register */
				OCR1A_R = u16PWMRegisterValue;
    277e:	3b bd       	out	0x2b, r19	; 43
    2780:	2a bd       	out	0x2a, r18	; 42
    2782:	06 c0       	rjmp	.+12     	; 0x2790 <PWM_Start+0x74>
				break;
			case PWM1B:
				ICR1_R = PWM_FREQUENCY_10K;
    2784:	80 e1       	ldi	r24, 0x10	; 16
    2786:	97 e2       	ldi	r25, 0x27	; 39
    2788:	97 bd       	out	0x27, r25	; 39
    278a:	86 bd       	out	0x26, r24	; 38
				/* Loading the PWM register value into OCR1B register */
				OCR1B_R = u16PWMRegisterValue;
    278c:	39 bd       	out	0x29, r19	; 41
    278e:	28 bd       	out	0x28, r18	; 40
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	03 c0       	rjmp	.+6      	; 0x279a <PWM_Start+0x7e>
				break;
			case PWM2:
				/* Loading the PWM register value into OCR2 register */
				OCR2_R = (uint8_t)u16PWMRegisterValue;
    2794:	23 bd       	out	0x23, r18	; 35
    2796:	fc cf       	rjmp	.-8      	; 0x2790 <PWM_Start+0x74>
    2798:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
    279a:	1f 91       	pop	r17
    279c:	08 95       	ret

0000279e <PWM_Stop>:
*************************************************************************************************/
enuErrorStatus_t PWM_Stop(uint8_t u8GroupId)
{
	enuErrorStatus_t enuRetVar = E_OK;
	
	if(aenuPWMState[astrPWMConfigParameters[u8GroupId].enuPWMModule] == PWM_INIT_DONE)
    279e:	a8 2f       	mov	r26, r24
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	fd 01       	movw	r30, r26
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	ee 0f       	add	r30, r30
    27aa:	ff 1f       	adc	r31, r31
    27ac:	e3 58       	subi	r30, 0x83	; 131
    27ae:	fe 4f       	sbci	r31, 0xFE	; 254
    27b0:	90 81       	ld	r25, Z
    27b2:	e9 2f       	mov	r30, r25
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	ea 5f       	subi	r30, 0xFA	; 250
    27b8:	fd 4f       	sbci	r31, 0xFD	; 253
    27ba:	80 81       	ld	r24, Z
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	11 f0       	breq	.+4      	; 0x27c4 <PWM_Stop+0x26>
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	08 95       	ret
	{
		switch(astrPWMConfigParameters[u8GroupId].enuPWMModule)
    27c4:	91 30       	cpi	r25, 0x01	; 1
    27c6:	d9 f0       	breq	.+54     	; 0x27fe <PWM_Stop+0x60>
    27c8:	91 30       	cpi	r25, 0x01	; 1
    27ca:	30 f0       	brcs	.+12     	; 0x27d8 <PWM_Stop+0x3a>
    27cc:	92 30       	cpi	r25, 0x02	; 2
    27ce:	71 f1       	breq	.+92     	; 0x282c <PWM_Stop+0x8e>
    27d0:	93 30       	cpi	r25, 0x03	; 3
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <PWM_Stop+0x38>
    27d4:	55 c0       	rjmp	.+170    	; 0x2880 <PWM_Stop+0xe2>
    27d6:	41 c0       	rjmp	.+130    	; 0x285a <PWM_Stop+0xbc>
		{
			case PWM0:
				/* Stopping the PWM signal */
				if(astrPWMConfigParameters[u8GroupId].enuPWMCompareOutputMode == INVERTED_PWM)
    27d8:	aa 0f       	add	r26, r26
    27da:	bb 1f       	adc	r27, r27
    27dc:	aa 0f       	add	r26, r26
    27de:	bb 1f       	adc	r27, r27
    27e0:	a1 58       	subi	r26, 0x81	; 129
    27e2:	be 4f       	sbci	r27, 0xFE	; 254
    27e4:	8c 91       	ld	r24, X
    27e6:	83 30       	cpi	r24, 0x03	; 3
    27e8:	19 f4       	brne	.+6      	; 0x27f0 <PWM_Stop+0x52>
				{
					CLEAR_BITS(OCR0_R, PWM_TC0_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC0_COMPARE_OUTPUT_REGISTER_MASK);
    27ea:	8c b7       	in	r24, 0x3c	; 60
    27ec:	1c be       	out	0x3c, r1	; 60
    27ee:	46 c0       	rjmp	.+140    	; 0x287c <PWM_Stop+0xde>
				}
				else if(astrPWMConfigParameters[u8GroupId].enuPWMCompareOutputMode == NON_INVERTED_PWM)
    27f0:	82 30       	cpi	r24, 0x02	; 2
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <PWM_Stop+0x58>
    27f4:	45 c0       	rjmp	.+138    	; 0x2880 <PWM_Stop+0xe2>
				{
					SET_BITS(OCR0_R, PWM_TC0_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC0_COMPARE_OUTPUT_REGISTER_MASK);
    27f6:	8c b7       	in	r24, 0x3c	; 60
    27f8:	8f ef       	ldi	r24, 0xFF	; 255
    27fa:	8c bf       	out	0x3c, r24	; 60
    27fc:	3f c0       	rjmp	.+126    	; 0x287c <PWM_Stop+0xde>
				{
				}
				break;
			case PWM1A:
				/* Stopping the PWM signal */
				if(astrPWMConfigParameters[u8GroupId].enuPWMCompareOutputMode == INVERTED_PWM)
    27fe:	aa 0f       	add	r26, r26
    2800:	bb 1f       	adc	r27, r27
    2802:	aa 0f       	add	r26, r26
    2804:	bb 1f       	adc	r27, r27
    2806:	a1 58       	subi	r26, 0x81	; 129
    2808:	be 4f       	sbci	r27, 0xFE	; 254
    280a:	8c 91       	ld	r24, X
    280c:	83 30       	cpi	r24, 0x03	; 3
    280e:	29 f4       	brne	.+10     	; 0x281a <PWM_Stop+0x7c>
				{
					CLEAR_BITS(OCR1A_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    2810:	8a b5       	in	r24, 0x2a	; 42
    2812:	9b b5       	in	r25, 0x2b	; 43
    2814:	1b bc       	out	0x2b, r1	; 43
    2816:	1a bc       	out	0x2a, r1	; 42
    2818:	31 c0       	rjmp	.+98     	; 0x287c <PWM_Stop+0xde>
				}
				else if(astrPWMConfigParameters[u8GroupId].enuPWMCompareOutputMode == NON_INVERTED_PWM)
    281a:	82 30       	cpi	r24, 0x02	; 2
    281c:	89 f5       	brne	.+98     	; 0x2880 <PWM_Stop+0xe2>
				{
					SET_BITS(OCR1A_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    281e:	8a b5       	in	r24, 0x2a	; 42
    2820:	9b b5       	in	r25, 0x2b	; 43
    2822:	8f ef       	ldi	r24, 0xFF	; 255
    2824:	9f ef       	ldi	r25, 0xFF	; 255
    2826:	9b bd       	out	0x2b, r25	; 43
    2828:	8a bd       	out	0x2a, r24	; 42
    282a:	28 c0       	rjmp	.+80     	; 0x287c <PWM_Stop+0xde>
				{
				}
				break;
			case PWM1B:
				/* Stopping the PWM signal */
				if(astrPWMConfigParameters[u8GroupId].enuPWMCompareOutputMode == INVERTED_PWM)
    282c:	aa 0f       	add	r26, r26
    282e:	bb 1f       	adc	r27, r27
    2830:	aa 0f       	add	r26, r26
    2832:	bb 1f       	adc	r27, r27
    2834:	a1 58       	subi	r26, 0x81	; 129
    2836:	be 4f       	sbci	r27, 0xFE	; 254
    2838:	8c 91       	ld	r24, X
    283a:	83 30       	cpi	r24, 0x03	; 3
    283c:	29 f4       	brne	.+10     	; 0x2848 <PWM_Stop+0xaa>
				{
					CLEAR_BITS(OCR1B_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    283e:	88 b5       	in	r24, 0x28	; 40
    2840:	99 b5       	in	r25, 0x29	; 41
    2842:	19 bc       	out	0x29, r1	; 41
    2844:	18 bc       	out	0x28, r1	; 40
    2846:	1a c0       	rjmp	.+52     	; 0x287c <PWM_Stop+0xde>
				}
				else if(astrPWMConfigParameters[u8GroupId].enuPWMCompareOutputMode == NON_INVERTED_PWM)
    2848:	82 30       	cpi	r24, 0x02	; 2
    284a:	d1 f4       	brne	.+52     	; 0x2880 <PWM_Stop+0xe2>
				{
					SET_BITS(OCR1B_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    284c:	88 b5       	in	r24, 0x28	; 40
    284e:	99 b5       	in	r25, 0x29	; 41
    2850:	8f ef       	ldi	r24, 0xFF	; 255
    2852:	9f ef       	ldi	r25, 0xFF	; 255
    2854:	99 bd       	out	0x29, r25	; 41
    2856:	88 bd       	out	0x28, r24	; 40
    2858:	11 c0       	rjmp	.+34     	; 0x287c <PWM_Stop+0xde>
				{
				}
				break;
			case PWM2:
				/* Stopping the PWM signal */
				if(astrPWMConfigParameters[u8GroupId].enuPWMCompareOutputMode == INVERTED_PWM)
    285a:	aa 0f       	add	r26, r26
    285c:	bb 1f       	adc	r27, r27
    285e:	aa 0f       	add	r26, r26
    2860:	bb 1f       	adc	r27, r27
    2862:	a1 58       	subi	r26, 0x81	; 129
    2864:	be 4f       	sbci	r27, 0xFE	; 254
    2866:	8c 91       	ld	r24, X
    2868:	83 30       	cpi	r24, 0x03	; 3
    286a:	19 f4       	brne	.+6      	; 0x2872 <PWM_Stop+0xd4>
				{
					CLEAR_BITS(OCR2_R, PWM_TC2_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC2_COMPARE_OUTPUT_REGISTER_MASK);
    286c:	83 b5       	in	r24, 0x23	; 35
    286e:	13 bc       	out	0x23, r1	; 35
    2870:	05 c0       	rjmp	.+10     	; 0x287c <PWM_Stop+0xde>
				}
				else if(astrPWMConfigParameters[u8GroupId].enuPWMCompareOutputMode == NON_INVERTED_PWM)
    2872:	82 30       	cpi	r24, 0x02	; 2
    2874:	29 f4       	brne	.+10     	; 0x2880 <PWM_Stop+0xe2>
				{
					SET_BITS(OCR2_R, PWM_TC2_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC2_COMPARE_OUTPUT_REGISTER_MASK);
    2876:	83 b5       	in	r24, 0x23	; 35
    2878:	8f ef       	ldi	r24, 0xFF	; 255
    287a:	83 bd       	out	0x23, r24	; 35
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	08 95       	ret
    2880:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
    2882:	08 95       	ret

00002884 <EXTINT_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize External Interrupt
************************************************************************************************/
enuErrorStatus_t EXTINT_Init(strEXTINTConfigType_t* strEXTINTConfigType)
{
    2884:	fc 01       	movw	r30, r24
	enuErrorStatus_t enuStatus = E_ERROR;

	if(strEXTINTConfigType->enuEXTINTNum == EXTINT_INT0)
    2886:	80 81       	ld	r24, Z
    2888:	88 23       	and	r24, r24
    288a:	29 f5       	brne	.+74     	; 0x28d6 <EXTINT_Init+0x52>
   {
		switch(strEXTINTConfigType->enuEXTINTSenseControl)
    288c:	81 81       	ldd	r24, Z+1	; 0x01
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	99 f0       	breq	.+38     	; 0x28b8 <EXTINT_Init+0x34>
    2892:	81 30       	cpi	r24, 0x01	; 1
    2894:	28 f0       	brcs	.+10     	; 0x28a0 <EXTINT_Init+0x1c>
    2896:	82 30       	cpi	r24, 0x02	; 2
    2898:	49 f0       	breq	.+18     	; 0x28ac <EXTINT_Init+0x28>
    289a:	83 30       	cpi	r24, 0x03	; 3
    289c:	99 f4       	brne	.+38     	; 0x28c4 <EXTINT_Init+0x40>
    289e:	03 c0       	rjmp	.+6      	; 0x28a6 <EXTINT_Init+0x22>
		{
			case EXT_LOW_MODE :
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    28a0:	85 b7       	in	r24, 0x35	; 53
    28a2:	8e 7f       	andi	r24, 0xFE	; 254
    28a4:	0b c0       	rjmp	.+22     	; 0x28bc <EXTINT_Init+0x38>
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
			  break;
			case EXT_RAISING_MODE :
			 SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    28a6:	85 b7       	in	r24, 0x35	; 53
    28a8:	81 60       	ori	r24, 0x01	; 1
    28aa:	02 c0       	rjmp	.+4      	; 0x28b0 <EXTINT_Init+0x2c>
			 SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
			  break;
			case EXT_FAILLING_MODE :
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    28ac:	85 b7       	in	r24, 0x35	; 53
    28ae:	8e 7f       	andi	r24, 0xFE	; 254
    28b0:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
    28b2:	85 b7       	in	r24, 0x35	; 53
    28b4:	82 60       	ori	r24, 0x02	; 2
    28b6:	05 c0       	rjmp	.+10     	; 0x28c2 <EXTINT_Init+0x3e>
			  break;
			case EXT_CHANGE_MODE :
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    28b8:	85 b7       	in	r24, 0x35	; 53
    28ba:	81 60       	ori	r24, 0x01	; 1
    28bc:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
    28be:	85 b7       	in	r24, 0x35	; 53
    28c0:	8d 7f       	andi	r24, 0xFD	; 253
    28c2:	85 bf       	out	0x35, r24	; 53
			  break;
			default:
				break;
		}
		//Assign the address of the callback function into a temporary variable
		pEXTINT0CallBack = strEXTINTConfigType->pfEXTINTCallBack;
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	90 93 47 02 	sts	0x0247, r25
    28cc:	80 93 46 02 	sts	0x0246, r24
		//Enable peripheral interrupt enable
		SET_BIT(GICR_R, INT0_B);
    28d0:	8b b7       	in	r24, 0x3b	; 59
    28d2:	80 64       	ori	r24, 0x40	; 64
    28d4:	3c c0       	rjmp	.+120    	; 0x294e <EXTINT_Init+0xca>
   }
   else if(strEXTINTConfigType->enuEXTINTNum == EXTINT_INT1)
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	29 f5       	brne	.+74     	; 0x2924 <EXTINT_Init+0xa0>
   {
		switch(strEXTINTConfigType->enuEXTINTSenseControl)
    28da:	81 81       	ldd	r24, Z+1	; 0x01
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	99 f0       	breq	.+38     	; 0x2906 <EXTINT_Init+0x82>
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	28 f0       	brcs	.+10     	; 0x28ee <EXTINT_Init+0x6a>
    28e4:	82 30       	cpi	r24, 0x02	; 2
    28e6:	49 f0       	breq	.+18     	; 0x28fa <EXTINT_Init+0x76>
    28e8:	83 30       	cpi	r24, 0x03	; 3
    28ea:	99 f4       	brne	.+38     	; 0x2912 <EXTINT_Init+0x8e>
    28ec:	03 c0       	rjmp	.+6      	; 0x28f4 <EXTINT_Init+0x70>
		{
			case EXT_LOW_MODE :
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    28ee:	85 b7       	in	r24, 0x35	; 53
    28f0:	8b 7f       	andi	r24, 0xFB	; 251
    28f2:	0b c0       	rjmp	.+22     	; 0x290a <EXTINT_Init+0x86>
				CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
			  break;
			case EXT_RAISING_MODE :
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    28f4:	85 b7       	in	r24, 0x35	; 53
    28f6:	84 60       	ori	r24, 0x04	; 4
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <EXTINT_Init+0x7a>
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
			  break;
			case EXT_FAILLING_MODE :
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    28fa:	85 b7       	in	r24, 0x35	; 53
    28fc:	8b 7f       	andi	r24, 0xFB	; 251
    28fe:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
    2900:	85 b7       	in	r24, 0x35	; 53
    2902:	88 60       	ori	r24, 0x08	; 8
    2904:	05 c0       	rjmp	.+10     	; 0x2910 <EXTINT_Init+0x8c>
			  break;
			case EXT_CHANGE_MODE :
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    2906:	85 b7       	in	r24, 0x35	; 53
    2908:	84 60       	ori	r24, 0x04	; 4
    290a:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
    290c:	85 b7       	in	r24, 0x35	; 53
    290e:	87 7f       	andi	r24, 0xF7	; 247
    2910:	85 bf       	out	0x35, r24	; 53
			  break;
			default:
				break;
		}
		//Assign the address of the callback function into a temporary variable
		pEXTINT1CallBack = strEXTINTConfigType->pfEXTINTCallBack;
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	90 93 43 02 	sts	0x0243, r25
    291a:	80 93 42 02 	sts	0x0242, r24
		//Enable peripheral interrupt enable
		SET_BIT(GICR_R, INT1_B);
    291e:	8b b7       	in	r24, 0x3b	; 59
    2920:	80 68       	ori	r24, 0x80	; 128
    2922:	15 c0       	rjmp	.+42     	; 0x294e <EXTINT_Init+0xca>
   }
   else if (strEXTINTConfigType->enuEXTINTNum == EXTINT_INT2)
    2924:	82 30       	cpi	r24, 0x02	; 2
    2926:	a1 f4       	brne	.+40     	; 0x2950 <EXTINT_Init+0xcc>
   {
		switch(strEXTINTConfigType->enuEXTINTSenseControl)
    2928:	81 81       	ldd	r24, Z+1	; 0x01
    292a:	82 30       	cpi	r24, 0x02	; 2
    292c:	29 f0       	breq	.+10     	; 0x2938 <EXTINT_Init+0xb4>
    292e:	83 30       	cpi	r24, 0x03	; 3
    2930:	31 f4       	brne	.+12     	; 0x293e <EXTINT_Init+0xba>
		{
			case EXT_RAISING_MODE :
				SET_BIT(MCUCSR_R,ISC2_B);
    2932:	84 b7       	in	r24, 0x34	; 52
    2934:	80 64       	ori	r24, 0x40	; 64
    2936:	02 c0       	rjmp	.+4      	; 0x293c <EXTINT_Init+0xb8>
				break;
			case EXT_FAILLING_MODE :
				CLEAR_BIT(MCUCSR_R,ISC2_B);
    2938:	84 b7       	in	r24, 0x34	; 52
    293a:	8f 7b       	andi	r24, 0xBF	; 191
    293c:	84 bf       	out	0x34, r24	; 52
				break;
			default:
				break;
		}
		//Assign the address of the callback function into a temporary variable
		pEXTINT2CallBack = strEXTINTConfigType->pfEXTINTCallBack;
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	93 81       	ldd	r25, Z+3	; 0x03
    2942:	90 93 45 02 	sts	0x0245, r25
    2946:	80 93 44 02 	sts	0x0244, r24
		//Enable peripheral interrupt enable
		SET_BIT(GICR_R, INT2_B);
    294a:	8b b7       	in	r24, 0x3b	; 59
    294c:	80 62       	ori	r24, 0x20	; 32
    294e:	8b bf       	out	0x3b, r24	; 59
   }
   else
   {
   }
   //Enable GIE
	SET_BIT(SREG_R, SREG_I_B);
    2950:	8f b7       	in	r24, 0x3f	; 63
    2952:	80 68       	ori	r24, 0x80	; 128
    2954:	8f bf       	out	0x3f, r24	; 63
	enuStatus = E_OK;
	return enuStatus;
}
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	08 95       	ret

0000295a <EXTINT_SetSenseMode>:
************************************************************************************************/
enuErrorStatus_t EXTINT_SetSenseMode(uint8_t u8GroupId, enuEXTINTSenseControl_t enuEXTINTSenseControl)
{
	enuErrorStatus_t enuStatus = E_ERROR;

	if(astrEXTINTConfigParameters[u8GroupId].enuEXTINTNum == EXTINT_INT0)
    295a:	e8 2f       	mov	r30, r24
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	ee 0f       	add	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	eb 57       	subi	r30, 0x7B	; 123
    2968:	fe 4f       	sbci	r31, 0xFE	; 254
    296a:	e0 81       	ld	r30, Z
    296c:	ee 23       	and	r30, r30
    296e:	d9 f4       	brne	.+54     	; 0x29a6 <EXTINT_SetSenseMode+0x4c>
   {
		switch(enuEXTINTSenseControl)
    2970:	61 30       	cpi	r22, 0x01	; 1
    2972:	99 f0       	breq	.+38     	; 0x299a <EXTINT_SetSenseMode+0x40>
    2974:	61 30       	cpi	r22, 0x01	; 1
    2976:	28 f0       	brcs	.+10     	; 0x2982 <EXTINT_SetSenseMode+0x28>
    2978:	62 30       	cpi	r22, 0x02	; 2
    297a:	49 f0       	breq	.+18     	; 0x298e <EXTINT_SetSenseMode+0x34>
    297c:	63 30       	cpi	r22, 0x03	; 3
    297e:	e9 f5       	brne	.+122    	; 0x29fa <EXTINT_SetSenseMode+0xa0>
    2980:	03 c0       	rjmp	.+6      	; 0x2988 <EXTINT_SetSenseMode+0x2e>
		{
			case EXT_LOW_MODE :
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    2982:	85 b7       	in	r24, 0x35	; 53
    2984:	8e 7f       	andi	r24, 0xFE	; 254
    2986:	0b c0       	rjmp	.+22     	; 0x299e <EXTINT_SetSenseMode+0x44>
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
			  break;
			case EXT_RAISING_MODE :
			 SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    2988:	85 b7       	in	r24, 0x35	; 53
    298a:	81 60       	ori	r24, 0x01	; 1
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <EXTINT_SetSenseMode+0x38>
			 SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
			  break;
			case EXT_FAILLING_MODE :
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    298e:	85 b7       	in	r24, 0x35	; 53
    2990:	8e 7f       	andi	r24, 0xFE	; 254
    2992:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
    2994:	85 b7       	in	r24, 0x35	; 53
    2996:	82 60       	ori	r24, 0x02	; 2
    2998:	22 c0       	rjmp	.+68     	; 0x29de <EXTINT_SetSenseMode+0x84>
			  break;
			case EXT_CHANGE_MODE :
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    299a:	85 b7       	in	r24, 0x35	; 53
    299c:	81 60       	ori	r24, 0x01	; 1
    299e:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
    29a0:	85 b7       	in	r24, 0x35	; 53
    29a2:	8d 7f       	andi	r24, 0xFD	; 253
    29a4:	1c c0       	rjmp	.+56     	; 0x29de <EXTINT_SetSenseMode+0x84>
			  break;
			default:
				break;
		}
   }
   else if(astrEXTINTConfigParameters[u8GroupId].enuEXTINTNum == EXTINT_INT1)
    29a6:	e1 30       	cpi	r30, 0x01	; 1
    29a8:	e1 f4       	brne	.+56     	; 0x29e2 <EXTINT_SetSenseMode+0x88>
   {
		switch(enuEXTINTSenseControl)
    29aa:	61 30       	cpi	r22, 0x01	; 1
    29ac:	99 f0       	breq	.+38     	; 0x29d4 <EXTINT_SetSenseMode+0x7a>
    29ae:	61 30       	cpi	r22, 0x01	; 1
    29b0:	28 f0       	brcs	.+10     	; 0x29bc <EXTINT_SetSenseMode+0x62>
    29b2:	62 30       	cpi	r22, 0x02	; 2
    29b4:	49 f0       	breq	.+18     	; 0x29c8 <EXTINT_SetSenseMode+0x6e>
    29b6:	63 30       	cpi	r22, 0x03	; 3
    29b8:	01 f5       	brne	.+64     	; 0x29fa <EXTINT_SetSenseMode+0xa0>
    29ba:	03 c0       	rjmp	.+6      	; 0x29c2 <EXTINT_SetSenseMode+0x68>
		{
			case EXT_LOW_MODE :
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    29bc:	85 b7       	in	r24, 0x35	; 53
    29be:	8b 7f       	andi	r24, 0xFB	; 251
    29c0:	0b c0       	rjmp	.+22     	; 0x29d8 <EXTINT_SetSenseMode+0x7e>
				CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
			  break;
			case EXT_RAISING_MODE :
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    29c2:	85 b7       	in	r24, 0x35	; 53
    29c4:	84 60       	ori	r24, 0x04	; 4
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <EXTINT_SetSenseMode+0x72>
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
			  break;
			case EXT_FAILLING_MODE :
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    29c8:	85 b7       	in	r24, 0x35	; 53
    29ca:	8b 7f       	andi	r24, 0xFB	; 251
    29cc:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
    29ce:	85 b7       	in	r24, 0x35	; 53
    29d0:	88 60       	ori	r24, 0x08	; 8
    29d2:	05 c0       	rjmp	.+10     	; 0x29de <EXTINT_SetSenseMode+0x84>
			  break;
			case EXT_CHANGE_MODE :
			  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    29d4:	85 b7       	in	r24, 0x35	; 53
    29d6:	84 60       	ori	r24, 0x04	; 4
    29d8:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
    29da:	85 b7       	in	r24, 0x35	; 53
    29dc:	87 7f       	andi	r24, 0xF7	; 247
    29de:	85 bf       	out	0x35, r24	; 53
    29e0:	0c c0       	rjmp	.+24     	; 0x29fa <EXTINT_SetSenseMode+0xa0>
			  break;
			default:
				break;
		}
   }
   else if (astrEXTINTConfigParameters[u8GroupId].enuEXTINTNum == EXTINT_INT2)
    29e2:	e2 30       	cpi	r30, 0x02	; 2
    29e4:	51 f4       	brne	.+20     	; 0x29fa <EXTINT_SetSenseMode+0xa0>
   {
		switch(enuEXTINTSenseControl)
    29e6:	62 30       	cpi	r22, 0x02	; 2
    29e8:	29 f0       	breq	.+10     	; 0x29f4 <EXTINT_SetSenseMode+0x9a>
    29ea:	63 30       	cpi	r22, 0x03	; 3
    29ec:	31 f4       	brne	.+12     	; 0x29fa <EXTINT_SetSenseMode+0xa0>
		{
			case EXT_RAISING_MODE :
				SET_BIT(MCUCSR_R,ISC2_B);
    29ee:	84 b7       	in	r24, 0x34	; 52
    29f0:	80 64       	ori	r24, 0x40	; 64
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <EXTINT_SetSenseMode+0x9e>
				break;
			case EXT_FAILLING_MODE :
				CLEAR_BIT(MCUCSR_R,ISC2_B);
    29f4:	84 b7       	in	r24, 0x34	; 52
    29f6:	8f 7b       	andi	r24, 0xBF	; 191
    29f8:	84 bf       	out	0x34, r24	; 52
   else
   {
   }
	enuStatus = E_OK;
   return enuStatus;
}
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	08 95       	ret

000029fe <EXTINT_SetCallBack>:
************************************************************************************************/
enuErrorStatus_t EXTINT_SetCallBack(uint8_t u8GroupId, void(*pfEXTINTCallBack)(void))
{
	enuErrorStatus_t enuStatus = E_ERROR;

	if(astrEXTINTConfigParameters[u8GroupId].enuEXTINTNum == EXTINT_INT0)
    29fe:	e8 2f       	mov	r30, r24
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	ee 0f       	add	r30, r30
    2a04:	ff 1f       	adc	r31, r31
    2a06:	ee 0f       	add	r30, r30
    2a08:	ff 1f       	adc	r31, r31
    2a0a:	eb 57       	subi	r30, 0x7B	; 123
    2a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a0e:	e0 81       	ld	r30, Z
    2a10:	ee 23       	and	r30, r30
    2a12:	29 f4       	brne	.+10     	; 0x2a1e <EXTINT_SetCallBack+0x20>
	{
		pEXTINT0CallBack = pfEXTINTCallBack;
    2a14:	70 93 47 02 	sts	0x0247, r23
    2a18:	60 93 46 02 	sts	0x0246, r22
    2a1c:	0d c0       	rjmp	.+26     	; 0x2a38 <EXTINT_SetCallBack+0x3a>
	}
	else if(astrEXTINTConfigParameters[u8GroupId].enuEXTINTNum == EXTINT_INT1)
    2a1e:	e1 30       	cpi	r30, 0x01	; 1
    2a20:	29 f4       	brne	.+10     	; 0x2a2c <EXTINT_SetCallBack+0x2e>
	{
		pEXTINT1CallBack = pfEXTINTCallBack;
    2a22:	70 93 43 02 	sts	0x0243, r23
    2a26:	60 93 42 02 	sts	0x0242, r22
    2a2a:	06 c0       	rjmp	.+12     	; 0x2a38 <EXTINT_SetCallBack+0x3a>
	}
	else if(astrEXTINTConfigParameters[u8GroupId].enuEXTINTNum == EXTINT_INT2)
    2a2c:	e2 30       	cpi	r30, 0x02	; 2
    2a2e:	21 f4       	brne	.+8      	; 0x2a38 <EXTINT_SetCallBack+0x3a>
	{
		pEXTINT2CallBack = pfEXTINTCallBack;
    2a30:	70 93 45 02 	sts	0x0245, r23
    2a34:	60 93 44 02 	sts	0x0244, r22
	else
	{
	}
	enuStatus = E_OK;
   return enuStatus;
}
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	08 95       	ret

00002a3c <__vector_1>:
/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void) __attribute__ ((signal,used));

/* ISR to handle the External Interrupt Request 0 */
void __vector_1(void)
{
    2a3c:	1f 92       	push	r1
    2a3e:	0f 92       	push	r0
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	0f 92       	push	r0
    2a44:	11 24       	eor	r1, r1
    2a46:	2f 93       	push	r18
    2a48:	3f 93       	push	r19
    2a4a:	4f 93       	push	r20
    2a4c:	5f 93       	push	r21
    2a4e:	6f 93       	push	r22
    2a50:	7f 93       	push	r23
    2a52:	8f 93       	push	r24
    2a54:	9f 93       	push	r25
    2a56:	af 93       	push	r26
    2a58:	bf 93       	push	r27
    2a5a:	ef 93       	push	r30
    2a5c:	ff 93       	push	r31
	pEXTINT0CallBack();
    2a5e:	e0 91 46 02 	lds	r30, 0x0246
    2a62:	f0 91 47 02 	lds	r31, 0x0247
    2a66:	09 95       	icall
}
    2a68:	ff 91       	pop	r31
    2a6a:	ef 91       	pop	r30
    2a6c:	bf 91       	pop	r27
    2a6e:	af 91       	pop	r26
    2a70:	9f 91       	pop	r25
    2a72:	8f 91       	pop	r24
    2a74:	7f 91       	pop	r23
    2a76:	6f 91       	pop	r22
    2a78:	5f 91       	pop	r21
    2a7a:	4f 91       	pop	r20
    2a7c:	3f 91       	pop	r19
    2a7e:	2f 91       	pop	r18
    2a80:	0f 90       	pop	r0
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	0f 90       	pop	r0
    2a86:	1f 90       	pop	r1
    2a88:	18 95       	reti

00002a8a <__vector_2>:

/* ISR to handle the External Interrupt Request 1 */
void __vector_2(void)
{
    2a8a:	1f 92       	push	r1
    2a8c:	0f 92       	push	r0
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	0f 92       	push	r0
    2a92:	11 24       	eor	r1, r1
    2a94:	2f 93       	push	r18
    2a96:	3f 93       	push	r19
    2a98:	4f 93       	push	r20
    2a9a:	5f 93       	push	r21
    2a9c:	6f 93       	push	r22
    2a9e:	7f 93       	push	r23
    2aa0:	8f 93       	push	r24
    2aa2:	9f 93       	push	r25
    2aa4:	af 93       	push	r26
    2aa6:	bf 93       	push	r27
    2aa8:	ef 93       	push	r30
    2aaa:	ff 93       	push	r31
	pEXTINT1CallBack();
    2aac:	e0 91 42 02 	lds	r30, 0x0242
    2ab0:	f0 91 43 02 	lds	r31, 0x0243
    2ab4:	09 95       	icall
}
    2ab6:	ff 91       	pop	r31
    2ab8:	ef 91       	pop	r30
    2aba:	bf 91       	pop	r27
    2abc:	af 91       	pop	r26
    2abe:	9f 91       	pop	r25
    2ac0:	8f 91       	pop	r24
    2ac2:	7f 91       	pop	r23
    2ac4:	6f 91       	pop	r22
    2ac6:	5f 91       	pop	r21
    2ac8:	4f 91       	pop	r20
    2aca:	3f 91       	pop	r19
    2acc:	2f 91       	pop	r18
    2ace:	0f 90       	pop	r0
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	0f 90       	pop	r0
    2ad4:	1f 90       	pop	r1
    2ad6:	18 95       	reti

00002ad8 <__vector_3>:

/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void)
{
    2ad8:	1f 92       	push	r1
    2ada:	0f 92       	push	r0
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	0f 92       	push	r0
    2ae0:	11 24       	eor	r1, r1
    2ae2:	2f 93       	push	r18
    2ae4:	3f 93       	push	r19
    2ae6:	4f 93       	push	r20
    2ae8:	5f 93       	push	r21
    2aea:	6f 93       	push	r22
    2aec:	7f 93       	push	r23
    2aee:	8f 93       	push	r24
    2af0:	9f 93       	push	r25
    2af2:	af 93       	push	r26
    2af4:	bf 93       	push	r27
    2af6:	ef 93       	push	r30
    2af8:	ff 93       	push	r31
	pEXTINT2CallBack();
    2afa:	e0 91 44 02 	lds	r30, 0x0244
    2afe:	f0 91 45 02 	lds	r31, 0x0245
    2b02:	09 95       	icall
}
    2b04:	ff 91       	pop	r31
    2b06:	ef 91       	pop	r30
    2b08:	bf 91       	pop	r27
    2b0a:	af 91       	pop	r26
    2b0c:	9f 91       	pop	r25
    2b0e:	8f 91       	pop	r24
    2b10:	7f 91       	pop	r23
    2b12:	6f 91       	pop	r22
    2b14:	5f 91       	pop	r21
    2b16:	4f 91       	pop	r20
    2b18:	3f 91       	pop	r19
    2b1a:	2f 91       	pop	r18
    2b1c:	0f 90       	pop	r0
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	0f 90       	pop	r0
    2b22:	1f 90       	pop	r1
    2b24:	18 95       	reti

00002b26 <DIO_Init>:
* Parameters	: strDIOConfigType
* Return Value	: enuErrorStatus_t
* Description  : Initialize one DIO pin according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_Init(strDIOConfigType_t* strDIOConfigType)
{
    2b26:	dc 01       	movw	r26, r24
	enuErrorStatus_t enuRetVar;

	if((strDIOConfigType->enuDIOPinNo >= DIO_PIN_NO_MIN_VALUE)					&& (strDIOConfigType->enuDIOPinNo <= DIO_PIN_NO_MAX_VALUE)						&&
    2b28:	2c 91       	ld	r18, X
    2b2a:	20 32       	cpi	r18, 0x20	; 32
    2b2c:	08 f0       	brcs	.+2      	; 0x2b30 <DIO_Init+0xa>
    2b2e:	55 c0       	rjmp	.+170    	; 0x2bda <DIO_Init+0xb4>
    2b30:	11 96       	adiw	r26, 0x01	; 1
    2b32:	7c 91       	ld	r23, X
    2b34:	11 97       	sbiw	r26, 0x01	; 1
    2b36:	72 30       	cpi	r23, 0x02	; 2
    2b38:	08 f0       	brcs	.+2      	; 0x2b3c <DIO_Init+0x16>
    2b3a:	4f c0       	rjmp	.+158    	; 0x2bda <DIO_Init+0xb4>
    2b3c:	12 96       	adiw	r26, 0x02	; 2
    2b3e:	8c 91       	ld	r24, X
    2b40:	12 97       	sbiw	r26, 0x02	; 2
    2b42:	82 30       	cpi	r24, 0x02	; 2
    2b44:	08 f0       	brcs	.+2      	; 0x2b48 <DIO_Init+0x22>
    2b46:	49 c0       	rjmp	.+146    	; 0x2bda <DIO_Init+0xb4>
		((strDIOConfigType->enuDIOPinDirection == INPUT)							|| (strDIOConfigType->enuDIOPinDirection == OUTPUT))								&&
		((strDIOConfigType->enuDIOPinPullupResistorEnable == NO_CONNECTION) 	|| (strDIOConfigType->enuDIOPinPullupResistorEnable == PULL_UP_ENABLE)))
	{
		/* Setting the direction of data [Input / Output] */
		ASSIGN_BIT(DDRx_R(DIO_PORT_NO(strDIOConfigType->enuDIOPinNo)), DIO_PIN_NO(strDIOConfigType->enuDIOPinNo), strDIOConfigType->enuDIOPinDirection);
    2b48:	e2 2f       	mov	r30, r18
    2b4a:	e6 95       	lsr	r30
    2b4c:	e6 95       	lsr	r30
    2b4e:	e6 95       	lsr	r30
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	ee 52       	subi	r30, 0x2E	; 46
    2b54:	fe 4f       	sbci	r31, 0xFE	; 254
    2b56:	e0 81       	ld	r30, Z
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	62 91       	ld	r22, -Z
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	27 70       	andi	r18, 0x07	; 7
    2b60:	30 70       	andi	r19, 0x00	; 0
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	ca 01       	movw	r24, r20
    2b68:	02 2e       	mov	r0, r18
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <DIO_Init+0x4a>
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	0a 94       	dec	r0
    2b72:	e2 f7       	brpl	.-8      	; 0x2b6c <DIO_Init+0x46>
    2b74:	80 95       	com	r24
    2b76:	68 23       	and	r22, r24
    2b78:	87 2f       	mov	r24, r23
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <DIO_Init+0x5c>
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	2a 95       	dec	r18
    2b84:	e2 f7       	brpl	.-8      	; 0x2b7e <DIO_Init+0x58>
    2b86:	68 2b       	or	r22, r24
    2b88:	60 83       	st	Z, r22
		/* Selecting whether a pull-up resistor is connected to the selected pin or not */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(strDIOConfigType->enuDIOPinNo)), DIO_PIN_NO(strDIOConfigType->enuDIOPinNo), strDIOConfigType->enuDIOPinPullupResistorEnable);
    2b8a:	2c 91       	ld	r18, X
    2b8c:	e2 2f       	mov	r30, r18
    2b8e:	e6 95       	lsr	r30
    2b90:	e6 95       	lsr	r30
    2b92:	e6 95       	lsr	r30
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	ee 52       	subi	r30, 0x2E	; 46
    2b98:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9a:	e0 81       	ld	r30, Z
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	60 81       	ld	r22, Z
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	27 70       	andi	r18, 0x07	; 7
    2ba4:	30 70       	andi	r19, 0x00	; 0
    2ba6:	02 2e       	mov	r0, r18
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <DIO_Init+0x88>
    2baa:	44 0f       	add	r20, r20
    2bac:	55 1f       	adc	r21, r21
    2bae:	0a 94       	dec	r0
    2bb0:	e2 f7       	brpl	.-8      	; 0x2baa <DIO_Init+0x84>
    2bb2:	40 95       	com	r20
    2bb4:	64 23       	and	r22, r20
    2bb6:	12 96       	adiw	r26, 0x02	; 2
    2bb8:	8c 91       	ld	r24, X
    2bba:	12 97       	sbiw	r26, 0x02	; 2
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <DIO_Init+0x9e>
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	2a 95       	dec	r18
    2bc6:	e2 f7       	brpl	.-8      	; 0x2bc0 <DIO_Init+0x9a>
    2bc8:	68 2b       	or	r22, r24
    2bca:	60 83       	st	Z, r22
		aenuDIOState[strDIOConfigType->enuDIOPinNo] = DIO_INIT_DONE;
    2bcc:	ec 91       	ld	r30, X
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	e6 5f       	subi	r30, 0xF6	; 246
    2bd2:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	80 83       	st	Z, r24
    2bd8:	08 95       	ret
*************************************************************************************************/
enuErrorStatus_t DIO_Init(strDIOConfigType_t* strDIOConfigType)
{
	enuErrorStatus_t enuRetVar;

	if((strDIOConfigType->enuDIOPinNo >= DIO_PIN_NO_MIN_VALUE)					&& (strDIOConfigType->enuDIOPinNo <= DIO_PIN_NO_MAX_VALUE)						&&
    2bda:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
    2bdc:	08 95       	ret

00002bde <DIO_Write>:
*************************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8GroupId, uint8_t u8PinData)
{
	enuErrorStatus_t enuRetVar;
	
	if((aenuDIOState[astrDIOConfigParameters[u8GroupId].enuDIOPinNo] == DIO_INIT_DONE) &&
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	dc 01       	movw	r26, r24
    2be2:	aa 0f       	add	r26, r26
    2be4:	bb 1f       	adc	r27, r27
    2be6:	a8 0f       	add	r26, r24
    2be8:	b9 1f       	adc	r27, r25
    2bea:	a7 57       	subi	r26, 0x77	; 119
    2bec:	be 4f       	sbci	r27, 0xFE	; 254
    2bee:	9c 91       	ld	r25, X
    2bf0:	49 2f       	mov	r20, r25
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	fa 01       	movw	r30, r20
    2bf6:	e6 5f       	subi	r30, 0xF6	; 246
    2bf8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bfa:	80 81       	ld	r24, Z
    2bfc:	81 30       	cpi	r24, 0x01	; 1
    2bfe:	29 f5       	brne	.+74     	; 0x2c4a <DIO_Write+0x6c>
    2c00:	11 96       	adiw	r26, 0x01	; 1
    2c02:	8c 91       	ld	r24, X
    2c04:	81 30       	cpi	r24, 0x01	; 1
    2c06:	09 f5       	brne	.+66     	; 0x2c4a <DIO_Write+0x6c>
		(astrDIOConfigParameters[u8GroupId].enuDIOPinDirection == OUTPUT))
	{
		/* Writing the value into the corresponding pin */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(astrDIOConfigParameters[u8GroupId].enuDIOPinNo)), DIO_PIN_NO(astrDIOConfigParameters[u8GroupId].enuDIOPinNo), u8PinData);
    2c08:	96 95       	lsr	r25
    2c0a:	96 95       	lsr	r25
    2c0c:	96 95       	lsr	r25
    2c0e:	e9 2f       	mov	r30, r25
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	ee 52       	subi	r30, 0x2E	; 46
    2c14:	fe 4f       	sbci	r31, 0xFE	; 254
    2c16:	e0 81       	ld	r30, Z
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	20 81       	ld	r18, Z
    2c1c:	47 70       	andi	r20, 0x07	; 7
    2c1e:	50 70       	andi	r21, 0x00	; 0
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	04 2e       	mov	r0, r20
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <DIO_Write+0x4e>
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	0a 94       	dec	r0
    2c2e:	e2 f7       	brpl	.-8      	; 0x2c28 <DIO_Write+0x4a>
    2c30:	80 95       	com	r24
    2c32:	28 23       	and	r18, r24
    2c34:	86 2f       	mov	r24, r22
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	02 c0       	rjmp	.+4      	; 0x2c3e <DIO_Write+0x60>
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	4a 95       	dec	r20
    2c40:	e2 f7       	brpl	.-8      	; 0x2c3a <DIO_Write+0x5c>
    2c42:	28 2b       	or	r18, r24
    2c44:	20 83       	st	Z, r18
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	08 95       	ret
*************************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8GroupId, uint8_t u8PinData)
{
	enuErrorStatus_t enuRetVar;
	
	if((aenuDIOState[astrDIOConfigParameters[u8GroupId].enuDIOPinNo] == DIO_INIT_DONE) &&
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
    2c4c:	08 95       	ret

00002c4e <DIO_Read>:
* Parameters	: u8GroupId, pu8PinData
* Return Value	: enuErrorStatus_t
* Description  : Read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8GroupId, uint8_t* pu8PinData)
{
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	eb 01       	movw	r28, r22
	enuErrorStatus_t enuRetVar;
	
	if((aenuDIOState[astrDIOConfigParameters[u8GroupId].enuDIOPinNo] == DIO_INIT_DONE) &&
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	dc 01       	movw	r26, r24
    2c58:	aa 0f       	add	r26, r26
    2c5a:	bb 1f       	adc	r27, r27
    2c5c:	a8 0f       	add	r26, r24
    2c5e:	b9 1f       	adc	r27, r25
    2c60:	a7 57       	subi	r26, 0x77	; 119
    2c62:	be 4f       	sbci	r27, 0xFE	; 254
    2c64:	9c 91       	ld	r25, X
    2c66:	49 2f       	mov	r20, r25
    2c68:	50 e0       	ldi	r21, 0x00	; 0
    2c6a:	fa 01       	movw	r30, r20
    2c6c:	e6 5f       	subi	r30, 0xF6	; 246
    2c6e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c70:	80 81       	ld	r24, Z
    2c72:	81 30       	cpi	r24, 0x01	; 1
    2c74:	21 f5       	brne	.+72     	; 0x2cbe <DIO_Read+0x70>
    2c76:	11 96       	adiw	r26, 0x01	; 1
    2c78:	8c 91       	ld	r24, X
    2c7a:	88 23       	and	r24, r24
    2c7c:	01 f5       	brne	.+64     	; 0x2cbe <DIO_Read+0x70>
		(astrDIOConfigParameters[u8GroupId].enuDIOPinDirection == INPUT))
	{
		/* Reading the value from the corresponding pin */
		*pu8PinData = GET_BIT(PINx_R(DIO_PORT_NO(astrDIOConfigParameters[u8GroupId].enuDIOPinNo)), DIO_PIN_NO(astrDIOConfigParameters[u8GroupId].enuDIOPinNo));
    2c7e:	96 95       	lsr	r25
    2c80:	96 95       	lsr	r25
    2c82:	96 95       	lsr	r25
    2c84:	e9 2f       	mov	r30, r25
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	ee 52       	subi	r30, 0x2E	; 46
    2c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c8c:	e0 81       	ld	r30, Z
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	32 97       	sbiw	r30, 0x02	; 2
    2c92:	20 81       	ld	r18, Z
    2c94:	47 70       	andi	r20, 0x07	; 7
    2c96:	50 70       	andi	r21, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	04 2e       	mov	r0, r20
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <DIO_Read+0x58>
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	0a 94       	dec	r0
    2ca8:	e2 f7       	brpl	.-8      	; 0x2ca2 <DIO_Read+0x54>
    2caa:	28 23       	and	r18, r24
    2cac:	39 23       	and	r19, r25
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <DIO_Read+0x66>
    2cb0:	35 95       	asr	r19
    2cb2:	27 95       	ror	r18
    2cb4:	4a 95       	dec	r20
    2cb6:	e2 f7       	brpl	.-8      	; 0x2cb0 <DIO_Read+0x62>
    2cb8:	28 83       	st	Y, r18
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	01 c0       	rjmp	.+2      	; 0x2cc0 <DIO_Read+0x72>
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8GroupId, uint8_t* pu8PinData)
{
	enuErrorStatus_t enuRetVar;
	
	if((aenuDIOState[astrDIOConfigParameters[u8GroupId].enuDIOPinNo] == DIO_INIT_DONE) &&
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	08 95       	ret

00002cc6 <DIO_Toggle>:
enuErrorStatus_t DIO_Toggle(uint8_t u8GroupId)
{
	enuErrorStatus_t enuRetVar;
	uint8_t u8PinData;
	
	if((aenuDIOState[astrDIOConfigParameters[u8GroupId].enuDIOPinNo] == DIO_INIT_DONE) &&
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	dc 01       	movw	r26, r24
    2cca:	aa 0f       	add	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	a8 0f       	add	r26, r24
    2cd0:	b9 1f       	adc	r27, r25
    2cd2:	a7 57       	subi	r26, 0x77	; 119
    2cd4:	be 4f       	sbci	r27, 0xFE	; 254
    2cd6:	9c 91       	ld	r25, X
    2cd8:	49 2f       	mov	r20, r25
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	fa 01       	movw	r30, r20
    2cde:	e6 5f       	subi	r30, 0xF6	; 246
    2ce0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ce2:	80 81       	ld	r24, Z
    2ce4:	81 30       	cpi	r24, 0x01	; 1
    2ce6:	91 f5       	brne	.+100    	; 0x2d4c <DIO_Toggle+0x86>
    2ce8:	11 96       	adiw	r26, 0x01	; 1
    2cea:	8c 91       	ld	r24, X
    2cec:	81 30       	cpi	r24, 0x01	; 1
    2cee:	71 f5       	brne	.+92     	; 0x2d4c <DIO_Toggle+0x86>
		(astrDIOConfigParameters[u8GroupId].enuDIOPinDirection == OUTPUT))
	{
		/* Reading the value from the corresponding pin */
		u8PinData = GET_BIT(PINx_R(DIO_PORT_NO(astrDIOConfigParameters[u8GroupId].enuDIOPinNo)), DIO_PIN_NO(astrDIOConfigParameters[u8GroupId].enuDIOPinNo)); // @suppress("Field cannot be resolved")
    2cf0:	96 95       	lsr	r25
    2cf2:	96 95       	lsr	r25
    2cf4:	96 95       	lsr	r25
    2cf6:	e9 2f       	mov	r30, r25
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	ee 52       	subi	r30, 0x2E	; 46
    2cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfe:	e0 81       	ld	r30, Z
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	32 97       	sbiw	r30, 0x02	; 2
    2d04:	80 81       	ld	r24, Z
    2d06:	32 96       	adiw	r30, 0x02	; 2
    2d08:	47 70       	andi	r20, 0x07	; 7
    2d0a:	50 70       	andi	r21, 0x00	; 0
    2d0c:	21 e0       	ldi	r18, 0x01	; 1
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	04 2e       	mov	r0, r20
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <DIO_Toggle+0x52>
    2d14:	22 0f       	add	r18, r18
    2d16:	33 1f       	adc	r19, r19
    2d18:	0a 94       	dec	r0
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <DIO_Toggle+0x4e>
		/* Writing the value into the corresponding pin */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(astrDIOConfigParameters[u8GroupId].enuDIOPinNo)), DIO_PIN_NO(astrDIOConfigParameters[u8GroupId].enuDIOPinNo), ~u8PinData);
    2d1c:	60 81       	ld	r22, Z
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	82 23       	and	r24, r18
    2d22:	93 23       	and	r25, r19
    2d24:	04 2e       	mov	r0, r20
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <DIO_Toggle+0x66>
    2d28:	95 95       	asr	r25
    2d2a:	87 95       	ror	r24
    2d2c:	0a 94       	dec	r0
    2d2e:	e2 f7       	brpl	.-8      	; 0x2d28 <DIO_Toggle+0x62>
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	80 95       	com	r24
    2d34:	90 95       	com	r25
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <DIO_Toggle+0x76>
    2d38:	88 0f       	add	r24, r24
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	4a 95       	dec	r20
    2d3e:	e2 f7       	brpl	.-8      	; 0x2d38 <DIO_Toggle+0x72>
    2d40:	20 95       	com	r18
    2d42:	62 23       	and	r22, r18
    2d44:	68 2b       	or	r22, r24
    2d46:	60 83       	st	Z, r22
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	08 95       	ret
enuErrorStatus_t DIO_Toggle(uint8_t u8GroupId)
{
	enuErrorStatus_t enuRetVar;
	uint8_t u8PinData;
	
	if((aenuDIOState[astrDIOConfigParameters[u8GroupId].enuDIOPinNo] == DIO_INIT_DONE) &&
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
    2d4e:	08 95       	ret

00002d50 <Ultrasonic_GetDistance>:
 * Parameters (out): uint16_t *Distance, enuErrorStatus_t
 * Return value    : 1=E_OK - 0=E_ERROR
 * Description     : A function to check if ultrasonic reading is complete and return distance
 ************************************************************************************/
enuErrorStatus_t Ultrasonic_GetDistance(uint8_t u8GroupId, uint16_t *Distance)
{
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	eb 01       	movw	r28, r22
	gu8GroupId = u8GroupId;
    2d56:	80 93 48 02 	sts	0x0248, r24
	//check for reading completion condition
	if (Reading_Flag)
    2d5a:	80 91 31 02 	lds	r24, 0x0231
    2d5e:	88 23       	and	r24, r24
    2d60:	e9 f0       	breq	.+58     	; 0x2d9c <Ultrasonic_GetDistance+0x4c>
	{
		//when echo signal has been received, calculate the distance
		*Distance=((Reading2-Reading1))/US_CM_FACTOR;
    2d62:	60 91 2d 02 	lds	r22, 0x022D
    2d66:	70 91 2e 02 	lds	r23, 0x022E
    2d6a:	80 91 2f 02 	lds	r24, 0x022F
    2d6e:	90 91 30 02 	lds	r25, 0x0230
    2d72:	20 91 29 02 	lds	r18, 0x0229
    2d76:	30 91 2a 02 	lds	r19, 0x022A
    2d7a:	40 91 2b 02 	lds	r20, 0x022B
    2d7e:	50 91 2c 02 	lds	r21, 0x022C
    2d82:	62 1b       	sub	r22, r18
    2d84:	73 0b       	sbc	r23, r19
    2d86:	84 0b       	sbc	r24, r20
    2d88:	95 0b       	sbc	r25, r21
    2d8a:	2a e3       	ldi	r18, 0x3A	; 58
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
    2d96:	39 83       	std	Y+1, r19	; 0x01
    2d98:	28 83       	st	Y, r18
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
		//return an OK status
		return E_OK;
	}
	//return a NOK status
	return E_ERROR;
}
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	08 95       	ret

00002da2 <Ultrasonic_GetReading_Polling>:
 * Parameters (out): uint16_t *Distance, enuErrorStatus_t
 * Return value    : 1=E_OK - 0=E_ERROR
 * Description     : A function to get ultrasonic reading using polling
 ************************************************************************************/
enuErrorStatus_t Ultrasonic_GetReading_Polling(uint8_t u8GroupId, uint32_t *Distance)
{
    2da2:	0f 93       	push	r16
    2da4:	1f 93       	push	r17
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	eb 01       	movw	r28, r22
	gu8GroupId = u8GroupId;
    2dac:	80 93 48 02 	sts	0x0248, r24
	//reset the reading completion flag
   Reading_Flag=Reading_Not_Complete;
    2db0:	10 92 31 02 	sts	0x0231, r1
   //set the ICU to detect a rising edge
   SW_ICU_SetEdge(astrUltrasonicConfigParameters[u8GroupId].u8UltrasonicSWICUGroupId, SW_ICU_RISING_EDGE);
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	8c 01       	movw	r16, r24
    2db8:	00 0f       	add	r16, r16
    2dba:	11 1f       	adc	r17, r17
    2dbc:	08 0f       	add	r16, r24
    2dbe:	19 1f       	adc	r17, r25
    2dc0:	00 55       	subi	r16, 0x50	; 80
    2dc2:	1e 4f       	sbci	r17, 0xFE	; 254
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	80 81       	ld	r24, Z
    2dc8:	63 e0       	ldi	r22, 0x03	; 3
    2dca:	0e 94 25 18 	call	0x304a	; 0x304a <SW_ICU_SetEdge>
   //generate the trigger pulse
	DIO_Write(astrUltrasonicConfigParameters[u8GroupId].u8TrigPinGroupId, HIGH);
    2dce:	f8 01       	movw	r30, r16
    2dd0:	81 81       	ldd	r24, Z+1	; 0x01
    2dd2:	61 e0       	ldi	r22, 0x01	; 1
    2dd4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dd8:	8a e1       	ldi	r24, 0x1A	; 26
    2dda:	8a 95       	dec	r24
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <Ultrasonic_GetReading_Polling+0x38>
   _delay_us(TRIGGER_DURATION_US);
	DIO_Write(astrUltrasonicConfigParameters[u8GroupId].u8TrigPinGroupId, LOW);
    2dde:	f8 01       	movw	r30, r16
    2de0:	81 81       	ldd	r24, Z+1	; 0x01
    2de2:	60 e0       	ldi	r22, 0x00	; 0
    2de4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
   //wait for echo detection to complete
   while (!Reading_Flag);
    2de8:	80 91 31 02 	lds	r24, 0x0231
    2dec:	88 23       	and	r24, r24
    2dee:	e1 f3       	breq	.-8      	; 0x2de8 <Ultrasonic_GetReading_Polling+0x46>
   //calculate the distance
   *Distance=((Reading2-Reading1))/US_CM_FACTOR;
    2df0:	60 91 2d 02 	lds	r22, 0x022D
    2df4:	70 91 2e 02 	lds	r23, 0x022E
    2df8:	80 91 2f 02 	lds	r24, 0x022F
    2dfc:	90 91 30 02 	lds	r25, 0x0230
    2e00:	20 91 29 02 	lds	r18, 0x0229
    2e04:	30 91 2a 02 	lds	r19, 0x022A
    2e08:	40 91 2b 02 	lds	r20, 0x022B
    2e0c:	50 91 2c 02 	lds	r21, 0x022C
    2e10:	62 1b       	sub	r22, r18
    2e12:	73 0b       	sbc	r23, r19
    2e14:	84 0b       	sbc	r24, r20
    2e16:	95 0b       	sbc	r25, r21
    2e18:	2a e3       	ldi	r18, 0x3A	; 58
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	50 e0       	ldi	r21, 0x00	; 0
    2e20:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__udivmodsi4>
    2e24:	28 83       	st	Y, r18
    2e26:	39 83       	std	Y+1, r19	; 0x01
    2e28:	4a 83       	std	Y+2, r20	; 0x02
    2e2a:	5b 83       	std	Y+3, r21	; 0x03
   //return an OK state
   return E_OK;
}
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	1f 91       	pop	r17
    2e34:	0f 91       	pop	r16
    2e36:	08 95       	ret

00002e38 <Ultrasonic_Trigger>:
* Parameters (out): enuErrorStatus_t
* Return value    : 1=E_OK - 0=E_ERROR
* Description     : A function to send a trigger pulse to the Ultrasonic Module
************************************************************************************/
enuErrorStatus_t Ultrasonic_Trigger(uint8_t u8GroupId)
 {
    2e38:	0f 93       	push	r16
    2e3a:	1f 93       	push	r17
      //reset the reading completion flag
      Reading_Flag=Reading_Not_Complete;
    2e3c:	10 92 31 02 	sts	0x0231, r1
      //set the ICU to detect a rising edge
      SW_ICU_SetEdge(astrUltrasonicConfigParameters[u8GroupId].u8UltrasonicSWICUGroupId, SW_ICU_RISING_EDGE);
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	8c 01       	movw	r16, r24
    2e44:	00 0f       	add	r16, r16
    2e46:	11 1f       	adc	r17, r17
    2e48:	08 0f       	add	r16, r24
    2e4a:	19 1f       	adc	r17, r25
    2e4c:	00 55       	subi	r16, 0x50	; 80
    2e4e:	1e 4f       	sbci	r17, 0xFE	; 254
    2e50:	f8 01       	movw	r30, r16
    2e52:	80 81       	ld	r24, Z
    2e54:	63 e0       	ldi	r22, 0x03	; 3
    2e56:	0e 94 25 18 	call	0x304a	; 0x304a <SW_ICU_SetEdge>
      //generate the trigger pulse
   	DIO_Write(astrUltrasonicConfigParameters[u8GroupId].u8TrigPinGroupId, HIGH);
    2e5a:	f8 01       	movw	r30, r16
    2e5c:	81 81       	ldd	r24, Z+1	; 0x01
    2e5e:	61 e0       	ldi	r22, 0x01	; 1
    2e60:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
    2e64:	8a e1       	ldi	r24, 0x1A	; 26
    2e66:	8a 95       	dec	r24
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <Ultrasonic_Trigger+0x2e>
      _delay_us(TRIGGER_DURATION_US);
   	DIO_Write(astrUltrasonicConfigParameters[u8GroupId].u8TrigPinGroupId, LOW);
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	81 81       	ldd	r24, Z+1	; 0x01
    2e6e:	60 e0       	ldi	r22, 0x00	; 0
    2e70:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
      //reset the ICU unit
      SW_ICU_Reset_Reading(astrUltrasonicConfigParameters[u8GroupId].u8UltrasonicSWICUGroupId);
    2e74:	f8 01       	movw	r30, r16
    2e76:	80 81       	ld	r24, Z
    2e78:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <SW_ICU_Reset_Reading>
      //return an OK status
      return E_OK;
 }
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	1f 91       	pop	r17
    2e80:	0f 91       	pop	r16
    2e82:	08 95       	ret

00002e84 <Ultrasonic_Init>:
* Parameters (out): enuErrorStatus_t
* Return value    : 1=E_OK - 0=E_ERROR
* Description     : A function to initialize the Ultrasonic Module
************************************************************************************/
enuErrorStatus_t Ultrasonic_Init(uint8_t u8GroupId)
{
    2e84:	df 92       	push	r13
    2e86:	ef 92       	push	r14
    2e88:	ff 92       	push	r15
    2e8a:	0f 93       	push	r16
    2e8c:	1f 93       	push	r17
   //initialize Trigger pin
	DIO_Init(&astrDIOConfigParameters[astrUltrasonicConfigParameters[u8GroupId].u8TrigPinGroupId]);
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	8c 01       	movw	r16, r24
    2e92:	00 0f       	add	r16, r16
    2e94:	11 1f       	adc	r17, r17
    2e96:	08 0f       	add	r16, r24
    2e98:	19 1f       	adc	r17, r25
    2e9a:	00 55       	subi	r16, 0x50	; 80
    2e9c:	1e 4f       	sbci	r17, 0xFE	; 254
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	81 81       	ldd	r24, Z+1	; 0x01
    2ea2:	53 e0       	ldi	r21, 0x03	; 3
    2ea4:	d5 2e       	mov	r13, r21
    2ea6:	8d 9d       	mul	r24, r13
    2ea8:	c0 01       	movw	r24, r0
    2eaa:	11 24       	eor	r1, r1
    2eac:	49 e8       	ldi	r20, 0x89	; 137
    2eae:	e4 2e       	mov	r14, r20
    2eb0:	41 e0       	ldi	r20, 0x01	; 1
    2eb2:	f4 2e       	mov	r15, r20
    2eb4:	8e 0d       	add	r24, r14
    2eb6:	9f 1d       	adc	r25, r15
    2eb8:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
   //initialize Echo pin
	DIO_Init(&astrDIOConfigParameters[astrUltrasonicConfigParameters[u8GroupId].u8EchoPinGroupId]);
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	8d 9d       	mul	r24, r13
    2ec2:	c0 01       	movw	r24, r0
    2ec4:	11 24       	eor	r1, r1
    2ec6:	8e 0d       	add	r24, r14
    2ec8:	9f 1d       	adc	r25, r15
    2eca:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
   //initialize software ICU
   SW_ICU_Init(astrUltrasonicConfigParameters[u8GroupId].u8UltrasonicSWICUGroupId);
    2ece:	f8 01       	movw	r30, r16
    2ed0:	80 81       	ld	r24, Z
    2ed2:	0e 94 33 18 	call	0x3066	; 0x3066 <SW_ICU_Init>
   //set callback function to be executed in case of ICU event
   SW_ICU_SetCallback(astrUltrasonicConfigParameters[u8GroupId].u8UltrasonicSWICUGroupId, Get_Readings);
    2ed6:	f8 01       	movw	r30, r16
    2ed8:	80 81       	ld	r24, Z
    2eda:	68 e7       	ldi	r22, 0x78	; 120
    2edc:	77 e1       	ldi	r23, 0x17	; 23
    2ede:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <SW_ICU_SetCallback>
   //return OK status
   return E_OK;
}
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	1f 91       	pop	r17
    2ee6:	0f 91       	pop	r16
    2ee8:	ff 90       	pop	r15
    2eea:	ef 90       	pop	r14
    2eec:	df 90       	pop	r13
    2eee:	08 95       	ret

00002ef0 <Get_Readings>:
* Parameters (out): None
* Return value    : void
* Description     : A function to record ICU readings - Callback function
************************************************************************************/
static void Get_Readings(void)
{
    2ef0:	1f 93       	push	r17
   //create a state flag
   static enuReadingState_t u8Flag=GETTING_RISING_EDGE;
   //check on the flag condition
   switch (u8Flag)
    2ef2:	10 91 32 02 	lds	r17, 0x0232
    2ef6:	11 23       	and	r17, r17
    2ef8:	21 f0       	breq	.+8      	; 0x2f02 <Get_Readings+0x12>
    2efa:	11 30       	cpi	r17, 0x01	; 1
    2efc:	09 f0       	breq	.+2      	; 0x2f00 <Get_Readings+0x10>
    2efe:	43 c0       	rjmp	.+134    	; 0x2f86 <Get_Readings+0x96>
    2f00:	21 c0       	rjmp	.+66     	; 0x2f44 <Get_Readings+0x54>
   {
      //if the flag is set to detecting a rising edge
      case GETTING_RISING_EDGE:
      //get the rising edge timing
      SW_ICU_GetReading(astrUltrasonicConfigParameters[gu8GroupId].u8UltrasonicSWICUGroupId, &Reading1);
    2f02:	80 91 48 02 	lds	r24, 0x0248
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	fc 01       	movw	r30, r24
    2f0a:	ee 0f       	add	r30, r30
    2f0c:	ff 1f       	adc	r31, r31
    2f0e:	e8 0f       	add	r30, r24
    2f10:	f9 1f       	adc	r31, r25
    2f12:	e0 55       	subi	r30, 0x50	; 80
    2f14:	fe 4f       	sbci	r31, 0xFE	; 254
    2f16:	80 81       	ld	r24, Z
    2f18:	69 e2       	ldi	r22, 0x29	; 41
    2f1a:	72 e0       	ldi	r23, 0x02	; 2
    2f1c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <SW_ICU_GetReading>
      //switch SW ICU to detect a falling edge
      SW_ICU_SetEdge(astrUltrasonicConfigParameters[gu8GroupId].u8UltrasonicSWICUGroupId, SW_ICU_FALLING_EDGE);
    2f20:	80 91 48 02 	lds	r24, 0x0248
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	fc 01       	movw	r30, r24
    2f28:	ee 0f       	add	r30, r30
    2f2a:	ff 1f       	adc	r31, r31
    2f2c:	e8 0f       	add	r30, r24
    2f2e:	f9 1f       	adc	r31, r25
    2f30:	e0 55       	subi	r30, 0x50	; 80
    2f32:	fe 4f       	sbci	r31, 0xFE	; 254
    2f34:	80 81       	ld	r24, Z
    2f36:	62 e0       	ldi	r22, 0x02	; 2
    2f38:	0e 94 25 18 	call	0x304a	; 0x304a <SW_ICU_SetEdge>
      //switch the flag state
      u8Flag=GETTING_FALLING_EDGE;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	80 93 32 02 	sts	0x0232, r24
    2f42:	21 c0       	rjmp	.+66     	; 0x2f86 <Get_Readings+0x96>
      break;
      
      //if the flag is set to detecting a rising edge
      case GETTING_FALLING_EDGE:
      SW_ICU_GetReading(astrUltrasonicConfigParameters[gu8GroupId].u8UltrasonicSWICUGroupId, &Reading2);
    2f44:	80 91 48 02 	lds	r24, 0x0248
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	ee 0f       	add	r30, r30
    2f4e:	ff 1f       	adc	r31, r31
    2f50:	e8 0f       	add	r30, r24
    2f52:	f9 1f       	adc	r31, r25
    2f54:	e0 55       	subi	r30, 0x50	; 80
    2f56:	fe 4f       	sbci	r31, 0xFE	; 254
    2f58:	80 81       	ld	r24, Z
    2f5a:	6d e2       	ldi	r22, 0x2D	; 45
    2f5c:	72 e0       	ldi	r23, 0x02	; 2
    2f5e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <SW_ICU_GetReading>
      SW_ICU_SetEdge(astrUltrasonicConfigParameters[gu8GroupId].u8UltrasonicSWICUGroupId, SW_ICU_RISING_EDGE);
    2f62:	80 91 48 02 	lds	r24, 0x0248
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	fc 01       	movw	r30, r24
    2f6a:	ee 0f       	add	r30, r30
    2f6c:	ff 1f       	adc	r31, r31
    2f6e:	e8 0f       	add	r30, r24
    2f70:	f9 1f       	adc	r31, r25
    2f72:	e0 55       	subi	r30, 0x50	; 80
    2f74:	fe 4f       	sbci	r31, 0xFE	; 254
    2f76:	80 81       	ld	r24, Z
    2f78:	63 e0       	ldi	r22, 0x03	; 3
    2f7a:	0e 94 25 18 	call	0x304a	; 0x304a <SW_ICU_SetEdge>
      //switch the flag state
      u8Flag=GETTING_RISING_EDGE;
    2f7e:	10 92 32 02 	sts	0x0232, r1
      //switch the Reading Flag state to indecate reading completion
      Reading_Flag=Reading_Complete;
    2f82:	10 93 31 02 	sts	0x0231, r17
      break;
   }
}
    2f86:	1f 91       	pop	r17
    2f88:	08 95       	ret

00002f8a <SW_ICU_SetCallback>:
* Description     : A function to set callback function to be called in case of ICU event
************************************************************************************/
enuErrorStatus_t SW_ICU_SetCallback(uint8_t u8GroupId, void(*pfSWICUCallback)(void))
{
   //check if sent pointer points to a valid location
   if (pfSWICUCallback == NULLPTR)
    2f8a:	61 15       	cp	r22, r1
    2f8c:	71 05       	cpc	r23, r1
    2f8e:	11 f4       	brne	.+4      	; 0x2f94 <SW_ICU_SetCallback+0xa>
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	08 95       	ret
   {
      //return a NOK status
      return E_ERROR;
   }
   //set the external interrupt callback to call the sent function
   EXTINT_SetCallBack(astrSWICUConfigParameters[u8GroupId].u8SWICUEXTINTGroupId, pfSWICUCallback);
    2f94:	e8 2f       	mov	r30, r24
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	83 e0       	ldi	r24, 0x03	; 3
    2f9a:	ee 0f       	add	r30, r30
    2f9c:	ff 1f       	adc	r31, r31
    2f9e:	8a 95       	dec	r24
    2fa0:	e1 f7       	brne	.-8      	; 0x2f9a <SW_ICU_SetCallback+0x10>
    2fa2:	ed 54       	subi	r30, 0x4D	; 77
    2fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa6:	81 81       	ldd	r24, Z+1	; 0x01
    2fa8:	0e 94 ff 14 	call	0x29fe	; 0x29fe <EXTINT_SetCallBack>
    2fac:	81 e0       	ldi	r24, 0x01	; 1
   //return OK status
   return E_OK;
}
    2fae:	08 95       	ret

00002fb0 <SW_ICU_Reset_Reading>:
* Description     : A function to reset the SW_ICU logic
************************************************************************************/
enuErrorStatus_t SW_ICU_Reset_Reading(uint8_t u8GroupId)
{
   //reset timer 1 overflow counter
   Timer1_ResetOVFCount();
    2fb0:	0e 94 bc 10 	call	0x2178	; 0x2178 <Timer1_ResetOVFCount>
   //return OK status
   return E_OK;
}
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	08 95       	ret

00002fb8 <SW_ICU_GetReading>:
* Parameters (out): *u32Buffer, enuErrorStatus_t
* Return value    : 1=E_OK - 0=E_ERROR
* Description     : A function to get the SW_ICU register reading
************************************************************************************/
enuErrorStatus_t SW_ICU_GetReading(uint8_t u8GroupId, uint32_t *u32Buffer)
{
    2fb8:	cf 92       	push	r12
    2fba:	df 92       	push	r13
    2fbc:	ef 92       	push	r14
    2fbe:	ff 92       	push	r15
    2fc0:	0f 93       	push	r16
    2fc2:	1f 93       	push	r17
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <SW_ICU_GetReading+0x12>
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <SW_ICU_GetReading+0x14>
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	18 2f       	mov	r17, r24
    2fd2:	6b 01       	movw	r12, r22
   //check if sent pointer points to a valid location
   if (u32Buffer == NULLPTR)
    2fd4:	61 15       	cp	r22, r1
    2fd6:	71 05       	cpc	r23, r1
    2fd8:	11 f4       	brne	.+4      	; 0x2fde <SW_ICU_GetReading+0x26>
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	29 c0       	rjmp	.+82     	; 0x3030 <SW_ICU_GetReading+0x78>
   {
      //return a NOK status
      return E_ERROR;
   }
   //get a snapshot of the timer register
   uint16_t Buffer = TCNT1_R;
    2fde:	ec b4       	in	r14, 0x2c	; 44
    2fe0:	fd b4       	in	r15, 0x2d	; 45
   uint32_t overflows = 0;
    2fe2:	19 82       	std	Y+1, r1	; 0x01
    2fe4:	1a 82       	std	Y+2, r1	; 0x02
    2fe6:	1b 82       	std	Y+3, r1	; 0x03
    2fe8:	1c 82       	std	Y+4, r1	; 0x04
   //get the overflow counter value
   Timer1_GetOVFCount(&overflows);
    2fea:	ce 01       	movw	r24, r28
    2fec:	01 96       	adiw	r24, 0x01	; 1
    2fee:	0e 94 a9 10 	call	0x2152	; 0x2152 <Timer1_GetOVFCount>
   //calculate actual timer value based on overflows number
   *u32Buffer = Buffer + (overflows * astrSWICUConfigParameters[u8GroupId].u16TimerMax);
    2ff2:	e1 2f       	mov	r30, r17
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	93 e0       	ldi	r25, 0x03	; 3
    2ff8:	ee 0f       	add	r30, r30
    2ffa:	ff 1f       	adc	r31, r31
    2ffc:	9a 95       	dec	r25
    2ffe:	e1 f7       	brne	.-8      	; 0x2ff8 <SW_ICU_GetReading+0x40>
    3000:	ed 54       	subi	r30, 0x4D	; 77
    3002:	fe 4f       	sbci	r31, 0xFE	; 254
    3004:	63 81       	ldd	r22, Z+3	; 0x03
    3006:	74 81       	ldd	r23, Z+4	; 0x04
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	29 81       	ldd	r18, Y+1	; 0x01
    300e:	3a 81       	ldd	r19, Y+2	; 0x02
    3010:	4b 81       	ldd	r20, Y+3	; 0x03
    3012:	5c 81       	ldd	r21, Y+4	; 0x04
    3014:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__mulsi3>
    3018:	00 e0       	ldi	r16, 0x00	; 0
    301a:	10 e0       	ldi	r17, 0x00	; 0
    301c:	e6 0e       	add	r14, r22
    301e:	f7 1e       	adc	r15, r23
    3020:	08 1f       	adc	r16, r24
    3022:	19 1f       	adc	r17, r25
    3024:	f6 01       	movw	r30, r12
    3026:	e0 82       	st	Z, r14
    3028:	f1 82       	std	Z+1, r15	; 0x01
    302a:	02 83       	std	Z+2, r16	; 0x02
    302c:	13 83       	std	Z+3, r17	; 0x03
    302e:	81 e0       	ldi	r24, 0x01	; 1
   //return OK status
   return E_OK;   
}
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	cf 91       	pop	r28
    303a:	df 91       	pop	r29
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	ff 90       	pop	r15
    3042:	ef 90       	pop	r14
    3044:	df 90       	pop	r13
    3046:	cf 90       	pop	r12
    3048:	08 95       	ret

0000304a <SW_ICU_SetEdge>:
* Description     : A function to set the detection edge of the SW_ICU
************************************************************************************/
enuErrorStatus_t SW_ICU_SetEdge(uint8_t u8GroupId, enuSWICUTriggerMode_t enuSWICUTriggerMode)
{
   //Set external interrupt channel to detect the specified edge
   EXTINT_SetSenseMode(astrSWICUConfigParameters[u8GroupId].u8SWICUEXTINTGroupId, enuSWICUTriggerMode);
    304a:	e8 2f       	mov	r30, r24
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	23 e0       	ldi	r18, 0x03	; 3
    3050:	ee 0f       	add	r30, r30
    3052:	ff 1f       	adc	r31, r31
    3054:	2a 95       	dec	r18
    3056:	e1 f7       	brne	.-8      	; 0x3050 <SW_ICU_SetEdge+0x6>
    3058:	ed 54       	subi	r30, 0x4D	; 77
    305a:	fe 4f       	sbci	r31, 0xFE	; 254
    305c:	81 81       	ldd	r24, Z+1	; 0x01
    305e:	0e 94 ad 14 	call	0x295a	; 0x295a <EXTINT_SetSenseMode>
   //return OK status
   return E_OK;
}
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	08 95       	ret

00003066 <SW_ICU_Init>:
* Parameters (out): enuErrorStatus_t
* Return value    : 1=E_OK - 0=E_ERROR
* Description     : A function to initialize the Software ICU
************************************************************************************/
enuErrorStatus_t SW_ICU_Init(uint8_t u8GroupId)
{
    3066:	cf 92       	push	r12
    3068:	df 92       	push	r13
    306a:	ef 92       	push	r14
    306c:	ff 92       	push	r15
    306e:	0f 93       	push	r16
    3070:	1f 93       	push	r17
	//initialize the software ICU
   EXTINT_Init(&astrEXTINTConfigParameters[astrSWICUConfigParameters[u8GroupId].u8SWICUEXTINTGroupId]);
    3072:	08 2f       	mov	r16, r24
    3074:	10 e0       	ldi	r17, 0x00	; 0
    3076:	63 eb       	ldi	r22, 0xB3	; 179
    3078:	e6 2e       	mov	r14, r22
    307a:	61 e0       	ldi	r22, 0x01	; 1
    307c:	f6 2e       	mov	r15, r22
    307e:	53 e0       	ldi	r21, 0x03	; 3
    3080:	00 0f       	add	r16, r16
    3082:	11 1f       	adc	r17, r17
    3084:	5a 95       	dec	r21
    3086:	e1 f7       	brne	.-8      	; 0x3080 <SW_ICU_Init+0x1a>
    3088:	67 01       	movw	r12, r14
    308a:	c0 0e       	add	r12, r16
    308c:	d1 1e       	adc	r13, r17
    308e:	f6 01       	movw	r30, r12
    3090:	81 81       	ldd	r24, Z+1	; 0x01
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	88 0f       	add	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	8b 57       	subi	r24, 0x7B	; 123
    309e:	9e 4f       	sbci	r25, 0xFE	; 254
    30a0:	0e 94 42 14 	call	0x2884	; 0x2884 <EXTINT_Init>
   //initialize timer1 
   Timer1_Init(TIMER1_FASTPWM_ICR_TOP_MODE,TIMER1_SCALER_8);
    30a4:	8e e0       	ldi	r24, 0x0E	; 14
    30a6:	62 e0       	ldi	r22, 0x02	; 2
    30a8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <Timer1_Init>
   //reset timer 1 overflow counter
   Timer1_ResetOVFCount();
    30ac:	0e 94 bc 10 	call	0x2178	; 0x2178 <Timer1_ResetOVFCount>
   //enable timer1 overflow interrupt
   Timer_OVInterruptEnable(astrSWICUConfigParameters[u8GroupId].u8SWICUTimerGroupId);
    30b0:	e0 0e       	add	r14, r16
    30b2:	f1 1e       	adc	r15, r17
    30b4:	f7 01       	movw	r30, r14
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <Timer_OVInterruptEnable>
   //update the ICR register value to apply the new frequency
   ICR1_R = (astrSWICUConfigParameters[u8GroupId].u8TimerFreqKHz * SW_ICU_THOUSAND_MULTIPLIER) / SW_ICU_TWO_DIVISOR;
    30bc:	f6 01       	movw	r30, r12
    30be:	85 81       	ldd	r24, Z+5	; 0x05
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	24 ef       	ldi	r18, 0xF4	; 244
    30c4:	31 e0       	ldi	r19, 0x01	; 1
    30c6:	ac 01       	movw	r20, r24
    30c8:	42 9f       	mul	r20, r18
    30ca:	c0 01       	movw	r24, r0
    30cc:	43 9f       	mul	r20, r19
    30ce:	90 0d       	add	r25, r0
    30d0:	52 9f       	mul	r21, r18
    30d2:	90 0d       	add	r25, r0
    30d4:	11 24       	eor	r1, r1
    30d6:	97 bd       	out	0x27, r25	; 39
    30d8:	86 bd       	out	0x26, r24	; 38
   //reset timer register
   TCNT1_R = SW_ICU_TIMER_RESET_VALUE;
    30da:	1d bc       	out	0x2d, r1	; 45
    30dc:	1c bc       	out	0x2c, r1	; 44
   //return OK status
   return E_OK;
}
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	1f 91       	pop	r17
    30e2:	0f 91       	pop	r16
    30e4:	ff 90       	pop	r15
    30e6:	ef 90       	pop	r14
    30e8:	df 90       	pop	r13
    30ea:	cf 90       	pop	r12
    30ec:	08 95       	ret

000030ee <LCD_sendCommand>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR , E_OK
* Description     : A function to send command to LCD
*************************************************************************************************/
static enuErrorStatus_t LCD_sendCommand(uint8_t u8GroupId, uint8_t u8Command)
{
    30ee:	cf 92       	push	r12
    30f0:	df 92       	push	r13
    30f2:	ef 92       	push	r14
    30f4:	ff 92       	push	r15
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	08 2f       	mov	r16, r24
    3100:	f6 2e       	mov	r15, r22
	/* Error handler initialization */
	static enuErrorStatus_t enuRetVar=E_ERROR;

	/* Making sure that the function won't proceed as long as the previous state is the current state */
	if(enuCommandPreviousState != enuCommandCurrentState)
    3102:	90 91 34 02 	lds	r25, 0x0234
    3106:	80 91 bc 01 	lds	r24, 0x01BC
    310a:	89 17       	cp	r24, r25
    310c:	09 f4       	brne	.+2      	; 0x3110 <LCD_sendCommand+0x22>
    310e:	33 c1       	rjmp	.+614    	; 0x3376 <LCD_sendCommand+0x288>
	{
		switch(enuCommandCurrentState)  //Switching case on the current state
    3110:	92 30       	cpi	r25, 0x02	; 2
    3112:	09 f4       	brne	.+2      	; 0x3116 <LCD_sendCommand+0x28>
    3114:	94 c0       	rjmp	.+296    	; 0x323e <LCD_sendCommand+0x150>
    3116:	93 30       	cpi	r25, 0x03	; 3
    3118:	30 f4       	brcc	.+12     	; 0x3126 <LCD_sendCommand+0x38>
    311a:	99 23       	and	r25, r25
    311c:	71 f0       	breq	.+28     	; 0x313a <LCD_sendCommand+0x4c>
    311e:	91 30       	cpi	r25, 0x01	; 1
    3120:	09 f0       	breq	.+2      	; 0x3124 <LCD_sendCommand+0x36>
    3122:	29 c1       	rjmp	.+594    	; 0x3376 <LCD_sendCommand+0x288>
    3124:	28 c0       	rjmp	.+80     	; 0x3176 <LCD_sendCommand+0x88>
    3126:	94 30       	cpi	r25, 0x04	; 4
    3128:	09 f4       	brne	.+2      	; 0x312c <LCD_sendCommand+0x3e>
    312a:	89 c0       	rjmp	.+274    	; 0x323e <LCD_sendCommand+0x150>
    312c:	94 30       	cpi	r25, 0x04	; 4
    312e:	08 f4       	brcc	.+2      	; 0x3132 <LCD_sendCommand+0x44>
    3130:	9d c0       	rjmp	.+314    	; 0x326c <LCD_sendCommand+0x17e>
    3132:	95 30       	cpi	r25, 0x05	; 5
    3134:	09 f0       	breq	.+2      	; 0x3138 <LCD_sendCommand+0x4a>
    3136:	1f c1       	rjmp	.+574    	; 0x3376 <LCD_sendCommand+0x288>
    3138:	17 c1       	rjmp	.+558    	; 0x3368 <LCD_sendCommand+0x27a>
		{
			/* The first state , starting the function and initializing the DIO pins */
			case COMMAND_START:
				enuRetVar=E_ERROR;
    313a:	10 92 39 02 	sts	0x0239, r1
				/* Instruction Mode RS=0 */
				DIO_Write(astrLCDConfigParameters[u8GroupId].u8RSPinDIOGroupId, LOW);
    313e:	20 2f       	mov	r18, r16
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	8d e0       	ldi	r24, 0x0D	; 13
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	28 9f       	mul	r18, r24
    3148:	80 01       	movw	r16, r0
    314a:	29 9f       	mul	r18, r25
    314c:	10 0d       	add	r17, r0
    314e:	38 9f       	mul	r19, r24
    3150:	10 0d       	add	r17, r0
    3152:	11 24       	eor	r1, r1
    3154:	02 54       	subi	r16, 0x42	; 66
    3156:	1e 4f       	sbci	r17, 0xFE	; 254
    3158:	f8 01       	movw	r30, r16
    315a:	81 81       	ldd	r24, Z+1	; 0x01
    315c:	60 e0       	ldi	r22, 0x00	; 0
    315e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
				/* write data to LCD so RW=0 */
				DIO_Write(astrLCDConfigParameters[u8GroupId].u8RWPinDIOGroupId, LOW);
    3162:	f8 01       	movw	r30, r16
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>

				/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
				enuCommandPreviousState = enuCommandCurrentState;
    316c:	80 91 34 02 	lds	r24, 0x0234
    3170:	80 93 bc 01 	sts	0x01BC, r24
    3174:	77 c0       	rjmp	.+238    	; 0x3264 <LCD_sendCommand+0x176>

			/* The second state , sending the 4 high bits of the command on the data bus D4 --> D7*/
			case COMMAND_INIT:
				//4 bit mode command 1
				/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
				if(astrLCDConfigParameters[u8GroupId].enuLCDDataMode == LCD_FOUR_BIT_UPPER_PORT_PINS_DATA_MODE)
    3176:	c0 2e       	mov	r12, r16
    3178:	dd 24       	eor	r13, r13
    317a:	8d e0       	ldi	r24, 0x0D	; 13
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	c8 9e       	mul	r12, r24
    3180:	e0 01       	movw	r28, r0
    3182:	c9 9e       	mul	r12, r25
    3184:	d0 0d       	add	r29, r0
    3186:	d8 9e       	mul	r13, r24
    3188:	d0 0d       	add	r29, r0
    318a:	11 24       	eor	r1, r1
    318c:	c2 54       	subi	r28, 0x42	; 66
    318e:	de 4f       	sbci	r29, 0xFE	; 254
    3190:	88 81       	ld	r24, Y
    3192:	88 23       	and	r24, r24
    3194:	41 f5       	brne	.+80     	; 0x31e6 <LCD_sendCommand+0xf8>
				{
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D4_GROUP_ID_INDEX], (u8Command & 0x10) >> 4);
    3196:	06 2f       	mov	r16, r22
    3198:	10 e0       	ldi	r17, 0x00	; 0
    319a:	b8 01       	movw	r22, r16
    319c:	60 71       	andi	r22, 0x10	; 16
    319e:	70 70       	andi	r23, 0x00	; 0
    31a0:	34 e0       	ldi	r19, 0x04	; 4
    31a2:	75 95       	asr	r23
    31a4:	67 95       	ror	r22
    31a6:	3a 95       	dec	r19
    31a8:	e1 f7       	brne	.-8      	; 0x31a2 <LCD_sendCommand+0xb4>
    31aa:	88 85       	ldd	r24, Y+8	; 0x08
    31ac:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D5_GROUP_ID_INDEX], (u8Command & 0x20) >> 5);
    31b0:	b8 01       	movw	r22, r16
    31b2:	60 72       	andi	r22, 0x20	; 32
    31b4:	70 70       	andi	r23, 0x00	; 0
    31b6:	25 e0       	ldi	r18, 0x05	; 5
    31b8:	75 95       	asr	r23
    31ba:	67 95       	ror	r22
    31bc:	2a 95       	dec	r18
    31be:	e1 f7       	brne	.-8      	; 0x31b8 <LCD_sendCommand+0xca>
    31c0:	89 85       	ldd	r24, Y+9	; 0x09
    31c2:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D6_GROUP_ID_INDEX], (u8Command & 0x40) >> 6);
    31c6:	00 74       	andi	r16, 0x40	; 64
    31c8:	10 70       	andi	r17, 0x00	; 0
    31ca:	96 e0       	ldi	r25, 0x06	; 6
    31cc:	15 95       	asr	r17
    31ce:	07 95       	ror	r16
    31d0:	9a 95       	dec	r25
    31d2:	e1 f7       	brne	.-8      	; 0x31cc <LCD_sendCommand+0xde>
    31d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31d6:	60 2f       	mov	r22, r16
    31d8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D7_GROUP_ID_INDEX], (u8Command & 0x80) >> 7);
    31dc:	ff 1c       	adc	r15, r15
    31de:	ff 24       	eor	r15, r15
    31e0:	ff 1c       	adc	r15, r15
    31e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    31e4:	2a c0       	rjmp	.+84     	; 0x323a <LCD_sendCommand+0x14c>
				}
				/* out the highest 4 bits of the required command to the data bus D0 --> D3 */
				else if(astrLCDConfigParameters[u8GroupId].enuLCDDataMode == LCD_FOUR_BIT_LOWER_PORT_PINS_DATA_MODE)
    31e6:	81 30       	cpi	r24, 0x01	; 1
    31e8:	09 f0       	breq	.+2      	; 0x31ec <LCD_sendCommand+0xfe>
    31ea:	96 c0       	rjmp	.+300    	; 0x3318 <LCD_sendCommand+0x22a>
				{
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D0_GROUP_ID_INDEX], (u8Command & 0x10) >> 4);
    31ec:	06 2f       	mov	r16, r22
    31ee:	10 e0       	ldi	r17, 0x00	; 0
    31f0:	b8 01       	movw	r22, r16
    31f2:	60 71       	andi	r22, 0x10	; 16
    31f4:	70 70       	andi	r23, 0x00	; 0
    31f6:	84 e0       	ldi	r24, 0x04	; 4
    31f8:	75 95       	asr	r23
    31fa:	67 95       	ror	r22
    31fc:	8a 95       	dec	r24
    31fe:	e1 f7       	brne	.-8      	; 0x31f8 <LCD_sendCommand+0x10a>
    3200:	8c 81       	ldd	r24, Y+4	; 0x04
    3202:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D1_GROUP_ID_INDEX], (u8Command & 0x20) >> 5);
    3206:	b8 01       	movw	r22, r16
    3208:	60 72       	andi	r22, 0x20	; 32
    320a:	70 70       	andi	r23, 0x00	; 0
    320c:	b5 e0       	ldi	r27, 0x05	; 5
    320e:	75 95       	asr	r23
    3210:	67 95       	ror	r22
    3212:	ba 95       	dec	r27
    3214:	e1 f7       	brne	.-8      	; 0x320e <LCD_sendCommand+0x120>
    3216:	8d 81       	ldd	r24, Y+5	; 0x05
    3218:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D2_GROUP_ID_INDEX], (u8Command & 0x40) >> 6);
    321c:	00 74       	andi	r16, 0x40	; 64
    321e:	10 70       	andi	r17, 0x00	; 0
    3220:	a6 e0       	ldi	r26, 0x06	; 6
    3222:	15 95       	asr	r17
    3224:	07 95       	ror	r16
    3226:	aa 95       	dec	r26
    3228:	e1 f7       	brne	.-8      	; 0x3222 <LCD_sendCommand+0x134>
    322a:	8e 81       	ldd	r24, Y+6	; 0x06
    322c:	60 2f       	mov	r22, r16
    322e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D3_GROUP_ID_INDEX], (u8Command & 0x80) >> 7);
    3232:	ff 1c       	adc	r15, r15
    3234:	ff 24       	eor	r15, r15
    3236:	ff 1c       	adc	r15, r15
    3238:	8f 81       	ldd	r24, Y+7	; 0x07
    323a:	6f 2d       	mov	r22, r15
    323c:	6b c0       	rjmp	.+214    	; 0x3314 <LCD_sendCommand+0x226>
				break;

			/* The third state , Indicating that the previous state is done successfully , then clearing the E pin*/
			case COMMAND1_CFG:
				/* clear the E-pin */
				DIO_Write(astrLCDConfigParameters[u8GroupId].u8EPinDIOGroupId, LOW);
    323e:	20 2f       	mov	r18, r16
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	8d e0       	ldi	r24, 0x0D	; 13
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	28 9f       	mul	r18, r24
    3248:	f0 01       	movw	r30, r0
    324a:	29 9f       	mul	r18, r25
    324c:	f0 0d       	add	r31, r0
    324e:	38 9f       	mul	r19, r24
    3250:	f0 0d       	add	r31, r0
    3252:	11 24       	eor	r1, r1
    3254:	e2 54       	subi	r30, 0x42	; 66
    3256:	fe 4f       	sbci	r31, 0xFE	; 254
    3258:	83 81       	ldd	r24, Z+3	; 0x03
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>

				/* Moving to the next state */
				enuCommandCurrentState++;
    3260:	80 91 34 02 	lds	r24, 0x0234
    3264:	8f 5f       	subi	r24, 0xFF	; 255
    3266:	80 93 34 02 	sts	0x0234, r24
    326a:	85 c0       	rjmp	.+266    	; 0x3376 <LCD_sendCommand+0x288>
				break;

			/* The forth state , indicating the the high 4 bits are sent successfully */
			case COMMAND1_SENT:
				/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
				if(astrLCDConfigParameters[u8GroupId].enuLCDDataMode == LCD_FOUR_BIT_UPPER_PORT_PINS_DATA_MODE)
    326c:	c0 2e       	mov	r12, r16
    326e:	dd 24       	eor	r13, r13
    3270:	8d e0       	ldi	r24, 0x0D	; 13
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	c8 9e       	mul	r12, r24
    3276:	e0 01       	movw	r28, r0
    3278:	c9 9e       	mul	r12, r25
    327a:	d0 0d       	add	r29, r0
    327c:	d8 9e       	mul	r13, r24
    327e:	d0 0d       	add	r29, r0
    3280:	11 24       	eor	r1, r1
    3282:	c2 54       	subi	r28, 0x42	; 66
    3284:	de 4f       	sbci	r29, 0xFE	; 254
    3286:	88 81       	ld	r24, Y
    3288:	88 23       	and	r24, r24
    328a:	09 f5       	brne	.+66     	; 0x32ce <LCD_sendCommand+0x1e0>
				{
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D4_GROUP_ID_INDEX], (u8Command & 0x01) >> 0);
    328c:	61 70       	andi	r22, 0x01	; 1
    328e:	88 85       	ldd	r24, Y+8	; 0x08
    3290:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D5_GROUP_ID_INDEX], (u8Command & 0x02) >> 1);
    3294:	0f 2d       	mov	r16, r15
    3296:	10 e0       	ldi	r17, 0x00	; 0
    3298:	b8 01       	movw	r22, r16
    329a:	62 70       	andi	r22, 0x02	; 2
    329c:	70 70       	andi	r23, 0x00	; 0
    329e:	75 95       	asr	r23
    32a0:	67 95       	ror	r22
    32a2:	89 85       	ldd	r24, Y+9	; 0x09
    32a4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D6_GROUP_ID_INDEX], (u8Command & 0x04) >> 2);
    32a8:	b8 01       	movw	r22, r16
    32aa:	64 70       	andi	r22, 0x04	; 4
    32ac:	70 70       	andi	r23, 0x00	; 0
    32ae:	75 95       	asr	r23
    32b0:	67 95       	ror	r22
    32b2:	75 95       	asr	r23
    32b4:	67 95       	ror	r22
    32b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D7_GROUP_ID_INDEX], (u8Command & 0x08) >> 3);
    32bc:	08 70       	andi	r16, 0x08	; 8
    32be:	10 70       	andi	r17, 0x00	; 0
    32c0:	53 e0       	ldi	r21, 0x03	; 3
    32c2:	15 95       	asr	r17
    32c4:	07 95       	ror	r16
    32c6:	5a 95       	dec	r21
    32c8:	e1 f7       	brne	.-8      	; 0x32c2 <LCD_sendCommand+0x1d4>
    32ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    32cc:	22 c0       	rjmp	.+68     	; 0x3312 <LCD_sendCommand+0x224>
				}
				/* out the lowest 4 bits of the required command to the data bus D0 --> D3 */
				else if(astrLCDConfigParameters[u8GroupId].enuLCDDataMode == LCD_FOUR_BIT_LOWER_PORT_PINS_DATA_MODE)
    32ce:	81 30       	cpi	r24, 0x01	; 1
    32d0:	19 f5       	brne	.+70     	; 0x3318 <LCD_sendCommand+0x22a>
				{
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D0_GROUP_ID_INDEX], (u8Command & 0x01) >> 0);
    32d2:	61 70       	andi	r22, 0x01	; 1
    32d4:	8c 81       	ldd	r24, Y+4	; 0x04
    32d6:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D1_GROUP_ID_INDEX], (u8Command & 0x02) >> 1);
    32da:	0f 2d       	mov	r16, r15
    32dc:	10 e0       	ldi	r17, 0x00	; 0
    32de:	b8 01       	movw	r22, r16
    32e0:	62 70       	andi	r22, 0x02	; 2
    32e2:	70 70       	andi	r23, 0x00	; 0
    32e4:	75 95       	asr	r23
    32e6:	67 95       	ror	r22
    32e8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ea:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D2_GROUP_ID_INDEX], (u8Command & 0x04) >> 2);
    32ee:	b8 01       	movw	r22, r16
    32f0:	64 70       	andi	r22, 0x04	; 4
    32f2:	70 70       	andi	r23, 0x00	; 0
    32f4:	75 95       	asr	r23
    32f6:	67 95       	ror	r22
    32f8:	75 95       	asr	r23
    32fa:	67 95       	ror	r22
    32fc:	8e 81       	ldd	r24, Y+6	; 0x06
    32fe:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D3_GROUP_ID_INDEX], (u8Command & 0x08) >> 3);
    3302:	08 70       	andi	r16, 0x08	; 8
    3304:	10 70       	andi	r17, 0x00	; 0
    3306:	23 e0       	ldi	r18, 0x03	; 3
    3308:	15 95       	asr	r17
    330a:	07 95       	ror	r16
    330c:	2a 95       	dec	r18
    330e:	e1 f7       	brne	.-8      	; 0x3308 <LCD_sendCommand+0x21a>
    3310:	8f 81       	ldd	r24, Y+7	; 0x07
    3312:	60 2f       	mov	r22, r16
    3314:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
				else
				{
				}

				/* Enable LCD E=1 */
				DIO_Write(astrLCDConfigParameters[u8GroupId].u8EPinDIOGroupId, HIGH);
    3318:	8d e0       	ldi	r24, 0x0D	; 13
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	c8 9e       	mul	r12, r24
    331e:	80 01       	movw	r16, r0
    3320:	c9 9e       	mul	r12, r25
    3322:	10 0d       	add	r17, r0
    3324:	d8 9e       	mul	r13, r24
    3326:	10 0d       	add	r17, r0
    3328:	11 24       	eor	r1, r1
    332a:	02 54       	subi	r16, 0x42	; 66
    332c:	1e 4f       	sbci	r17, 0xFE	; 254
    332e:	f8 01       	movw	r30, r16
    3330:	83 81       	ldd	r24, Z+3	; 0x03
    3332:	61 e0       	ldi	r22, 0x01	; 1
    3334:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>

				/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
				enuCommandPreviousState = enuCommandCurrentState;
    3338:	80 91 34 02 	lds	r24, 0x0234
    333c:	80 93 bc 01 	sts	0x01BC, r24
				u8LCDFlag = LCD_SEND_COMMAND_FLAG;
    3340:	82 e0       	ldi	r24, 0x02	; 2
    3342:	80 93 37 02 	sts	0x0237, r24
				TDelay_ms(astrLCDConfigParameters[u8GroupId].u8TDelayGroupId, DELAY_1_MS, LCD_Callback);
    3346:	f8 01       	movw	r30, r16
    3348:	84 85       	ldd	r24, Z+12	; 0x0c
    334a:	01 e0       	ldi	r16, 0x01	; 1
    334c:	10 e0       	ldi	r17, 0x00	; 0
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	50 e0       	ldi	r21, 0x00	; 0
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	98 ea       	ldi	r25, 0xA8	; 168
    335c:	e9 2e       	mov	r14, r25
    335e:	9b e1       	ldi	r25, 0x1B	; 27
    3360:	f9 2e       	mov	r15, r25
    3362:	0e 94 67 08 	call	0x10ce	; 0x10ce <TDelay_ms>
    3366:	07 c0       	rjmp	.+14     	; 0x3376 <LCD_sendCommand+0x288>
				break;

			/*The sixth state */
			case COMMAND2_SENT:
				/*Returning E_OK*/
				enuRetVar = E_OK;
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	80 93 39 02 	sts	0x0239, r24

				/* Re-initialize the current state and the previous state to start again from the same point */
				enuCommandCurrentState = COMMAND_START;
    336e:	10 92 34 02 	sts	0x0234, r1
				enuCommandPreviousState = COMMAND2_SENT;
    3372:	90 93 bc 01 	sts	0x01BC, r25
	{
		// do nothing
	}
	return enuRetVar;
	/**************************/
}//end LCD_sendCommand
    3376:	80 91 39 02 	lds	r24, 0x0239
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	1f 91       	pop	r17
    3380:	0f 91       	pop	r16
    3382:	ff 90       	pop	r15
    3384:	ef 90       	pop	r14
    3386:	df 90       	pop	r13
    3388:	cf 90       	pop	r12
    338a:	08 95       	ret

0000338c <LCD_clearScreen>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR , E_OK
* Description     : A function to clear the screen of the LCD
*************************************************************************************************/
enuErrorStatus_t LCD_clearScreen(uint8_t u8GroupId)
{
    338c:	ef 92       	push	r14
    338e:	ff 92       	push	r15
    3390:	0f 93       	push	r16
    3392:	1f 93       	push	r17
    3394:	18 2f       	mov	r17, r24
	/* Error handler initialization */
	static enuErrorStatus_t enuRetVar = E_ERROR;
	/*For updating the state*/
	u8LCDFlag = LCD_CLEAR_SCREEN_FLAG;
    3396:	84 e0       	ldi	r24, 0x04	; 4
    3398:	80 93 37 02 	sts	0x0237, r24
	switch(enuClearState)
    339c:	80 91 36 02 	lds	r24, 0x0236
    33a0:	88 23       	and	r24, r24
    33a2:	19 f0       	breq	.+6      	; 0x33aa <LCD_clearScreen+0x1e>
    33a4:	82 30       	cpi	r24, 0x02	; 2
    33a6:	41 f5       	brne	.+80     	; 0x33f8 <LCD_clearScreen+0x6c>
    33a8:	24 c0       	rjmp	.+72     	; 0x33f2 <LCD_clearScreen+0x66>
	{
		/* The first state */
		case CLEAR_UNDONE:
			LCD_sendCommand(u8GroupId, CLEAR_COMMAND);
    33aa:	81 2f       	mov	r24, r17
    33ac:	61 e0       	ldi	r22, 0x01	; 1
    33ae:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_sendCommand>
			TDelay_us(astrLCDConfigParameters[u8GroupId].u8TDelayGroupId, DELAY_1530_US, LCD_Callback);
    33b2:	21 2f       	mov	r18, r17
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	8d e0       	ldi	r24, 0x0D	; 13
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	28 9f       	mul	r18, r24
    33bc:	f0 01       	movw	r30, r0
    33be:	29 9f       	mul	r18, r25
    33c0:	f0 0d       	add	r31, r0
    33c2:	38 9f       	mul	r19, r24
    33c4:	f0 0d       	add	r31, r0
    33c6:	11 24       	eor	r1, r1
    33c8:	e2 54       	subi	r30, 0x42	; 66
    33ca:	fe 4f       	sbci	r31, 0xFE	; 254
    33cc:	84 85       	ldd	r24, Z+12	; 0x0c
    33ce:	0a ef       	ldi	r16, 0xFA	; 250
    33d0:	15 e0       	ldi	r17, 0x05	; 5
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	40 e0       	ldi	r20, 0x00	; 0
    33d8:	50 e0       	ldi	r21, 0x00	; 0
    33da:	60 e0       	ldi	r22, 0x00	; 0
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	e8 ea       	ldi	r30, 0xA8	; 168
    33e0:	ee 2e       	mov	r14, r30
    33e2:	eb e1       	ldi	r30, 0x1B	; 27
    33e4:	fe 2e       	mov	r15, r30
    33e6:	0e 94 3b 08 	call	0x1076	; 0x1076 <TDelay_us>
			enuClearState = CLEAR_PROGRESS;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	80 93 36 02 	sts	0x0236, r24
    33f0:	03 c0       	rjmp	.+6      	; 0x33f8 <LCD_clearScreen+0x6c>
		case CLEAR_PROGRESS:
			break;

		/* The thirs state*/
		case CLEAR_DONE:
			enuRetVar = E_OK;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	80 93 38 02 	sts	0x0238, r24
	}
	
	return enuRetVar;
}//end LCD_clearScreen
    33f8:	80 91 38 02 	lds	r24, 0x0238
    33fc:	1f 91       	pop	r17
    33fe:	0f 91       	pop	r16
    3400:	ff 90       	pop	r15
    3402:	ef 90       	pop	r14
    3404:	08 95       	ret

00003406 <LCD_goToRowColumn>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR , E_OK
* Description     : A function to set the cursor in a particular row and column
*************************************************************************************************/
enuErrorStatus_t LCD_goToRowColumn(uint8_t u8GroupId, uint8_t u8Row, uint8_t u8Col)
{
    3406:	98 2f       	mov	r25, r24
	/* Initializing the address and the flag */
	static uint8_t u8Address = 0;
	static uint8_t Flag = 0;
   
   if(!Flag)
    3408:	80 91 3a 02 	lds	r24, 0x023A
    340c:	88 23       	and	r24, r24
    340e:	c1 f4       	brne	.+48     	; 0x3440 <LCD_goToRowColumn+0x3a>
   {
      /* first of all calculate the required address */
      switch(u8Row)
    3410:	61 30       	cpi	r22, 0x01	; 1
    3412:	39 f0       	breq	.+14     	; 0x3422 <LCD_goToRowColumn+0x1c>
    3414:	61 30       	cpi	r22, 0x01	; 1
    3416:	50 f0       	brcs	.+20     	; 0x342c <LCD_goToRowColumn+0x26>
    3418:	62 30       	cpi	r22, 0x02	; 2
    341a:	29 f0       	breq	.+10     	; 0x3426 <LCD_goToRowColumn+0x20>
    341c:	63 30       	cpi	r22, 0x03	; 3
    341e:	41 f4       	brne	.+16     	; 0x3430 <LCD_goToRowColumn+0x2a>
    3420:	04 c0       	rjmp	.+8      	; 0x342a <LCD_goToRowColumn+0x24>
         case LCD_ROW0:
				u8Address = u8Col;
				break;
			/* Row 1 */
         case LCD_ROW1:
				u8Address = u8Col+ADDRESS_ROW_1;
    3422:	40 5c       	subi	r20, 0xC0	; 192
    3424:	03 c0       	rjmp	.+6      	; 0x342c <LCD_goToRowColumn+0x26>
				break;
			/* Row 2 */
         case LCD_ROW2:
				u8Address = u8Col+ADDRESS_ROW_2;
    3426:	40 5f       	subi	r20, 0xF0	; 240
    3428:	01 c0       	rjmp	.+2      	; 0x342c <LCD_goToRowColumn+0x26>
				break;
			/* Row 3 */
         case LCD_ROW3:
				u8Address = u8Col+ADDRESS_ROW_3;
    342a:	40 5b       	subi	r20, 0xB0	; 176
    342c:	40 93 3b 02 	sts	0x023B, r20
				break;
      }
      /* Adding the cursor location to the address*/
      u8Address |= SET_CURSOR_LOCATION;
    3430:	80 91 3b 02 	lds	r24, 0x023B
    3434:	80 68       	ori	r24, 0x80	; 128
    3436:	80 93 3b 02 	sts	0x023B, r24
      Flag++; //Incrementing the flag to go out of the block indicating that the address has been calculated
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	80 93 3a 02 	sts	0x023A, r24
   }
			
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
   if (LCD_sendCommand(u8GroupId, u8Address))
    3440:	89 2f       	mov	r24, r25
    3442:	60 91 3b 02 	lds	r22, 0x023B
    3446:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_sendCommand>
    344a:	88 23       	and	r24, r24
    344c:	19 f0       	breq	.+6      	; 0x3454 <LCD_goToRowColumn+0x4e>
   {
	   /* re-initialize the flag*/
      Flag = 0;
    344e:	10 92 3a 02 	sts	0x023A, r1
    3452:	81 e0       	ldi	r24, 0x01	; 1
      return E_OK;
   }
	return E_ERROR;
}//end LCD_goToRowColumn
    3454:	08 95       	ret

00003456 <LCD_displayCharacter>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR , E_OK
* Description     : A function to display a character on the LCD
*************************************************************************************************/
enuErrorStatus_t LCD_displayCharacter(uint8_t u8GroupId, uint8_t u8Data)
{
    3456:	cf 92       	push	r12
    3458:	df 92       	push	r13
    345a:	ef 92       	push	r14
    345c:	ff 92       	push	r15
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	08 2f       	mov	r16, r24
    3468:	f6 2e       	mov	r15, r22
	/* Error handler initialization */
	static enuErrorStatus_t enuRetVar = E_ERROR;
	
	/* Making sure that the function won't proceed as long as the previous state is the current state */
	if(enuDataPreviousState != enuDataCurrentState)
    346a:	90 91 35 02 	lds	r25, 0x0235
    346e:	80 91 bd 01 	lds	r24, 0x01BD
    3472:	89 17       	cp	r24, r25
    3474:	09 f4       	brne	.+2      	; 0x3478 <LCD_displayCharacter+0x22>
    3476:	33 c1       	rjmp	.+614    	; 0x36de <LCD_displayCharacter+0x288>
	{
		switch(enuDataCurrentState)		//Switching case on the current state 
    3478:	92 30       	cpi	r25, 0x02	; 2
    347a:	09 f4       	brne	.+2      	; 0x347e <LCD_displayCharacter+0x28>
    347c:	94 c0       	rjmp	.+296    	; 0x35a6 <LCD_displayCharacter+0x150>
    347e:	93 30       	cpi	r25, 0x03	; 3
    3480:	30 f4       	brcc	.+12     	; 0x348e <LCD_displayCharacter+0x38>
    3482:	99 23       	and	r25, r25
    3484:	71 f0       	breq	.+28     	; 0x34a2 <LCD_displayCharacter+0x4c>
    3486:	91 30       	cpi	r25, 0x01	; 1
    3488:	09 f0       	breq	.+2      	; 0x348c <LCD_displayCharacter+0x36>
    348a:	29 c1       	rjmp	.+594    	; 0x36de <LCD_displayCharacter+0x288>
    348c:	28 c0       	rjmp	.+80     	; 0x34de <LCD_displayCharacter+0x88>
    348e:	94 30       	cpi	r25, 0x04	; 4
    3490:	09 f4       	brne	.+2      	; 0x3494 <LCD_displayCharacter+0x3e>
    3492:	89 c0       	rjmp	.+274    	; 0x35a6 <LCD_displayCharacter+0x150>
    3494:	94 30       	cpi	r25, 0x04	; 4
    3496:	08 f4       	brcc	.+2      	; 0x349a <LCD_displayCharacter+0x44>
    3498:	9d c0       	rjmp	.+314    	; 0x35d4 <LCD_displayCharacter+0x17e>
    349a:	95 30       	cpi	r25, 0x05	; 5
    349c:	09 f0       	breq	.+2      	; 0x34a0 <LCD_displayCharacter+0x4a>
    349e:	1f c1       	rjmp	.+574    	; 0x36de <LCD_displayCharacter+0x288>
    34a0:	17 c1       	rjmp	.+558    	; 0x36d0 <LCD_displayCharacter+0x27a>
		{
			/*The first state , Initializing the DIO pins*/
			case DATA_START:
				enuRetVar=E_ERROR;
    34a2:	10 92 3d 02 	sts	0x023D, r1
				/* Data Mode RS=1 */
				DIO_Write(astrLCDConfigParameters[u8GroupId].u8RSPinDIOGroupId, HIGH);
    34a6:	20 2f       	mov	r18, r16
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	8d e0       	ldi	r24, 0x0D	; 13
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	28 9f       	mul	r18, r24
    34b0:	80 01       	movw	r16, r0
    34b2:	29 9f       	mul	r18, r25
    34b4:	10 0d       	add	r17, r0
    34b6:	38 9f       	mul	r19, r24
    34b8:	10 0d       	add	r17, r0
    34ba:	11 24       	eor	r1, r1
    34bc:	02 54       	subi	r16, 0x42	; 66
    34be:	1e 4f       	sbci	r17, 0xFE	; 254
    34c0:	f8 01       	movw	r30, r16
    34c2:	81 81       	ldd	r24, Z+1	; 0x01
    34c4:	61 e0       	ldi	r22, 0x01	; 1
    34c6:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>

				/* write data to LCD so RW=0 */
				DIO_Write(astrLCDConfigParameters[u8GroupId].u8RWPinDIOGroupId, LOW);
    34ca:	f8 01       	movw	r30, r16
    34cc:	82 81       	ldd	r24, Z+2	; 0x02
    34ce:	60 e0       	ldi	r22, 0x00	; 0
    34d0:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>

				/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
				enuDataPreviousState = enuDataCurrentState;
    34d4:	80 91 35 02 	lds	r24, 0x0235
    34d8:	80 93 bd 01 	sts	0x01BD, r24
    34dc:	77 c0       	rjmp	.+238    	; 0x35cc <LCD_displayCharacter+0x176>
				break;
			
			/* The second state , sending the high 4 bits */
			case DATA_INIT:
				/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
				if(astrLCDConfigParameters[u8GroupId].enuLCDDataMode == LCD_FOUR_BIT_UPPER_PORT_PINS_DATA_MODE)
    34de:	c0 2e       	mov	r12, r16
    34e0:	dd 24       	eor	r13, r13
    34e2:	8d e0       	ldi	r24, 0x0D	; 13
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	c8 9e       	mul	r12, r24
    34e8:	e0 01       	movw	r28, r0
    34ea:	c9 9e       	mul	r12, r25
    34ec:	d0 0d       	add	r29, r0
    34ee:	d8 9e       	mul	r13, r24
    34f0:	d0 0d       	add	r29, r0
    34f2:	11 24       	eor	r1, r1
    34f4:	c2 54       	subi	r28, 0x42	; 66
    34f6:	de 4f       	sbci	r29, 0xFE	; 254
    34f8:	88 81       	ld	r24, Y
    34fa:	88 23       	and	r24, r24
    34fc:	41 f5       	brne	.+80     	; 0x354e <LCD_displayCharacter+0xf8>
				{
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D4_GROUP_ID_INDEX], (u8Data & 0x10) >> 4);
    34fe:	06 2f       	mov	r16, r22
    3500:	10 e0       	ldi	r17, 0x00	; 0
    3502:	b8 01       	movw	r22, r16
    3504:	60 71       	andi	r22, 0x10	; 16
    3506:	70 70       	andi	r23, 0x00	; 0
    3508:	b4 e0       	ldi	r27, 0x04	; 4
    350a:	75 95       	asr	r23
    350c:	67 95       	ror	r22
    350e:	ba 95       	dec	r27
    3510:	e1 f7       	brne	.-8      	; 0x350a <LCD_displayCharacter+0xb4>
    3512:	88 85       	ldd	r24, Y+8	; 0x08
    3514:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D5_GROUP_ID_INDEX], (u8Data & 0x20) >> 5);
    3518:	b8 01       	movw	r22, r16
    351a:	60 72       	andi	r22, 0x20	; 32
    351c:	70 70       	andi	r23, 0x00	; 0
    351e:	a5 e0       	ldi	r26, 0x05	; 5
    3520:	75 95       	asr	r23
    3522:	67 95       	ror	r22
    3524:	aa 95       	dec	r26
    3526:	e1 f7       	brne	.-8      	; 0x3520 <LCD_displayCharacter+0xca>
    3528:	89 85       	ldd	r24, Y+9	; 0x09
    352a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D6_GROUP_ID_INDEX], (u8Data & 0x40) >> 6);
    352e:	00 74       	andi	r16, 0x40	; 64
    3530:	10 70       	andi	r17, 0x00	; 0
    3532:	f6 e0       	ldi	r31, 0x06	; 6
    3534:	15 95       	asr	r17
    3536:	07 95       	ror	r16
    3538:	fa 95       	dec	r31
    353a:	e1 f7       	brne	.-8      	; 0x3534 <LCD_displayCharacter+0xde>
    353c:	8a 85       	ldd	r24, Y+10	; 0x0a
    353e:	60 2f       	mov	r22, r16
    3540:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D7_GROUP_ID_INDEX], (u8Data & 0x80) >> 7);
    3544:	ff 1c       	adc	r15, r15
    3546:	ff 24       	eor	r15, r15
    3548:	ff 1c       	adc	r15, r15
    354a:	8b 85       	ldd	r24, Y+11	; 0x0b
    354c:	2a c0       	rjmp	.+84     	; 0x35a2 <LCD_displayCharacter+0x14c>
				}
				/* out the highest 4 bits of the required data to the data bus D0 --> D3 */
				else if(astrLCDConfigParameters[u8GroupId].enuLCDDataMode == LCD_FOUR_BIT_LOWER_PORT_PINS_DATA_MODE)
    354e:	81 30       	cpi	r24, 0x01	; 1
    3550:	09 f0       	breq	.+2      	; 0x3554 <LCD_displayCharacter+0xfe>
    3552:	96 c0       	rjmp	.+300    	; 0x3680 <LCD_displayCharacter+0x22a>
				{
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D0_GROUP_ID_INDEX], (u8Data & 0x10) >> 4);
    3554:	06 2f       	mov	r16, r22
    3556:	10 e0       	ldi	r17, 0x00	; 0
    3558:	b8 01       	movw	r22, r16
    355a:	60 71       	andi	r22, 0x10	; 16
    355c:	70 70       	andi	r23, 0x00	; 0
    355e:	e4 e0       	ldi	r30, 0x04	; 4
    3560:	75 95       	asr	r23
    3562:	67 95       	ror	r22
    3564:	ea 95       	dec	r30
    3566:	e1 f7       	brne	.-8      	; 0x3560 <LCD_displayCharacter+0x10a>
    3568:	8c 81       	ldd	r24, Y+4	; 0x04
    356a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D1_GROUP_ID_INDEX], (u8Data & 0x20) >> 5);
    356e:	b8 01       	movw	r22, r16
    3570:	60 72       	andi	r22, 0x20	; 32
    3572:	70 70       	andi	r23, 0x00	; 0
    3574:	55 e0       	ldi	r21, 0x05	; 5
    3576:	75 95       	asr	r23
    3578:	67 95       	ror	r22
    357a:	5a 95       	dec	r21
    357c:	e1 f7       	brne	.-8      	; 0x3576 <LCD_displayCharacter+0x120>
    357e:	8d 81       	ldd	r24, Y+5	; 0x05
    3580:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D2_GROUP_ID_INDEX], (u8Data & 0x40) >> 6);
    3584:	00 74       	andi	r16, 0x40	; 64
    3586:	10 70       	andi	r17, 0x00	; 0
    3588:	46 e0       	ldi	r20, 0x06	; 6
    358a:	15 95       	asr	r17
    358c:	07 95       	ror	r16
    358e:	4a 95       	dec	r20
    3590:	e1 f7       	brne	.-8      	; 0x358a <LCD_displayCharacter+0x134>
    3592:	8e 81       	ldd	r24, Y+6	; 0x06
    3594:	60 2f       	mov	r22, r16
    3596:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D3_GROUP_ID_INDEX], (u8Data & 0x80) >> 7);
    359a:	ff 1c       	adc	r15, r15
    359c:	ff 24       	eor	r15, r15
    359e:	ff 1c       	adc	r15, r15
    35a0:	8f 81       	ldd	r24, Y+7	; 0x07
    35a2:	6f 2d       	mov	r22, r15
    35a4:	6b c0       	rjmp	.+214    	; 0x367c <LCD_displayCharacter+0x226>
				break;
			
			/* The third state */
			case DATA1_CFG:
				/* Clear the E-pin */
				DIO_Write(astrLCDConfigParameters[u8GroupId].u8EPinDIOGroupId, LOW);
    35a6:	20 2f       	mov	r18, r16
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	8d e0       	ldi	r24, 0x0D	; 13
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	28 9f       	mul	r18, r24
    35b0:	f0 01       	movw	r30, r0
    35b2:	29 9f       	mul	r18, r25
    35b4:	f0 0d       	add	r31, r0
    35b6:	38 9f       	mul	r19, r24
    35b8:	f0 0d       	add	r31, r0
    35ba:	11 24       	eor	r1, r1
    35bc:	e2 54       	subi	r30, 0x42	; 66
    35be:	fe 4f       	sbci	r31, 0xFE	; 254
    35c0:	83 81       	ldd	r24, Z+3	; 0x03
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
			
				/* Moving to the next state*/
				enuDataCurrentState++;
    35c8:	80 91 35 02 	lds	r24, 0x0235
    35cc:	8f 5f       	subi	r24, 0xFF	; 255
    35ce:	80 93 35 02 	sts	0x0235, r24
    35d2:	85 c0       	rjmp	.+266    	; 0x36de <LCD_displayCharacter+0x288>
				break;

			/* The forth state , sending the lower 4 bits */
			case DATA1_SENT:
				/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
				if(astrLCDConfigParameters[u8GroupId].enuLCDDataMode == LCD_FOUR_BIT_UPPER_PORT_PINS_DATA_MODE)
    35d4:	c0 2e       	mov	r12, r16
    35d6:	dd 24       	eor	r13, r13
    35d8:	8d e0       	ldi	r24, 0x0D	; 13
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	c8 9e       	mul	r12, r24
    35de:	e0 01       	movw	r28, r0
    35e0:	c9 9e       	mul	r12, r25
    35e2:	d0 0d       	add	r29, r0
    35e4:	d8 9e       	mul	r13, r24
    35e6:	d0 0d       	add	r29, r0
    35e8:	11 24       	eor	r1, r1
    35ea:	c2 54       	subi	r28, 0x42	; 66
    35ec:	de 4f       	sbci	r29, 0xFE	; 254
    35ee:	88 81       	ld	r24, Y
    35f0:	88 23       	and	r24, r24
    35f2:	09 f5       	brne	.+66     	; 0x3636 <LCD_displayCharacter+0x1e0>
				{
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D4_GROUP_ID_INDEX], (u8Data & 0x01) >> 0);
    35f4:	61 70       	andi	r22, 0x01	; 1
    35f6:	88 85       	ldd	r24, Y+8	; 0x08
    35f8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D5_GROUP_ID_INDEX], (u8Data & 0x02) >> 1);
    35fc:	0f 2d       	mov	r16, r15
    35fe:	10 e0       	ldi	r17, 0x00	; 0
    3600:	b8 01       	movw	r22, r16
    3602:	62 70       	andi	r22, 0x02	; 2
    3604:	70 70       	andi	r23, 0x00	; 0
    3606:	75 95       	asr	r23
    3608:	67 95       	ror	r22
    360a:	89 85       	ldd	r24, Y+9	; 0x09
    360c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D6_GROUP_ID_INDEX], (u8Data & 0x04) >> 2);
    3610:	b8 01       	movw	r22, r16
    3612:	64 70       	andi	r22, 0x04	; 4
    3614:	70 70       	andi	r23, 0x00	; 0
    3616:	75 95       	asr	r23
    3618:	67 95       	ror	r22
    361a:	75 95       	asr	r23
    361c:	67 95       	ror	r22
    361e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3620:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D7_GROUP_ID_INDEX], (u8Data & 0x08) >> 3);
    3624:	08 70       	andi	r16, 0x08	; 8
    3626:	10 70       	andi	r17, 0x00	; 0
    3628:	93 e0       	ldi	r25, 0x03	; 3
    362a:	15 95       	asr	r17
    362c:	07 95       	ror	r16
    362e:	9a 95       	dec	r25
    3630:	e1 f7       	brne	.-8      	; 0x362a <LCD_displayCharacter+0x1d4>
    3632:	8b 85       	ldd	r24, Y+11	; 0x0b
    3634:	22 c0       	rjmp	.+68     	; 0x367a <LCD_displayCharacter+0x224>
				}
				/* out the lowest 4 bits of the required data to the data bus D0 --> D3 */
				else if(astrLCDConfigParameters[u8GroupId].enuLCDDataMode == LCD_FOUR_BIT_LOWER_PORT_PINS_DATA_MODE)
    3636:	81 30       	cpi	r24, 0x01	; 1
    3638:	19 f5       	brne	.+70     	; 0x3680 <LCD_displayCharacter+0x22a>
				{
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D0_GROUP_ID_INDEX], (u8Data & 0x01) >> 0);
    363a:	61 70       	andi	r22, 0x01	; 1
    363c:	8c 81       	ldd	r24, Y+4	; 0x04
    363e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D1_GROUP_ID_INDEX], (u8Data & 0x02) >> 1);
    3642:	0f 2d       	mov	r16, r15
    3644:	10 e0       	ldi	r17, 0x00	; 0
    3646:	b8 01       	movw	r22, r16
    3648:	62 70       	andi	r22, 0x02	; 2
    364a:	70 70       	andi	r23, 0x00	; 0
    364c:	75 95       	asr	r23
    364e:	67 95       	ror	r22
    3650:	8d 81       	ldd	r24, Y+5	; 0x05
    3652:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D2_GROUP_ID_INDEX], (u8Data & 0x04) >> 2);
    3656:	b8 01       	movw	r22, r16
    3658:	64 70       	andi	r22, 0x04	; 4
    365a:	70 70       	andi	r23, 0x00	; 0
    365c:	75 95       	asr	r23
    365e:	67 95       	ror	r22
    3660:	75 95       	asr	r23
    3662:	67 95       	ror	r22
    3664:	8e 81       	ldd	r24, Y+6	; 0x06
    3666:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
					DIO_Write(astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D3_GROUP_ID_INDEX], (u8Data & 0x08) >> 3);
    366a:	08 70       	andi	r16, 0x08	; 8
    366c:	10 70       	andi	r17, 0x00	; 0
    366e:	a3 e0       	ldi	r26, 0x03	; 3
    3670:	15 95       	asr	r17
    3672:	07 95       	ror	r16
    3674:	aa 95       	dec	r26
    3676:	e1 f7       	brne	.-8      	; 0x3670 <LCD_displayCharacter+0x21a>
    3678:	8f 81       	ldd	r24, Y+7	; 0x07
    367a:	60 2f       	mov	r22, r16
    367c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
				else
				{
				}

				/* Enable LCD E=1 */
				DIO_Write(astrLCDConfigParameters[u8GroupId].u8EPinDIOGroupId, HIGH);
    3680:	8d e0       	ldi	r24, 0x0D	; 13
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	c8 9e       	mul	r12, r24
    3686:	80 01       	movw	r16, r0
    3688:	c9 9e       	mul	r12, r25
    368a:	10 0d       	add	r17, r0
    368c:	d8 9e       	mul	r13, r24
    368e:	10 0d       	add	r17, r0
    3690:	11 24       	eor	r1, r1
    3692:	02 54       	subi	r16, 0x42	; 66
    3694:	1e 4f       	sbci	r17, 0xFE	; 254
    3696:	f8 01       	movw	r30, r16
    3698:	83 81       	ldd	r24, Z+3	; 0x03
    369a:	61 e0       	ldi	r22, 0x01	; 1
    369c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>

				/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
				enuDataPreviousState = enuDataCurrentState;
    36a0:	80 91 35 02 	lds	r24, 0x0235
    36a4:	80 93 bd 01 	sts	0x01BD, r24

				/* For updating the state */
				u8LCDFlag = LCD_DISPLAY_CHARACTER_FLAG;
    36a8:	83 e0       	ldi	r24, 0x03	; 3
    36aa:	80 93 37 02 	sts	0x0237, r24
				TDelay_ms(astrLCDConfigParameters[u8GroupId].u8TDelayGroupId, DELAY_1_MS, LCD_Callback);
    36ae:	f8 01       	movw	r30, r16
    36b0:	84 85       	ldd	r24, Z+12	; 0x0c
    36b2:	01 e0       	ldi	r16, 0x01	; 1
    36b4:	10 e0       	ldi	r17, 0x00	; 0
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	60 e0       	ldi	r22, 0x00	; 0
    36c0:	70 e0       	ldi	r23, 0x00	; 0
    36c2:	f8 ea       	ldi	r31, 0xA8	; 168
    36c4:	ef 2e       	mov	r14, r31
    36c6:	fb e1       	ldi	r31, 0x1B	; 27
    36c8:	ff 2e       	mov	r15, r31
    36ca:	0e 94 67 08 	call	0x10ce	; 0x10ce <TDelay_ms>
    36ce:	07 c0       	rjmp	.+14     	; 0x36de <LCD_displayCharacter+0x288>
				break;
			
			/* The sixth state*/
			case DATA2_SENT:
				/* Returning E_OK*/
				enuRetVar = E_OK;
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	80 93 3d 02 	sts	0x023D, r24

				/* Re-initialize the current state and the previous state to start again from the same point *//* Re-initialize the */
				enuDataCurrentState = DATA_START;
    36d6:	10 92 35 02 	sts	0x0235, r1
				enuDataPreviousState = DATA2_SENT;
    36da:	90 93 bd 01 	sts	0x01BD, r25
	}
	return enuRetVar;
	
	/**************************/

}//end LCD_displayCharacter
    36de:	80 91 3d 02 	lds	r24, 0x023D
    36e2:	df 91       	pop	r29
    36e4:	cf 91       	pop	r28
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    36ea:	ff 90       	pop	r15
    36ec:	ef 90       	pop	r14
    36ee:	df 90       	pop	r13
    36f0:	cf 90       	pop	r12
    36f2:	08 95       	ret

000036f4 <LCD_displayString>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR, E_OK
* Description     : A function to display a string on the LCD
*************************************************************************************************/
enuErrorStatus_t LCD_displayString(uint8_t u8GroupId, const uint8_t *pu8Str)
{
    36f4:	98 2f       	mov	r25, r24
    36f6:	fb 01       	movw	r30, r22
	/* Initialize the index*/
	static uint8_t u8I = 0;

   if (pu8Str == NULLPTR)
    36f8:	61 15       	cp	r22, r1
    36fa:	71 05       	cpc	r23, r1
    36fc:	b9 f0       	breq	.+46     	; 0x372c <LCD_displayString+0x38>
   {
      return E_ERROR;
   }
   
   /*Displaying a character as long as it is not a NULL*/
   if (pu8Str[u8I] != '\0')
    36fe:	80 91 3c 02 	lds	r24, 0x023C
    3702:	e8 0f       	add	r30, r24
    3704:	f1 1d       	adc	r31, r1
    3706:	60 81       	ld	r22, Z
    3708:	66 23       	and	r22, r22
    370a:	61 f0       	breq	.+24     	; 0x3724 <LCD_displayString+0x30>
   {
      if (LCD_displayCharacter(u8GroupId, pu8Str[u8I]))
    370c:	89 2f       	mov	r24, r25
    370e:	0e 94 2b 1a 	call	0x3456	; 0x3456 <LCD_displayCharacter>
    3712:	88 23       	and	r24, r24
    3714:	59 f0       	breq	.+22     	; 0x372c <LCD_displayString+0x38>
      {
		  /* updating the index value */
         u8I++;
    3716:	80 91 3c 02 	lds	r24, 0x023C
    371a:	8f 5f       	subi	r24, 0xFF	; 255
    371c:	80 93 3c 02 	sts	0x023C, r24
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	08 95       	ret
      }
   }
   else
   {
	   /* re-initialize the index value */
      u8I = 0;
    3724:	10 92 3c 02 	sts	0x023C, r1
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	08 95       	ret
      return E_OK;
    372c:	80 e0       	ldi	r24, 0x00	; 0
   }
   return E_ERROR;
}//end LCD_displayString
    372e:	08 95       	ret

00003730 <LCD_displayStringRowColumn>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR , E_OK
* Description     : A function to display a string with particular row and column
*************************************************************************************************/
enuErrorStatus_t LCD_displayStringRowColumn(uint8_t u8GroupId, uint8_t u8Row, uint8_t u8Col,const uint8_t *pu8Str)
{
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	f8 2e       	mov	r15, r24
    3738:	89 01       	movw	r16, r18
	/* go to to the required LCD position */
	LCD_goToRowColumn(u8GroupId, u8Row, u8Col);
    373a:	0e 94 03 1a 	call	0x3406	; 0x3406 <LCD_goToRowColumn>
	/* display the string */
	LCD_displayString(u8GroupId, pu8Str);
    373e:	8f 2d       	mov	r24, r15
    3740:	b8 01       	movw	r22, r16
    3742:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <LCD_displayString>
	return E_OK;
}//end LCD_displayStringRowColumn
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	ff 90       	pop	r15
    374e:	08 95       	ret

00003750 <LCD_Callback>:
}//end LCD_sendCommand

/* The callback function after having the timer finished counting */
static void LCD_Callback(void)
{
	if(u8LCDFlag == LCD_INIT_FLAG) //init
    3750:	80 91 37 02 	lds	r24, 0x0237
    3754:	81 30       	cpi	r24, 0x01	; 1
    3756:	31 f4       	brne	.+12     	; 0x3764 <LCD_Callback+0x14>
	{
		enuInitCurrentState++; //Moving to the next state for the LCD_Init function
    3758:	80 91 33 02 	lds	r24, 0x0233
    375c:	8f 5f       	subi	r24, 0xFF	; 255
    375e:	80 93 33 02 	sts	0x0233, r24
    3762:	1d c0       	rjmp	.+58     	; 0x379e <LCD_Callback+0x4e>
	}
   else if(u8LCDFlag == LCD_SEND_COMMAND_FLAG)//send command
    3764:	80 91 37 02 	lds	r24, 0x0237
    3768:	82 30       	cpi	r24, 0x02	; 2
    376a:	31 f4       	brne	.+12     	; 0x3778 <LCD_Callback+0x28>
	{
		enuCommandCurrentState++;	//Moving to the next state for the LCD_sendCommand function
    376c:	80 91 34 02 	lds	r24, 0x0234
    3770:	8f 5f       	subi	r24, 0xFF	; 255
    3772:	80 93 34 02 	sts	0x0234, r24
    3776:	13 c0       	rjmp	.+38     	; 0x379e <LCD_Callback+0x4e>
	}
   else if(u8LCDFlag == LCD_DISPLAY_CHARACTER_FLAG)///send data
    3778:	80 91 37 02 	lds	r24, 0x0237
    377c:	83 30       	cpi	r24, 0x03	; 3
    377e:	31 f4       	brne	.+12     	; 0x378c <LCD_Callback+0x3c>
	{
		enuDataCurrentState++;  //Moving to the next state for the LCD_displayCharacter function
    3780:	80 91 35 02 	lds	r24, 0x0235
    3784:	8f 5f       	subi	r24, 0xFF	; 255
    3786:	80 93 35 02 	sts	0x0235, r24
    378a:	09 c0       	rjmp	.+18     	; 0x379e <LCD_Callback+0x4e>
	}
   else if(u8LCDFlag == LCD_CLEAR_SCREEN_FLAG)//clear
    378c:	80 91 37 02 	lds	r24, 0x0237
    3790:	84 30       	cpi	r24, 0x04	; 4
    3792:	29 f4       	brne	.+10     	; 0x379e <LCD_Callback+0x4e>
	{
		enuClearState++;  //Moving to the next state for the LCD_clearScreen function
    3794:	80 91 36 02 	lds	r24, 0x0236
    3798:	8f 5f       	subi	r24, 0xFF	; 255
    379a:	80 93 36 02 	sts	0x0236, r24
	}

	TDelay_Stop(astrLCDConfigParameters[0].u8TDelayGroupId); //Resetting the timer to count again
    379e:	80 91 ca 01 	lds	r24, 0x01CA
    37a2:	0e 94 38 08 	call	0x1070	; 0x1070 <TDelay_Stop>
}
    37a6:	08 95       	ret

000037a8 <LCD_intgerToString>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR , E_OK
* Description     : A function to display integer
*************************************************************************************************/
enuErrorStatus_t LCD_intgerToString(uint8_t u8GroupId, uint16_t u16Data)
{
    37a8:	ef 92       	push	r14
    37aa:	ff 92       	push	r15
    37ac:	1f 93       	push	r17
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
    37b6:	60 97       	sbiw	r28, 0x10	; 16
    37b8:	0f b6       	in	r0, 0x3f	; 63
    37ba:	f8 94       	cli
    37bc:	de bf       	out	0x3e, r29	; 62
    37be:	0f be       	out	0x3f, r0	; 63
    37c0:	cd bf       	out	0x3d, r28	; 61
    37c2:	18 2f       	mov	r17, r24
    37c4:	cb 01       	movw	r24, r22
	/* String to hold the ascii result */
   uint8_t strBuff[SCREEN_WIDTH];
   itoa(u16Data, (char*)strBuff, DECIMAL_BASE); /* 10 for decimal */
    37c6:	7e 01       	movw	r14, r28
    37c8:	08 94       	sec
    37ca:	e1 1c       	adc	r14, r1
    37cc:	f1 1c       	adc	r15, r1
    37ce:	b7 01       	movw	r22, r14
    37d0:	4a e0       	ldi	r20, 0x0A	; 10
    37d2:	50 e0       	ldi	r21, 0x00	; 0
    37d4:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <itoa>
   return LCD_displayString(u8GroupId, strBuff);
    37d8:	81 2f       	mov	r24, r17
    37da:	b7 01       	movw	r22, r14
    37dc:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <LCD_displayString>
}//end LCD_intgerToString
    37e0:	60 96       	adiw	r28, 0x10	; 16
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	1f 91       	pop	r17
    37f2:	ff 90       	pop	r15
    37f4:	ef 90       	pop	r14
    37f6:	08 95       	ret

000037f8 <LCD_Init>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR , E_OK
* Description     : A function to initialize the LCD
*************************************************************************************************/
enuErrorStatus_t LCD_Init(uint8_t u8GroupId)
{
    37f8:	ef 92       	push	r14
    37fa:	ff 92       	push	r15
    37fc:	0f 93       	push	r16
    37fe:	1f 93       	push	r17
    3800:	cf 93       	push	r28
    3802:	df 93       	push	r29
    3804:	08 2f       	mov	r16, r24
	/* Error handler initialization */
	static enuErrorStatus_t enuRetVar = E_ERROR;
	
	/* Making sure that the function won't proceed as long as the previous state is the current state */
	if(enuInitPreviousState != enuInitCurrentState)
    3806:	10 91 33 02 	lds	r17, 0x0233
    380a:	80 91 bb 01 	lds	r24, 0x01BB
    380e:	81 17       	cp	r24, r17
    3810:	09 f4       	brne	.+2      	; 0x3814 <LCD_Init+0x1c>
    3812:	ff c0       	rjmp	.+510    	; 0x3a12 <LCD_Init+0x21a>
	{
		switch(enuInitCurrentState) //Switching case on the current state 
    3814:	13 30       	cpi	r17, 0x03	; 3
    3816:	09 f4       	brne	.+2      	; 0x381a <LCD_Init+0x22>
    3818:	d3 c0       	rjmp	.+422    	; 0x39c0 <LCD_Init+0x1c8>
    381a:	14 30       	cpi	r17, 0x04	; 4
    381c:	38 f4       	brcc	.+14     	; 0x382c <LCD_Init+0x34>
    381e:	11 30       	cpi	r17, 0x01	; 1
    3820:	09 f4       	brne	.+2      	; 0x3824 <LCD_Init+0x2c>
    3822:	95 c0       	rjmp	.+298    	; 0x394e <LCD_Init+0x156>
    3824:	12 30       	cpi	r17, 0x02	; 2
    3826:	08 f0       	brcs	.+2      	; 0x382a <LCD_Init+0x32>
    3828:	a0 c0       	rjmp	.+320    	; 0x396a <LCD_Init+0x172>
    382a:	0a c0       	rjmp	.+20     	; 0x3840 <LCD_Init+0x48>
    382c:	15 30       	cpi	r17, 0x05	; 5
    382e:	09 f4       	brne	.+2      	; 0x3832 <LCD_Init+0x3a>
    3830:	cd c0       	rjmp	.+410    	; 0x39cc <LCD_Init+0x1d4>
    3832:	15 30       	cpi	r17, 0x05	; 5
    3834:	08 f4       	brcc	.+2      	; 0x3838 <LCD_Init+0x40>
    3836:	c7 c0       	rjmp	.+398    	; 0x39c6 <LCD_Init+0x1ce>
    3838:	16 30       	cpi	r17, 0x06	; 6
    383a:	09 f0       	breq	.+2      	; 0x383e <LCD_Init+0x46>
    383c:	ea c0       	rjmp	.+468    	; 0x3a12 <LCD_Init+0x21a>
    383e:	e4 c0       	rjmp	.+456    	; 0x3a08 <LCD_Init+0x210>
		{
			/* The first state , Initializing the DIO pins */
			case START_INIT:
				/* Configure the control pins(E,RS,RW) as output pins */
				DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8RSPinDIOGroupId]);
    3840:	e0 2e       	mov	r14, r16
    3842:	ff 24       	eor	r15, r15
    3844:	8d e0       	ldi	r24, 0x0D	; 13
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	e8 9e       	mul	r14, r24
    384a:	e0 01       	movw	r28, r0
    384c:	e9 9e       	mul	r14, r25
    384e:	d0 0d       	add	r29, r0
    3850:	f8 9e       	mul	r15, r24
    3852:	d0 0d       	add	r29, r0
    3854:	11 24       	eor	r1, r1
    3856:	c2 54       	subi	r28, 0x42	; 66
    3858:	de 4f       	sbci	r29, 0xFE	; 254
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	13 e0       	ldi	r17, 0x03	; 3
    385e:	81 9f       	mul	r24, r17
    3860:	c0 01       	movw	r24, r0
    3862:	11 24       	eor	r1, r1
    3864:	87 57       	subi	r24, 0x77	; 119
    3866:	9e 4f       	sbci	r25, 0xFE	; 254
    3868:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
				DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8RWPinDIOGroupId]);
    386c:	8a 81       	ldd	r24, Y+2	; 0x02
    386e:	81 9f       	mul	r24, r17
    3870:	c0 01       	movw	r24, r0
    3872:	11 24       	eor	r1, r1
    3874:	87 57       	subi	r24, 0x77	; 119
    3876:	9e 4f       	sbci	r25, 0xFE	; 254
    3878:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
				DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8EPinDIOGroupId]);
    387c:	8b 81       	ldd	r24, Y+3	; 0x03
    387e:	81 9f       	mul	r24, r17
    3880:	c0 01       	movw	r24, r0
    3882:	11 24       	eor	r1, r1
    3884:	87 57       	subi	r24, 0x77	; 119
    3886:	9e 4f       	sbci	r25, 0xFE	; 254
    3888:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>

				/* Configure the highest 4 bits of the data port as output pins */
				if(astrLCDConfigParameters[u8GroupId].enuLCDDataMode == LCD_FOUR_BIT_UPPER_PORT_PINS_DATA_MODE)
    388c:	88 81       	ld	r24, Y
    388e:	88 23       	and	r24, r24
    3890:	d1 f4       	brne	.+52     	; 0x38c6 <LCD_Init+0xce>
				{
					DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D4_GROUP_ID_INDEX]]);
    3892:	88 85       	ldd	r24, Y+8	; 0x08
    3894:	81 9f       	mul	r24, r17
    3896:	c0 01       	movw	r24, r0
    3898:	11 24       	eor	r1, r1
    389a:	87 57       	subi	r24, 0x77	; 119
    389c:	9e 4f       	sbci	r25, 0xFE	; 254
    389e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
					DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D5_GROUP_ID_INDEX]]);
    38a2:	89 85       	ldd	r24, Y+9	; 0x09
    38a4:	81 9f       	mul	r24, r17
    38a6:	c0 01       	movw	r24, r0
    38a8:	11 24       	eor	r1, r1
    38aa:	87 57       	subi	r24, 0x77	; 119
    38ac:	9e 4f       	sbci	r25, 0xFE	; 254
    38ae:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
					DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D6_GROUP_ID_INDEX]]);
    38b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    38b4:	81 9f       	mul	r24, r17
    38b6:	c0 01       	movw	r24, r0
    38b8:	11 24       	eor	r1, r1
    38ba:	87 57       	subi	r24, 0x77	; 119
    38bc:	9e 4f       	sbci	r25, 0xFE	; 254
    38be:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
					DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D7_GROUP_ID_INDEX]]);
    38c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    38c4:	1b c0       	rjmp	.+54     	; 0x38fc <LCD_Init+0x104>
				}
				/* Configure the lowest 4 bits of the data port as output pins */
				else if(astrLCDConfigParameters[u8GroupId].enuLCDDataMode == LCD_FOUR_BIT_LOWER_PORT_PINS_DATA_MODE)
    38c6:	81 30       	cpi	r24, 0x01	; 1
    38c8:	01 f5       	brne	.+64     	; 0x390a <LCD_Init+0x112>
				{
					DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D0_GROUP_ID_INDEX]]);
    38ca:	8c 81       	ldd	r24, Y+4	; 0x04
    38cc:	81 9f       	mul	r24, r17
    38ce:	c0 01       	movw	r24, r0
    38d0:	11 24       	eor	r1, r1
    38d2:	87 57       	subi	r24, 0x77	; 119
    38d4:	9e 4f       	sbci	r25, 0xFE	; 254
    38d6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
					DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D1_GROUP_ID_INDEX]]);
    38da:	8d 81       	ldd	r24, Y+5	; 0x05
    38dc:	81 9f       	mul	r24, r17
    38de:	c0 01       	movw	r24, r0
    38e0:	11 24       	eor	r1, r1
    38e2:	87 57       	subi	r24, 0x77	; 119
    38e4:	9e 4f       	sbci	r25, 0xFE	; 254
    38e6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
					DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D2_GROUP_ID_INDEX]]);
    38ea:	8e 81       	ldd	r24, Y+6	; 0x06
    38ec:	81 9f       	mul	r24, r17
    38ee:	c0 01       	movw	r24, r0
    38f0:	11 24       	eor	r1, r1
    38f2:	87 57       	subi	r24, 0x77	; 119
    38f4:	9e 4f       	sbci	r25, 0xFE	; 254
    38f6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
					DIO_Init(&astrDIOConfigParameters[astrLCDConfigParameters[u8GroupId].u8DataPinsDIOGroupIds[LCD_D3_GROUP_ID_INDEX]]);
    38fa:	8f 81       	ldd	r24, Y+7	; 0x07
    38fc:	81 9f       	mul	r24, r17
    38fe:	c0 01       	movw	r24, r0
    3900:	11 24       	eor	r1, r1
    3902:	87 57       	subi	r24, 0x77	; 119
    3904:	9e 4f       	sbci	r25, 0xFE	; 254
    3906:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
				}
				else
				{
				}
				/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
				enuInitPreviousState = enuInitCurrentState;
    390a:	80 91 33 02 	lds	r24, 0x0233
    390e:	80 93 bb 01 	sts	0x01BB, r24
				/* Making the flag equal to 1 to make it updating the LCD_Init state in the callback function*/
				u8LCDFlag = LCD_INIT_FLAG;
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	80 93 37 02 	sts	0x0237, r24
				/* Making a delay of 50ms using a timer */
				TDelay_ms(astrLCDConfigParameters[u8GroupId].u8TDelayGroupId, DELAY_50_MS, LCD_Callback);
    3918:	8d e0       	ldi	r24, 0x0D	; 13
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	e8 9e       	mul	r14, r24
    391e:	f0 01       	movw	r30, r0
    3920:	e9 9e       	mul	r14, r25
    3922:	f0 0d       	add	r31, r0
    3924:	f8 9e       	mul	r15, r24
    3926:	f0 0d       	add	r31, r0
    3928:	11 24       	eor	r1, r1
    392a:	e2 54       	subi	r30, 0x42	; 66
    392c:	fe 4f       	sbci	r31, 0xFE	; 254
    392e:	84 85       	ldd	r24, Z+12	; 0x0c
    3930:	02 e3       	ldi	r16, 0x32	; 50
    3932:	10 e0       	ldi	r17, 0x00	; 0
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	40 e0       	ldi	r20, 0x00	; 0
    393a:	50 e0       	ldi	r21, 0x00	; 0
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	70 e0       	ldi	r23, 0x00	; 0
    3940:	e8 ea       	ldi	r30, 0xA8	; 168
    3942:	ee 2e       	mov	r14, r30
    3944:	eb e1       	ldi	r30, 0x1B	; 27
    3946:	fe 2e       	mov	r15, r30
    3948:	0e 94 67 08 	call	0x10ce	; 0x10ce <TDelay_ms>
    394c:	62 c0       	rjmp	.+196    	; 0x3a12 <LCD_Init+0x21a>
				break;
			
			/* The second state , Enabling the 4-bit mode */
			case INIT_DELAY:
				//4 bit mode command 1
				if(LCD_sendCommand(u8GroupId, FOUR_BITS_DATA_MODE))
    394e:	80 2f       	mov	r24, r16
    3950:	62 e0       	ldi	r22, 0x02	; 2
    3952:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_sendCommand>
    3956:	88 23       	and	r24, r24
    3958:	09 f4       	brne	.+2      	; 0x395c <LCD_Init+0x164>
    395a:	5b c0       	rjmp	.+182    	; 0x3a12 <LCD_Init+0x21a>
				{
					/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
					enuInitPreviousState = enuInitCurrentState;
    395c:	80 91 33 02 	lds	r24, 0x0233
    3960:	80 93 bb 01 	sts	0x01BB, r24

					/* Making the flag equal to 1 to make it updating the LCD_Init state in the callback function*/
					u8LCDFlag = LCD_INIT_FLAG;
    3964:	10 93 37 02 	sts	0x0237, r17
    3968:	0e c0       	rjmp	.+28     	; 0x3986 <LCD_Init+0x18e>
				break;
			
			/*The third state , configuring the number of lines and the font */
			case FB_MODE_C1_SENT:
				//4 bit mode command 2
				if(LCD_sendCommand(u8GroupId, TWO_LINE_LCD_Four_BIT_MODE)) /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    396a:	80 2f       	mov	r24, r16
    396c:	68 e2       	ldi	r22, 0x28	; 40
    396e:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_sendCommand>
    3972:	88 23       	and	r24, r24
    3974:	09 f4       	brne	.+2      	; 0x3978 <LCD_Init+0x180>
    3976:	4d c0       	rjmp	.+154    	; 0x3a12 <LCD_Init+0x21a>
				{
					/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
					enuInitPreviousState = enuInitCurrentState;
    3978:	80 91 33 02 	lds	r24, 0x0233
    397c:	80 93 bb 01 	sts	0x01BB, r24

					/* Making the flag equal to 1 to make it updating the LCD_Init state in the callback function*/
					u8LCDFlag = LCD_INIT_FLAG;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	80 93 37 02 	sts	0x0237, r24

					/* Making a delay of 39us using a timer */
					TDelay_us(astrLCDConfigParameters[u8GroupId].u8TDelayGroupId, DELAY_39_US, LCD_Callback);
    3986:	20 2f       	mov	r18, r16
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	8d e0       	ldi	r24, 0x0D	; 13
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	28 9f       	mul	r18, r24
    3990:	f0 01       	movw	r30, r0
    3992:	29 9f       	mul	r18, r25
    3994:	f0 0d       	add	r31, r0
    3996:	38 9f       	mul	r19, r24
    3998:	f0 0d       	add	r31, r0
    399a:	11 24       	eor	r1, r1
    399c:	e2 54       	subi	r30, 0x42	; 66
    399e:	fe 4f       	sbci	r31, 0xFE	; 254
    39a0:	84 85       	ldd	r24, Z+12	; 0x0c
    39a2:	07 e2       	ldi	r16, 0x27	; 39
    39a4:	10 e0       	ldi	r17, 0x00	; 0
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	50 e0       	ldi	r21, 0x00	; 0
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	70 e0       	ldi	r23, 0x00	; 0
    39b2:	98 ea       	ldi	r25, 0xA8	; 168
    39b4:	e9 2e       	mov	r14, r25
    39b6:	9b e1       	ldi	r25, 0x1B	; 27
    39b8:	f9 2e       	mov	r15, r25
    39ba:	0e 94 3b 08 	call	0x1076	; 0x1076 <TDelay_us>
    39be:	29 c0       	rjmp	.+82     	; 0x3a12 <LCD_Init+0x21a>
				}
				break;
			
			/* The third state , Adjusting the cursor appearance */
			case FB_MODE_C2_SENT:
				if(LCD_sendCommand(u8GroupId, CURSOR_OFF))
    39c0:	80 2f       	mov	r24, r16
    39c2:	6c e0       	ldi	r22, 0x0C	; 12
    39c4:	d4 cf       	rjmp	.-88     	; 0x396e <LCD_Init+0x176>
				}
				break;
			
			/* The forth state , updating the cursor move */
			case CURSOR_CMD_SENT:
				if(LCD_sendCommand(u8GroupId, CURSOR_INCREMENT))
    39c6:	80 2f       	mov	r24, r16
    39c8:	66 e0       	ldi	r22, 0x06	; 6
    39ca:	d1 cf       	rjmp	.-94     	; 0x396e <LCD_Init+0x176>
				}
				break;
         
			/* The fifth state , indicating that the cursor options configured successfully , then sending the clear command */
         case CURSOR_INC_CMD_SENT:
				if(LCD_sendCommand(u8GroupId, CLEAR_COMMAND))
    39cc:	80 2f       	mov	r24, r16
    39ce:	61 e0       	ldi	r22, 0x01	; 1
    39d0:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_sendCommand>
    39d4:	88 23       	and	r24, r24
    39d6:	e9 f0       	breq	.+58     	; 0x3a12 <LCD_Init+0x21a>
				{
					/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
					enuInitPreviousState = enuInitCurrentState;
    39d8:	80 91 33 02 	lds	r24, 0x0233
    39dc:	80 93 bb 01 	sts	0x01BB, r24

					/* Making the flag equal to 1 to make it updating the LCD_Init state in the callback function*/
					u8LCDFlag = LCD_INIT_FLAG;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	80 93 37 02 	sts	0x0237, r24

					/* Making a delay of 1530us using a timer */
					TDelay_us(astrLCDConfigParameters[u8GroupId].u8TDelayGroupId, DELAY_1530_US, LCD_Callback);
    39e6:	20 2f       	mov	r18, r16
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	8d e0       	ldi	r24, 0x0D	; 13
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	28 9f       	mul	r18, r24
    39f0:	f0 01       	movw	r30, r0
    39f2:	29 9f       	mul	r18, r25
    39f4:	f0 0d       	add	r31, r0
    39f6:	38 9f       	mul	r19, r24
    39f8:	f0 0d       	add	r31, r0
    39fa:	11 24       	eor	r1, r1
    39fc:	e2 54       	subi	r30, 0x42	; 66
    39fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3a00:	84 85       	ldd	r24, Z+12	; 0x0c
    3a02:	0a ef       	ldi	r16, 0xFA	; 250
    3a04:	15 e0       	ldi	r17, 0x05	; 5
    3a06:	cf cf       	rjmp	.-98     	; 0x39a6 <LCD_Init+0x1ae>
				break;
			
			/* The sixth state , indicating that the clear command is sent successfully */
			case LCD_CLEARED:
				/* Returning the handler E_ON , indicating that the function done successfully */
				enuRetVar = E_OK;
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	80 93 3e 02 	sts	0x023E, r24

				/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
				enuInitPreviousState = enuInitCurrentState;
    3a0e:	10 93 bb 01 	sts	0x01BB, r17
	{		
		//do nothing when the previous state is the current state
	}
	return enuRetVar; //return the Error handler
	/***********************************************/
}//end LCD_init
    3a12:	80 91 3e 02 	lds	r24, 0x023E
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	ff 90       	pop	r15
    3a20:	ef 90       	pop	r14
    3a22:	08 95       	ret

00003a24 <HBridge_SetSpeed>:
*************************************************************************************************/
enuErrorStatus_t HBridge_SetSpeed(uint8_t u8GroupId, uint8_t u8HBridgeMotorSpeed)
{
   enuErrorStatus_t enuRetVar;
   
   if((aenuHBridgeState[u8GroupId] == HBRIDGE_INIT_DONE) 		&& (astrHBridgeConfigParameters[u8GroupId].enuHBridgeEnablePinsControl == PWM_ON_ENABLE_PINS) &&
    3a24:	28 2f       	mov	r18, r24
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	f9 01       	movw	r30, r18
    3a2a:	e1 5c       	subi	r30, 0xC1	; 193
    3a2c:	fd 4f       	sbci	r31, 0xFD	; 253
    3a2e:	80 81       	ld	r24, Z
    3a30:	81 30       	cpi	r24, 0x01	; 1
    3a32:	91 f4       	brne	.+36     	; 0x3a58 <HBridge_SetSpeed+0x34>
    3a34:	f9 01       	movw	r30, r18
    3a36:	83 e0       	ldi	r24, 0x03	; 3
    3a38:	ee 0f       	add	r30, r30
    3a3a:	ff 1f       	adc	r31, r31
    3a3c:	8a 95       	dec	r24
    3a3e:	e1 f7       	brne	.-8      	; 0x3a38 <HBridge_SetSpeed+0x14>
    3a40:	e2 1b       	sub	r30, r18
    3a42:	f3 0b       	sbc	r31, r19
    3a44:	e5 53       	subi	r30, 0x35	; 53
    3a46:	fe 4f       	sbci	r31, 0xFE	; 254
    3a48:	80 81       	ld	r24, Z
    3a4a:	81 30       	cpi	r24, 0x01	; 1
    3a4c:	29 f4       	brne	.+10     	; 0x3a58 <HBridge_SetSpeed+0x34>
    3a4e:	65 36       	cpi	r22, 0x65	; 101
    3a50:	18 f4       	brcc	.+6      	; 0x3a58 <HBridge_SetSpeed+0x34>
   	(u8HBridgeMotorSpeed >= HBRIDGE_MOTOR_SPEED_MIN_VALUE) 	&& (u8HBridgeMotorSpeed <= HBRIDGE_MOTOR_SPEED_MAX_VALUE))
   {
		gu8HBridgeMotorSpeed = u8HBridgeMotorSpeed;
    3a52:	60 93 40 02 	sts	0x0240, r22
    3a56:	08 95       	ret
*************************************************************************************************/
enuErrorStatus_t HBridge_SetSpeed(uint8_t u8GroupId, uint8_t u8HBridgeMotorSpeed)
{
   enuErrorStatus_t enuRetVar;
   
   if((aenuHBridgeState[u8GroupId] == HBRIDGE_INIT_DONE) 		&& (astrHBridgeConfigParameters[u8GroupId].enuHBridgeEnablePinsControl == PWM_ON_ENABLE_PINS) &&
    3a58:	80 e0       	ldi	r24, 0x00	; 0
   else
   {
	   enuRetVar = E_ERROR;
   }
   return enuRetVar;
}
    3a5a:	08 95       	ret

00003a5c <HBridge_SetDirection>:
* Parameters	: u8GroupId, enuHBridgeMotorDirection
* Return Value	: enuErrorStatus_t
* Description  : Set the direction of motors
*************************************************************************************************/
enuErrorStatus_t HBridge_SetDirection(uint8_t u8GroupId, enuHBridgeMotorDirection_t enuHBridgeMotorDirection)
{
    3a5c:	0f 93       	push	r16
    3a5e:	1f 93       	push	r17
   enuErrorStatus_t enuRetVar;
   
   if((aenuHBridgeState[u8GroupId] == HBRIDGE_INIT_DONE) &&
    3a60:	28 2f       	mov	r18, r24
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	f9 01       	movw	r30, r18
    3a66:	e1 5c       	subi	r30, 0xC1	; 193
    3a68:	fd 4f       	sbci	r31, 0xFD	; 253
    3a6a:	80 81       	ld	r24, Z
    3a6c:	81 30       	cpi	r24, 0x01	; 1
    3a6e:	09 f0       	breq	.+2      	; 0x3a72 <HBridge_SetDirection+0x16>
    3a70:	68 c0       	rjmp	.+208    	; 0x3b42 <HBridge_SetDirection+0xe6>
    3a72:	64 30       	cpi	r22, 0x04	; 4
    3a74:	08 f0       	brcs	.+2      	; 0x3a78 <HBridge_SetDirection+0x1c>
    3a76:	65 c0       	rjmp	.+202    	; 0x3b42 <HBridge_SetDirection+0xe6>
   	(enuHBridgeMotorDirection > HBRIDGE_MOTOR_DIRECTION_MIN_VALUE) && (enuHBridgeMotorDirection < HBRIDGE_MOTOR_DIRECTION_MAX_VALUE))
   {
	   /* Checking if the motor is moving forward or backward */
	   if(enuHBridgeMotorDirection == MOVE_FORWARD)
    3a78:	66 23       	and	r22, r22
    3a7a:	99 f4       	brne	.+38     	; 0x3aa2 <HBridge_SetDirection+0x46>
	   {
		   /* Setting the value of 1A direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor1ADirectionPinGroupId, HIGH);
    3a7c:	89 01       	movw	r16, r18
    3a7e:	63 e0       	ldi	r22, 0x03	; 3
    3a80:	00 0f       	add	r16, r16
    3a82:	11 1f       	adc	r17, r17
    3a84:	6a 95       	dec	r22
    3a86:	e1 f7       	brne	.-8      	; 0x3a80 <HBridge_SetDirection+0x24>
    3a88:	02 1b       	sub	r16, r18
    3a8a:	13 0b       	sbc	r17, r19
    3a8c:	05 53       	subi	r16, 0x35	; 53
    3a8e:	1e 4f       	sbci	r17, 0xFE	; 254
    3a90:	f8 01       	movw	r30, r16
    3a92:	83 81       	ldd	r24, Z+3	; 0x03
    3a94:	61 e0       	ldi	r22, 0x01	; 1
    3a96:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
		   /* Clearing the value of 1B direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor1BDirectionPinGroupId, LOW);
    3a9a:	f8 01       	movw	r30, r16
    3a9c:	84 81       	ldd	r24, Z+4	; 0x04
    3a9e:	60 e0       	ldi	r22, 0x00	; 0
    3aa0:	2a c0       	rjmp	.+84     	; 0x3af6 <HBridge_SetDirection+0x9a>
		   /* Setting the value of 2A direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor2ADirectionPinGroupId, HIGH);
		   /* Clearing the value of 2B direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor2BDirectionPinGroupId, LOW);
	   }
	   else if(enuHBridgeMotorDirection == MOVE_BACKWARD)
    3aa2:	61 30       	cpi	r22, 0x01	; 1
    3aa4:	99 f4       	brne	.+38     	; 0x3acc <HBridge_SetDirection+0x70>
	   {
	   	/* Clearing the value of 1A direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor1ADirectionPinGroupId, LOW);
    3aa6:	89 01       	movw	r16, r18
    3aa8:	53 e0       	ldi	r21, 0x03	; 3
    3aaa:	00 0f       	add	r16, r16
    3aac:	11 1f       	adc	r17, r17
    3aae:	5a 95       	dec	r21
    3ab0:	e1 f7       	brne	.-8      	; 0x3aaa <HBridge_SetDirection+0x4e>
    3ab2:	02 1b       	sub	r16, r18
    3ab4:	13 0b       	sbc	r17, r19
    3ab6:	05 53       	subi	r16, 0x35	; 53
    3ab8:	1e 4f       	sbci	r17, 0xFE	; 254
    3aba:	f8 01       	movw	r30, r16
    3abc:	83 81       	ldd	r24, Z+3	; 0x03
    3abe:	60 e0       	ldi	r22, 0x00	; 0
    3ac0:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
		   /* Setting the value of 1B direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor1BDirectionPinGroupId, HIGH);
    3ac4:	f8 01       	movw	r30, r16
    3ac6:	84 81       	ldd	r24, Z+4	; 0x04
    3ac8:	61 e0       	ldi	r22, 0x01	; 1
    3aca:	30 c0       	rjmp	.+96     	; 0x3b2c <HBridge_SetDirection+0xd0>
    3acc:	c9 01       	movw	r24, r18
    3ace:	43 e0       	ldi	r20, 0x03	; 3
    3ad0:	88 0f       	add	r24, r24
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	4a 95       	dec	r20
    3ad6:	e1 f7       	brne	.-8      	; 0x3ad0 <HBridge_SetDirection+0x74>
		   /* Clearing the value of 2A direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor2ADirectionPinGroupId, LOW);
		   /* Setting the value of 2B direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor2BDirectionPinGroupId, HIGH);
	   }
	   else if(enuHBridgeMotorDirection == TURN_LEFT)
    3ad8:	62 30       	cpi	r22, 0x02	; 2
    3ada:	d9 f4       	brne	.+54     	; 0x3b12 <HBridge_SetDirection+0xb6>
	   {
	   	/* Clearing the value of 1A direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor1ADirectionPinGroupId, LOW);
    3adc:	8c 01       	movw	r16, r24
    3ade:	02 1b       	sub	r16, r18
    3ae0:	13 0b       	sbc	r17, r19
    3ae2:	05 53       	subi	r16, 0x35	; 53
    3ae4:	1e 4f       	sbci	r17, 0xFE	; 254
    3ae6:	f8 01       	movw	r30, r16
    3ae8:	83 81       	ldd	r24, Z+3	; 0x03
    3aea:	60 e0       	ldi	r22, 0x00	; 0
    3aec:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
		   /* Setting the value of 1B direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor1BDirectionPinGroupId, HIGH);
    3af0:	f8 01       	movw	r30, r16
    3af2:	84 81       	ldd	r24, Z+4	; 0x04
    3af4:	61 e0       	ldi	r22, 0x01	; 1
    3af6:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
		   /* Setting the value of 2A direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor2ADirectionPinGroupId, HIGH);
    3afa:	f8 01       	movw	r30, r16
    3afc:	85 81       	ldd	r24, Z+5	; 0x05
    3afe:	61 e0       	ldi	r22, 0x01	; 1
    3b00:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
		   /* Clearing the value of 2B direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor2BDirectionPinGroupId, LOW);
    3b04:	f8 01       	movw	r30, r16
    3b06:	86 81       	ldd	r24, Z+6	; 0x06
    3b08:	60 e0       	ldi	r22, 0x00	; 0
    3b0a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	19 c0       	rjmp	.+50     	; 0x3b44 <HBridge_SetDirection+0xe8>
	   }
	   else
	   {
	   	/* Setting the value of 1A direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor1ADirectionPinGroupId, HIGH);
    3b12:	8c 01       	movw	r16, r24
    3b14:	02 1b       	sub	r16, r18
    3b16:	13 0b       	sbc	r17, r19
    3b18:	05 53       	subi	r16, 0x35	; 53
    3b1a:	1e 4f       	sbci	r17, 0xFE	; 254
    3b1c:	f8 01       	movw	r30, r16
    3b1e:	83 81       	ldd	r24, Z+3	; 0x03
    3b20:	61 e0       	ldi	r22, 0x01	; 1
    3b22:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
		   /* Clearing the value of 1B direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor1BDirectionPinGroupId, LOW);
    3b26:	f8 01       	movw	r30, r16
    3b28:	84 81       	ldd	r24, Z+4	; 0x04
    3b2a:	60 e0       	ldi	r22, 0x00	; 0
    3b2c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
		   /* Clearing the value of 2A direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor2ADirectionPinGroupId, LOW);
    3b30:	f8 01       	movw	r30, r16
    3b32:	85 81       	ldd	r24, Z+5	; 0x05
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
		   /* Setting the value of 2B direction pin */
	   	DIO_Write(astrHBridgeConfigParameters[u8GroupId].u8Motor2BDirectionPinGroupId, HIGH);
    3b3a:	f8 01       	movw	r30, r16
    3b3c:	86 81       	ldd	r24, Z+6	; 0x06
    3b3e:	61 e0       	ldi	r22, 0x01	; 1
    3b40:	e4 cf       	rjmp	.-56     	; 0x3b0a <HBridge_SetDirection+0xae>
    3b42:	80 e0       	ldi	r24, 0x00	; 0
   else
   {
	   enuRetVar = E_ERROR;
   }
   return enuRetVar;	
}
    3b44:	1f 91       	pop	r17
    3b46:	0f 91       	pop	r16
    3b48:	08 95       	ret

00003b4a <HBridge_Stop>:
* Parameters	: u8GroupId
* Return Value	: enuErrorStatus_t
* Description  : Stop the rotation of motors
*************************************************************************************************/
enuErrorStatus_t HBridge_Stop(uint8_t u8GroupId)
{
    3b4a:	cf 93       	push	r28
    3b4c:	df 93       	push	r29
   enuErrorStatus_t enuRetVar;
   
   if(aenuHBridgeState[u8GroupId] == HBRIDGE_INIT_DONE)
    3b4e:	28 2f       	mov	r18, r24
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	f9 01       	movw	r30, r18
    3b54:	e1 5c       	subi	r30, 0xC1	; 193
    3b56:	fd 4f       	sbci	r31, 0xFD	; 253
    3b58:	80 81       	ld	r24, Z
    3b5a:	81 30       	cpi	r24, 0x01	; 1
    3b5c:	11 f0       	breq	.+4      	; 0x3b62 <HBridge_Stop+0x18>
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	2f c0       	rjmp	.+94     	; 0x3bc0 <HBridge_Stop+0x76>
   {
      if(astrHBridgeConfigParameters[u8GroupId].enuHBridgeEnablePinsControl == DIO_ON_ENABLE_PINS)
    3b62:	e9 01       	movw	r28, r18
    3b64:	b3 e0       	ldi	r27, 0x03	; 3
    3b66:	cc 0f       	add	r28, r28
    3b68:	dd 1f       	adc	r29, r29
    3b6a:	ba 95       	dec	r27
    3b6c:	e1 f7       	brne	.-8      	; 0x3b66 <HBridge_Stop+0x1c>
    3b6e:	c2 1b       	sub	r28, r18
    3b70:	d3 0b       	sbc	r29, r19
    3b72:	c5 53       	subi	r28, 0x35	; 53
    3b74:	de 4f       	sbci	r29, 0xFE	; 254
    3b76:	88 81       	ld	r24, Y
    3b78:	88 23       	and	r24, r24
    3b7a:	d9 f4       	brne	.+54     	; 0x3bb2 <HBridge_Stop+0x68>
      {
   	   /* Stopping motor 1 */
	   	DIO_Write(astrDIOConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor1EnablePinGroupId].enuDIOPinNo, LOW);
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	fc 01       	movw	r30, r24
    3b82:	ee 0f       	add	r30, r30
    3b84:	ff 1f       	adc	r31, r31
    3b86:	e8 0f       	add	r30, r24
    3b88:	f9 1f       	adc	r31, r25
    3b8a:	e7 57       	subi	r30, 0x77	; 119
    3b8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b8e:	80 81       	ld	r24, Z
    3b90:	60 e0       	ldi	r22, 0x00	; 0
    3b92:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
		   /* Stopping motor 2 */
	   	DIO_Write(astrDIOConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor2EnablePinGroupId].enuDIOPinNo, LOW);
    3b96:	8a 81       	ldd	r24, Y+2	; 0x02
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	fc 01       	movw	r30, r24
    3b9c:	ee 0f       	add	r30, r30
    3b9e:	ff 1f       	adc	r31, r31
    3ba0:	e8 0f       	add	r30, r24
    3ba2:	f9 1f       	adc	r31, r25
    3ba4:	e7 57       	subi	r30, 0x77	; 119
    3ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba8:	80 81       	ld	r24, Z
    3baa:	60 e0       	ldi	r22, 0x00	; 0
    3bac:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
    3bb0:	06 c0       	rjmp	.+12     	; 0x3bbe <HBridge_Stop+0x74>
      }
      else
      {
   	   /* Stopping motor 1 */
   	   PWM_Stop(astrHBridgeConfigParameters[u8GroupId].u8Motor1EnablePinGroupId);
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
    3bb4:	0e 94 cf 13 	call	0x279e	; 0x279e <PWM_Stop>
   	   /* Stopping motor 2 */
   	   PWM_Stop(astrHBridgeConfigParameters[u8GroupId].u8Motor2EnablePinGroupId);
    3bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bba:	0e 94 cf 13 	call	0x279e	; 0x279e <PWM_Stop>
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
   else
   {
	   enuRetVar = E_ERROR;
   }
   return enuRetVar;	
}
    3bc0:	df 91       	pop	r29
    3bc2:	cf 91       	pop	r28
    3bc4:	08 95       	ret

00003bc6 <HBridge_Start>:
* Parameters	: u8GroupId
* Return Value	: enuErrorStatus_t
* Description  : Start the rotation of motors
*************************************************************************************************/
enuErrorStatus_t HBridge_Start(uint8_t u8GroupId)
{
    3bc6:	cf 93       	push	r28
    3bc8:	df 93       	push	r29
   enuErrorStatus_t enuRetVar;
   
   if(aenuHBridgeState[u8GroupId] == HBRIDGE_INIT_DONE)
    3bca:	28 2f       	mov	r18, r24
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	f9 01       	movw	r30, r18
    3bd0:	e1 5c       	subi	r30, 0xC1	; 193
    3bd2:	fd 4f       	sbci	r31, 0xFD	; 253
    3bd4:	80 81       	ld	r24, Z
    3bd6:	81 30       	cpi	r24, 0x01	; 1
    3bd8:	11 f0       	breq	.+4      	; 0x3bde <HBridge_Start+0x18>
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	33 c0       	rjmp	.+102    	; 0x3c44 <HBridge_Start+0x7e>
   {
      if(astrHBridgeConfigParameters[u8GroupId].enuHBridgeEnablePinsControl == DIO_ON_ENABLE_PINS)
    3bde:	e9 01       	movw	r28, r18
    3be0:	43 e0       	ldi	r20, 0x03	; 3
    3be2:	cc 0f       	add	r28, r28
    3be4:	dd 1f       	adc	r29, r29
    3be6:	4a 95       	dec	r20
    3be8:	e1 f7       	brne	.-8      	; 0x3be2 <HBridge_Start+0x1c>
    3bea:	c2 1b       	sub	r28, r18
    3bec:	d3 0b       	sbc	r29, r19
    3bee:	c5 53       	subi	r28, 0x35	; 53
    3bf0:	de 4f       	sbci	r29, 0xFE	; 254
    3bf2:	88 81       	ld	r24, Y
    3bf4:	88 23       	and	r24, r24
    3bf6:	d9 f4       	brne	.+54     	; 0x3c2e <HBridge_Start+0x68>
      {
   		/* Starting motor 1 to move */
	   	DIO_Write(astrDIOConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor1EnablePinGroupId].enuDIOPinNo, HIGH);
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	fc 01       	movw	r30, r24
    3bfe:	ee 0f       	add	r30, r30
    3c00:	ff 1f       	adc	r31, r31
    3c02:	e8 0f       	add	r30, r24
    3c04:	f9 1f       	adc	r31, r25
    3c06:	e7 57       	subi	r30, 0x77	; 119
    3c08:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0a:	80 81       	ld	r24, Z
    3c0c:	61 e0       	ldi	r22, 0x01	; 1
    3c0e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
   		/* Starting motor 2 to move */
	   	DIO_Write(astrDIOConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor2EnablePinGroupId].enuDIOPinNo, HIGH);
    3c12:	8a 81       	ldd	r24, Y+2	; 0x02
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	fc 01       	movw	r30, r24
    3c18:	ee 0f       	add	r30, r30
    3c1a:	ff 1f       	adc	r31, r31
    3c1c:	e8 0f       	add	r30, r24
    3c1e:	f9 1f       	adc	r31, r25
    3c20:	e7 57       	subi	r30, 0x77	; 119
    3c22:	fe 4f       	sbci	r31, 0xFE	; 254
    3c24:	80 81       	ld	r24, Z
    3c26:	61 e0       	ldi	r22, 0x01	; 1
    3c28:	0e 94 ef 15 	call	0x2bde	; 0x2bde <DIO_Write>
    3c2c:	0a c0       	rjmp	.+20     	; 0x3c42 <HBridge_Start+0x7c>
      }
      else
      {
   	   /* Starting motor 1 to move */
   	   PWM_Start(astrHBridgeConfigParameters[u8GroupId].u8Motor1EnablePinGroupId, gu8HBridgeMotorSpeed);
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	60 91 40 02 	lds	r22, 0x0240
    3c34:	0e 94 8e 13 	call	0x271c	; 0x271c <PWM_Start>
   	   /* Starting motor 2 to move */
   	   PWM_Start(astrHBridgeConfigParameters[u8GroupId].u8Motor2EnablePinGroupId, gu8HBridgeMotorSpeed);
    3c38:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3a:	60 91 40 02 	lds	r22, 0x0240
    3c3e:	0e 94 8e 13 	call	0x271c	; 0x271c <PWM_Start>
    3c42:	81 e0       	ldi	r24, 0x01	; 1
   else
   {
	   enuRetVar = E_ERROR;
   }
   return enuRetVar;	
}
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	08 95       	ret

00003c4a <HBridge_Init>:
* Parameters	: u8GroupId
* Return Value	: enuErrorStatus_t
* Description  : Initialize the H Bridge module according to the configuration
*************************************************************************************************/
enuErrorStatus_t HBridge_Init(uint8_t u8GroupId)
{
    3c4a:	cf 92       	push	r12
    3c4c:	df 92       	push	r13
    3c4e:	ff 92       	push	r15
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	cf 93       	push	r28
    3c56:	df 93       	push	r29
   enuErrorStatus_t enuRetVar;

   if((astrHBridgeConfigParameters[u8GroupId].enuHBridgeEnablePinsControl == DIO_ON_ENABLE_PINS) ||
    3c58:	c8 2e       	mov	r12, r24
    3c5a:	dd 24       	eor	r13, r13
    3c5c:	e6 01       	movw	r28, r12
    3c5e:	f3 e0       	ldi	r31, 0x03	; 3
    3c60:	cc 0f       	add	r28, r28
    3c62:	dd 1f       	adc	r29, r29
    3c64:	fa 95       	dec	r31
    3c66:	e1 f7       	brne	.-8      	; 0x3c60 <HBridge_Init+0x16>
    3c68:	cc 19       	sub	r28, r12
    3c6a:	dd 09       	sbc	r29, r13
    3c6c:	c5 53       	subi	r28, 0x35	; 53
    3c6e:	de 4f       	sbci	r29, 0xFE	; 254
    3c70:	88 81       	ld	r24, Y
    3c72:	82 30       	cpi	r24, 0x02	; 2
    3c74:	10 f0       	brcs	.+4      	; 0x3c7a <HBridge_Init+0x30>
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	5f c0       	rjmp	.+190    	; 0x3d38 <HBridge_Init+0xee>
   	(astrHBridgeConfigParameters[u8GroupId].enuHBridgeEnablePinsControl == PWM_ON_ENABLE_PINS))
   {
      if(astrHBridgeConfigParameters[u8GroupId].enuHBridgeEnablePinsControl == DIO_ON_ENABLE_PINS)
    3c7a:	88 23       	and	r24, r24
    3c7c:	91 f4       	brne	.+36     	; 0x3ca2 <HBridge_Init+0x58>
      {
   		/* Initializing the DIO pin for motor 1 enable pin */
   		DIO_Init(&astrDIOConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor1EnablePinGroupId]);
    3c7e:	89 81       	ldd	r24, Y+1	; 0x01
    3c80:	13 e0       	ldi	r17, 0x03	; 3
    3c82:	81 9f       	mul	r24, r17
    3c84:	c0 01       	movw	r24, r0
    3c86:	11 24       	eor	r1, r1
    3c88:	87 57       	subi	r24, 0x77	; 119
    3c8a:	9e 4f       	sbci	r25, 0xFE	; 254
    3c8c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
   		/* Initializing the DIO pin for motor 2 enable pin */
   		DIO_Init(&astrDIOConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor2EnablePinGroupId]);
    3c90:	8a 81       	ldd	r24, Y+2	; 0x02
    3c92:	81 9f       	mul	r24, r17
    3c94:	c0 01       	movw	r24, r0
    3c96:	11 24       	eor	r1, r1
    3c98:	87 57       	subi	r24, 0x77	; 119
    3c9a:	9e 4f       	sbci	r25, 0xFE	; 254
    3c9c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
    3ca0:	14 c0       	rjmp	.+40     	; 0x3cca <HBridge_Init+0x80>
      }
      else
      {
   		/* Initializing the PWM module for motor 1 enable pin */
   		PWM_Init(&astrPWMConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor1EnablePinGroupId]);
    3ca2:	89 81       	ldd	r24, Y+1	; 0x01
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	88 0f       	add	r24, r24
    3ca8:	99 1f       	adc	r25, r25
    3caa:	88 0f       	add	r24, r24
    3cac:	99 1f       	adc	r25, r25
    3cae:	83 58       	subi	r24, 0x83	; 131
    3cb0:	9e 4f       	sbci	r25, 0xFE	; 254
    3cb2:	0e 94 b0 12 	call	0x2560	; 0x2560 <PWM_Init>
   		/* Initializing the PWM module for motor 2 enable pin */
   		PWM_Init(&astrPWMConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor2EnablePinGroupId]);
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	88 0f       	add	r24, r24
    3cbc:	99 1f       	adc	r25, r25
    3cbe:	88 0f       	add	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	83 58       	subi	r24, 0x83	; 131
    3cc4:	9e 4f       	sbci	r25, 0xFE	; 254
    3cc6:	0e 94 b0 12 	call	0x2560	; 0x2560 <PWM_Init>
      }
   	/* Initializing the DIO pin for motor 1A direction pin */
   	DIO_Init(&astrDIOConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor1ADirectionPinGroupId]);
    3cca:	86 01       	movw	r16, r12
    3ccc:	63 e0       	ldi	r22, 0x03	; 3
    3cce:	00 0f       	add	r16, r16
    3cd0:	11 1f       	adc	r17, r17
    3cd2:	6a 95       	dec	r22
    3cd4:	e1 f7       	brne	.-8      	; 0x3cce <HBridge_Init+0x84>
    3cd6:	0c 19       	sub	r16, r12
    3cd8:	1d 09       	sbc	r17, r13
    3cda:	05 53       	subi	r16, 0x35	; 53
    3cdc:	1e 4f       	sbci	r17, 0xFE	; 254
    3cde:	f8 01       	movw	r30, r16
    3ce0:	83 81       	ldd	r24, Z+3	; 0x03
    3ce2:	53 e0       	ldi	r21, 0x03	; 3
    3ce4:	f5 2e       	mov	r15, r21
    3ce6:	8f 9d       	mul	r24, r15
    3ce8:	c0 01       	movw	r24, r0
    3cea:	11 24       	eor	r1, r1
    3cec:	87 57       	subi	r24, 0x77	; 119
    3cee:	9e 4f       	sbci	r25, 0xFE	; 254
    3cf0:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
   	/* Initializing the DIO pin for motor 1B direction pin */
   	DIO_Init(&astrDIOConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor1BDirectionPinGroupId]);
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	84 81       	ldd	r24, Z+4	; 0x04
    3cf8:	8f 9d       	mul	r24, r15
    3cfa:	c0 01       	movw	r24, r0
    3cfc:	11 24       	eor	r1, r1
    3cfe:	87 57       	subi	r24, 0x77	; 119
    3d00:	9e 4f       	sbci	r25, 0xFE	; 254
    3d02:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
   	/* Initializing the DIO pin for motor 2A direction pin */
   	DIO_Init(&astrDIOConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor2ADirectionPinGroupId]);
    3d06:	f8 01       	movw	r30, r16
    3d08:	85 81       	ldd	r24, Z+5	; 0x05
    3d0a:	8f 9d       	mul	r24, r15
    3d0c:	c0 01       	movw	r24, r0
    3d0e:	11 24       	eor	r1, r1
    3d10:	87 57       	subi	r24, 0x77	; 119
    3d12:	9e 4f       	sbci	r25, 0xFE	; 254
    3d14:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
   	/* Initializing the DIO pin for motor 2B direction pin */
   	DIO_Init(&astrDIOConfigParameters[astrHBridgeConfigParameters[u8GroupId].u8Motor2BDirectionPinGroupId]);
    3d18:	f8 01       	movw	r30, r16
    3d1a:	86 81       	ldd	r24, Z+6	; 0x06
    3d1c:	8f 9d       	mul	r24, r15
    3d1e:	c0 01       	movw	r24, r0
    3d20:	11 24       	eor	r1, r1
    3d22:	87 57       	subi	r24, 0x77	; 119
    3d24:	9e 4f       	sbci	r25, 0xFE	; 254
    3d26:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DIO_Init>
   	aenuHBridgeState[u8GroupId] = HBRIDGE_INIT_DONE;
    3d2a:	8f e3       	ldi	r24, 0x3F	; 63
    3d2c:	92 e0       	ldi	r25, 0x02	; 2
    3d2e:	c8 0e       	add	r12, r24
    3d30:	d9 1e       	adc	r13, r25
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	f6 01       	movw	r30, r12
    3d36:	80 83       	st	Z, r24
   else
   {
	   enuRetVar = E_ERROR;
   }
   return enuRetVar;	
}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	1f 91       	pop	r17
    3d3e:	0f 91       	pop	r16
    3d40:	ff 90       	pop	r15
    3d42:	df 90       	pop	r13
    3d44:	cf 90       	pop	r12
    3d46:	08 95       	ret

00003d48 <HBridgeControl_Update>:
*************************************************************************************************/
enuErrorStatus_t HBridgeControl_Update(void)
{
	enuErrorStatus_t enuRetVar;

	if((gu16Distance >= HBRIDGECONTROL_MIN_DISTANCE) && (gu16Distance <= HBRIDGECONTROL_MAX_DISTANCE))
    3d48:	20 91 49 02 	lds	r18, 0x0249
    3d4c:	30 91 4a 02 	lds	r19, 0x024A
    3d50:	c9 01       	movw	r24, r18
    3d52:	8d 97       	sbiw	r24, 0x2d	; 45
    3d54:	0b 97       	sbiw	r24, 0x0b	; 11
    3d56:	18 f4       	brcc	.+6      	; 0x3d5e <HBridgeControl_Update+0x16>
	{
		/* Setting the direction of H-bridge's motors to turn right */
		enuRetVar = HBridge_SetDirection(HBRIDGECONTROL_GROUP_ID, TURN_RIGHT);
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	63 e0       	ldi	r22, 0x03	; 3
    3d5c:	05 c0       	rjmp	.+10     	; 0x3d68 <HBridgeControl_Update+0x20>
	}
	else if(gu16Distance < HBRIDGECONTROL_MIN_DISTANCE)
    3d5e:	2d 32       	cpi	r18, 0x2D	; 45
    3d60:	31 05       	cpc	r19, r1
    3d62:	28 f4       	brcc	.+10     	; 0x3d6e <HBridgeControl_Update+0x26>
	{
		/* Setting the direction of H-bridge's motors to move backward */
		enuRetVar = HBridge_SetDirection(HBRIDGECONTROL_GROUP_ID, MOVE_BACKWARD);
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	61 e0       	ldi	r22, 0x01	; 1
    3d68:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <HBridge_SetDirection>
    3d6c:	08 95       	ret
	}
	else if(gu16Distance > HBRIDGECONTROL_MAX_DISTANCE)
    3d6e:	28 33       	cpi	r18, 0x38	; 56
    3d70:	31 05       	cpc	r19, r1
    3d72:	10 f4       	brcc	.+4      	; 0x3d78 <HBridgeControl_Update+0x30>
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	08 95       	ret
	{
		/* Setting the direction of H-bridge's motors to move forward */
		enuRetVar = HBridge_SetDirection(HBRIDGECONTROL_GROUP_ID, MOVE_FORWARD);
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	60 e0       	ldi	r22, 0x00	; 0
    3d7c:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <HBridge_SetDirection>
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
    3d80:	08 95       	ret

00003d82 <HBridgeControl_Init>:
enuErrorStatus_t HBridgeControl_Init(void)
{
	enuErrorStatus_t enuRetVar;

	/* Initializing the H-bridge module according to the configuration parameters */
	enuRetVar = HBridge_Init(HBRIDGECONTROL_GROUP_ID);
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <HBridge_Init>
	if(enuRetVar == E_OK)
    3d88:	81 30       	cpi	r24, 0x01	; 1
    3d8a:	49 f4       	brne	.+18     	; 0x3d9e <HBridgeControl_Init+0x1c>
	{
		/* Setting the speed of the H-bridge to 40% of its speed */
		enuRetVar = HBridge_SetSpeed(HBRIDGECONTROL_GROUP_ID, HBRIDGECONTROL_SPEED);
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	6e e1       	ldi	r22, 0x1E	; 30
    3d90:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <HBridge_SetSpeed>
		if(enuRetVar == E_OK)
    3d94:	81 30       	cpi	r24, 0x01	; 1
    3d96:	19 f4       	brne	.+6      	; 0x3d9e <HBridgeControl_Init+0x1c>
		{
			/* Triggering the H-bridge's motors to start movement */
			enuRetVar = HBridge_Start(HBRIDGECONTROL_GROUP_ID);
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <HBridge_Start>
	}
	else
	{
	}
	return enuRetVar;
}
    3d9e:	08 95       	ret

00003da0 <GetDistance_Update>:
*************************************************************************************************/
enuErrorStatus_t GetDistance_Update(void)
{
	enuErrorStatus_t enuRetVar;

	if(gu8UltrasonicFlag == HIGH)
    3da0:	80 91 4b 02 	lds	r24, 0x024B
    3da4:	81 30       	cpi	r24, 0x01	; 1
    3da6:	11 f0       	breq	.+4      	; 0x3dac <GetDistance_Update+0xc>
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	08 95       	ret
	{
		/* Getting the distance read from the ultrasonic sensor */
		enuRetVar = Ultrasonic_GetDistance(GETDISTANCE_ULTRASONIC_GROUP_ID, &gu16Distance);
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	69 e4       	ldi	r22, 0x49	; 73
    3db0:	72 e0       	ldi	r23, 0x02	; 2
    3db2:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <Ultrasonic_GetDistance>
		if(enuRetVar == E_OK)
    3db6:	81 30       	cpi	r24, 0x01	; 1
    3db8:	11 f4       	brne	.+4      	; 0x3dbe <GetDistance_Update+0x1e>
		{
			gu8UltrasonicFlag = LOW;
    3dba:	10 92 4b 02 	sts	0x024B, r1
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
    3dbe:	08 95       	ret

00003dc0 <GetDistance_Init>:
enuErrorStatus_t GetDistance_Init(void)
{
	enuErrorStatus_t enuRetVar;

	/* Initializing the ultrasonic sensor module to start */
	enuRetVar = Ultrasonic_Init(GETDISTANCE_ULTRASONIC_GROUP_ID);
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Ultrasonic_Init>
	gu8UltrasonicFlag = LOW;
    3dc6:	10 92 4b 02 	sts	0x024B, r1
	return enuRetVar;
}
    3dca:	08 95       	ret

00003dcc <DisplayDistance_Update>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR, E_OK
* Description     : A function to display the current distance of the robot from any obstacle
*************************************************************************************************/
enuErrorStatus_t DisplayDistance_Update(void)
{
    3dcc:	1f 93       	push	r17
	enuErrorStatus_t enuRetVar;

	switch(genuLCDFlagStates)
    3dce:	80 91 41 02 	lds	r24, 0x0241
    3dd2:	84 30       	cpi	r24, 0x04	; 4
    3dd4:	89 f0       	breq	.+34     	; 0x3df8 <DisplayDistance_Update+0x2c>
    3dd6:	85 30       	cpi	r24, 0x05	; 5
    3dd8:	11 f1       	breq	.+68     	; 0x3e1e <DisplayDistance_Update+0x52>
    3dda:	83 30       	cpi	r24, 0x03	; 3
    3ddc:	59 f4       	brne	.+22     	; 0x3df4 <DisplayDistance_Update+0x28>
	{
		case LCD_DISPLAY_STRING_DONE:
			/* Setting the position on the cursor at row 1 and column 0 */
			enuRetVar = LCD_goToRowColumn(DISPLATDISTANCE_LCD_GROUP_ID, DISPLAYDISTANCE_LCD_POSITION_ROW1, DISPLAYDISTANCE_LCD_POSITION_COL0);
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	61 e0       	ldi	r22, 0x01	; 1
    3de2:	40 e0       	ldi	r20, 0x00	; 0
    3de4:	0e 94 03 1a 	call	0x3406	; 0x3406 <LCD_goToRowColumn>
    3de8:	18 2f       	mov	r17, r24
			if(enuRetVar == E_OK)
    3dea:	81 30       	cpi	r24, 0x01	; 1
    3dec:	19 f5       	brne	.+70     	; 0x3e34 <DisplayDistance_Update+0x68>
			{
				genuLCDFlagStates = LCD_SET_POSITION_1_0_DONE;
    3dee:	84 e0       	ldi	r24, 0x04	; 4
    3df0:	80 93 41 02 	sts	0x0241, r24
    3df4:	10 e0       	ldi	r17, 0x00	; 0
    3df6:	1e c0       	rjmp	.+60     	; 0x3e34 <DisplayDistance_Update+0x68>
			}
		break;

		case LCD_SET_POSITION_1_0_DONE:
			/* Displaying the distance of the obstacle on the LCD screen */
			enuRetVar = LCD_intgerToString(DISPLATDISTANCE_LCD_GROUP_ID, gu16Distance);
    3df8:	60 91 49 02 	lds	r22, 0x0249
    3dfc:	70 91 4a 02 	lds	r23, 0x024A
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <LCD_intgerToString>
    3e06:	18 2f       	mov	r17, r24
			if(enuRetVar == E_OK)
    3e08:	81 30       	cpi	r24, 0x01	; 1
    3e0a:	a1 f4       	brne	.+40     	; 0x3e34 <DisplayDistance_Update+0x68>
			{
				genuLCDFlagStates = LCD_DISPLAY_DISTANCE_DONE;
    3e0c:	85 e0       	ldi	r24, 0x05	; 5
    3e0e:	80 93 41 02 	sts	0x0241, r24
				Ultrasonic_Trigger(DISPLATDISTANCE_ULTRASONIC_GROUP_ID);
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <Ultrasonic_Trigger>
				gu8UltrasonicFlag = HIGH;
    3e18:	10 93 4b 02 	sts	0x024B, r17
    3e1c:	eb cf       	rjmp	.-42     	; 0x3df4 <DisplayDistance_Update+0x28>
			}
		break;

		case LCD_DISPLAY_DISTANCE_DONE:
			/* Displaying spaces on LCD screen to clear any extra numbers */
			enuRetVar = LCD_displayString(DISPLATDISTANCE_LCD_GROUP_ID, (uint8_t*)"          ");
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	60 e6       	ldi	r22, 0x60	; 96
    3e22:	70 e0       	ldi	r23, 0x00	; 0
    3e24:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <LCD_displayString>
    3e28:	18 2f       	mov	r17, r24
			if(enuRetVar == E_OK)
    3e2a:	81 30       	cpi	r24, 0x01	; 1
    3e2c:	19 f4       	brne	.+6      	; 0x3e34 <DisplayDistance_Update+0x68>
			{
				genuLCDFlagStates = LCD_DISPLAY_STRING_DONE;
    3e2e:	83 e0       	ldi	r24, 0x03	; 3
    3e30:	80 93 41 02 	sts	0x0241, r24
		default:
			enuRetVar = E_ERROR;
		break;
	}
	return enuRetVar;
}
    3e34:	81 2f       	mov	r24, r17
    3e36:	1f 91       	pop	r17
    3e38:	08 95       	ret

00003e3a <DisplayDistance_Init>:
*************************************************************************************************/
enuErrorStatus_t DisplayDistance_Init(void)
{
	enuErrorStatus_t enuRetVar;

	switch(genuLCDFlagStates)
    3e3a:	80 91 41 02 	lds	r24, 0x0241
    3e3e:	81 30       	cpi	r24, 0x01	; 1
    3e40:	79 f0       	breq	.+30     	; 0x3e60 <DisplayDistance_Init+0x26>
    3e42:	81 30       	cpi	r24, 0x01	; 1
    3e44:	18 f0       	brcs	.+6      	; 0x3e4c <DisplayDistance_Init+0x12>
    3e46:	82 30       	cpi	r24, 0x02	; 2
    3e48:	49 f4       	brne	.+18     	; 0x3e5c <DisplayDistance_Init+0x22>
    3e4a:	16 c0       	rjmp	.+44     	; 0x3e78 <DisplayDistance_Init+0x3e>
	{
		case LCD_START:
			/* Initializing the LCD module to start displaying on it */
			enuRetVar = LCD_Init(DISPLATDISTANCE_LCD_GROUP_ID);
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <LCD_Init>
    3e52:	98 2f       	mov	r25, r24
			if(enuRetVar == E_OK)
    3e54:	81 30       	cpi	r24, 0x01	; 1
    3e56:	d9 f4       	brne	.+54     	; 0x3e8e <DisplayDistance_Init+0x54>
			{
				genuLCDFlagStates = LCD_INIT_DONE;
    3e58:	80 93 41 02 	sts	0x0241, r24
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	17 c0       	rjmp	.+46     	; 0x3e8e <DisplayDistance_Init+0x54>
			}
		break;

		case LCD_INIT_DONE:
			/* Setting the position on the cursor at row 0 and column 0 */
			enuRetVar = LCD_goToRowColumn(DISPLATDISTANCE_LCD_GROUP_ID, DISPLAYDISTANCE_LCD_POSITION_ROW0, DISPLAYDISTANCE_LCD_POSITION_COL0);
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	60 e0       	ldi	r22, 0x00	; 0
    3e64:	40 e0       	ldi	r20, 0x00	; 0
    3e66:	0e 94 03 1a 	call	0x3406	; 0x3406 <LCD_goToRowColumn>
    3e6a:	98 2f       	mov	r25, r24
			if(enuRetVar == E_OK)
    3e6c:	81 30       	cpi	r24, 0x01	; 1
    3e6e:	79 f4       	brne	.+30     	; 0x3e8e <DisplayDistance_Init+0x54>
			{
				genuLCDFlagStates = LCD_SET_POSITION_0_0_DONE;
    3e70:	82 e0       	ldi	r24, 0x02	; 2
    3e72:	80 93 41 02 	sts	0x0241, r24
    3e76:	f2 cf       	rjmp	.-28     	; 0x3e5c <DisplayDistance_Init+0x22>
			}
		break;

		case LCD_SET_POSITION_0_0_DONE:
			/* Displaying the string "Distance:" on the LCD screen */
			enuRetVar = LCD_displayString(DISPLATDISTANCE_LCD_GROUP_ID, (uint8_t*)"Distance:");
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	6b e6       	ldi	r22, 0x6B	; 107
    3e7c:	70 e0       	ldi	r23, 0x00	; 0
    3e7e:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <LCD_displayString>
    3e82:	98 2f       	mov	r25, r24
			if(enuRetVar == E_OK)
    3e84:	81 30       	cpi	r24, 0x01	; 1
    3e86:	19 f4       	brne	.+6      	; 0x3e8e <DisplayDistance_Init+0x54>
			{
				genuLCDFlagStates = LCD_DISPLAY_STRING_DONE;
    3e88:	83 e0       	ldi	r24, 0x03	; 3
    3e8a:	80 93 41 02 	sts	0x0241, r24
		default:
			enuRetVar = E_ERROR;
		break;
	}
	return enuRetVar;
}
    3e8e:	89 2f       	mov	r24, r25
    3e90:	08 95       	ret

00003e92 <CarControl_Update>:
* Description     : A function to control the movement of the car based on the obstacle distance
*************************************************************************************************/
void CarControl_Update(void)
{
	/* Initializing the Display Distance component */
	DisplayDistance_Init();
    3e92:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <DisplayDistance_Init>
	/* Getting the current distance from the Get Distance component */
	GetDistance_Update();
    3e96:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <GetDistance_Update>
	/* Displaying the current distance from the Display Distance component */
	DisplayDistance_Update();
    3e9a:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <DisplayDistance_Update>
	/* Controlling the H-bridge module from the H-bridge Control component */
	HBridgeControl_Update();
    3e9e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <HBridgeControl_Update>
}
    3ea2:	08 95       	ret

00003ea4 <CarControl_Init>:
void CarControl_Init(void)
{
	enuErrorStatus_t enuRetVar;

	/* Initializing the H-bridge Control component */
	enuRetVar = HBridgeControl_Init();
    3ea4:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <HBridgeControl_Init>
	if(enuRetVar == E_OK)
    3ea8:	81 30       	cpi	r24, 0x01	; 1
    3eaa:	29 f4       	brne	.+10     	; 0x3eb6 <CarControl_Init+0x12>
	{
		/* Initializing the Get Distance component */
		enuRetVar = GetDistance_Init();
    3eac:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <GetDistance_Init>
		if(enuRetVar == E_OK)
    3eb0:	81 30       	cpi	r24, 0x01	; 1
    3eb2:	09 f4       	brne	.+2      	; 0x3eb6 <CarControl_Init+0x12>
		{
			/* Enabling the global interrupt */
			sei();
    3eb4:	78 94       	sei
    3eb6:	08 95       	ret

00003eb8 <main>:
#include "CarControl.h"

int main(void)
{
	CarControl_Init();
    3eb8:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <CarControl_Init>
   while(1)
   {
      CarControl_Update();
    3ebc:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <CarControl_Update>
    3ec0:	fd cf       	rjmp	.-6      	; 0x3ebc <main+0x4>

00003ec2 <__mulsi3>:
    3ec2:	62 9f       	mul	r22, r18
    3ec4:	d0 01       	movw	r26, r0
    3ec6:	73 9f       	mul	r23, r19
    3ec8:	f0 01       	movw	r30, r0
    3eca:	82 9f       	mul	r24, r18
    3ecc:	e0 0d       	add	r30, r0
    3ece:	f1 1d       	adc	r31, r1
    3ed0:	64 9f       	mul	r22, r20
    3ed2:	e0 0d       	add	r30, r0
    3ed4:	f1 1d       	adc	r31, r1
    3ed6:	92 9f       	mul	r25, r18
    3ed8:	f0 0d       	add	r31, r0
    3eda:	83 9f       	mul	r24, r19
    3edc:	f0 0d       	add	r31, r0
    3ede:	74 9f       	mul	r23, r20
    3ee0:	f0 0d       	add	r31, r0
    3ee2:	65 9f       	mul	r22, r21
    3ee4:	f0 0d       	add	r31, r0
    3ee6:	99 27       	eor	r25, r25
    3ee8:	72 9f       	mul	r23, r18
    3eea:	b0 0d       	add	r27, r0
    3eec:	e1 1d       	adc	r30, r1
    3eee:	f9 1f       	adc	r31, r25
    3ef0:	63 9f       	mul	r22, r19
    3ef2:	b0 0d       	add	r27, r0
    3ef4:	e1 1d       	adc	r30, r1
    3ef6:	f9 1f       	adc	r31, r25
    3ef8:	bd 01       	movw	r22, r26
    3efa:	cf 01       	movw	r24, r30
    3efc:	11 24       	eor	r1, r1
    3efe:	08 95       	ret

00003f00 <__udivmodsi4>:
    3f00:	a1 e2       	ldi	r26, 0x21	; 33
    3f02:	1a 2e       	mov	r1, r26
    3f04:	aa 1b       	sub	r26, r26
    3f06:	bb 1b       	sub	r27, r27
    3f08:	fd 01       	movw	r30, r26
    3f0a:	0d c0       	rjmp	.+26     	; 0x3f26 <__udivmodsi4_ep>

00003f0c <__udivmodsi4_loop>:
    3f0c:	aa 1f       	adc	r26, r26
    3f0e:	bb 1f       	adc	r27, r27
    3f10:	ee 1f       	adc	r30, r30
    3f12:	ff 1f       	adc	r31, r31
    3f14:	a2 17       	cp	r26, r18
    3f16:	b3 07       	cpc	r27, r19
    3f18:	e4 07       	cpc	r30, r20
    3f1a:	f5 07       	cpc	r31, r21
    3f1c:	20 f0       	brcs	.+8      	; 0x3f26 <__udivmodsi4_ep>
    3f1e:	a2 1b       	sub	r26, r18
    3f20:	b3 0b       	sbc	r27, r19
    3f22:	e4 0b       	sbc	r30, r20
    3f24:	f5 0b       	sbc	r31, r21

00003f26 <__udivmodsi4_ep>:
    3f26:	66 1f       	adc	r22, r22
    3f28:	77 1f       	adc	r23, r23
    3f2a:	88 1f       	adc	r24, r24
    3f2c:	99 1f       	adc	r25, r25
    3f2e:	1a 94       	dec	r1
    3f30:	69 f7       	brne	.-38     	; 0x3f0c <__udivmodsi4_loop>
    3f32:	60 95       	com	r22
    3f34:	70 95       	com	r23
    3f36:	80 95       	com	r24
    3f38:	90 95       	com	r25
    3f3a:	9b 01       	movw	r18, r22
    3f3c:	ac 01       	movw	r20, r24
    3f3e:	bd 01       	movw	r22, r26
    3f40:	cf 01       	movw	r24, r30
    3f42:	08 95       	ret

00003f44 <__prologue_saves__>:
    3f44:	2f 92       	push	r2
    3f46:	3f 92       	push	r3
    3f48:	4f 92       	push	r4
    3f4a:	5f 92       	push	r5
    3f4c:	6f 92       	push	r6
    3f4e:	7f 92       	push	r7
    3f50:	8f 92       	push	r8
    3f52:	9f 92       	push	r9
    3f54:	af 92       	push	r10
    3f56:	bf 92       	push	r11
    3f58:	cf 92       	push	r12
    3f5a:	df 92       	push	r13
    3f5c:	ef 92       	push	r14
    3f5e:	ff 92       	push	r15
    3f60:	0f 93       	push	r16
    3f62:	1f 93       	push	r17
    3f64:	cf 93       	push	r28
    3f66:	df 93       	push	r29
    3f68:	cd b7       	in	r28, 0x3d	; 61
    3f6a:	de b7       	in	r29, 0x3e	; 62
    3f6c:	ca 1b       	sub	r28, r26
    3f6e:	db 0b       	sbc	r29, r27
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	de bf       	out	0x3e, r29	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	cd bf       	out	0x3d, r28	; 61
    3f7a:	09 94       	ijmp

00003f7c <__epilogue_restores__>:
    3f7c:	2a 88       	ldd	r2, Y+18	; 0x12
    3f7e:	39 88       	ldd	r3, Y+17	; 0x11
    3f80:	48 88       	ldd	r4, Y+16	; 0x10
    3f82:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f84:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f86:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f88:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f8e:	b9 84       	ldd	r11, Y+9	; 0x09
    3f90:	c8 84       	ldd	r12, Y+8	; 0x08
    3f92:	df 80       	ldd	r13, Y+7	; 0x07
    3f94:	ee 80       	ldd	r14, Y+6	; 0x06
    3f96:	fd 80       	ldd	r15, Y+5	; 0x05
    3f98:	0c 81       	ldd	r16, Y+4	; 0x04
    3f9a:	1b 81       	ldd	r17, Y+3	; 0x03
    3f9c:	aa 81       	ldd	r26, Y+2	; 0x02
    3f9e:	b9 81       	ldd	r27, Y+1	; 0x01
    3fa0:	ce 0f       	add	r28, r30
    3fa2:	d1 1d       	adc	r29, r1
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	de bf       	out	0x3e, r29	; 62
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	cd bf       	out	0x3d, r28	; 61
    3fae:	ed 01       	movw	r28, r26
    3fb0:	08 95       	ret

00003fb2 <itoa>:
    3fb2:	fb 01       	movw	r30, r22
    3fb4:	9f 01       	movw	r18, r30
    3fb6:	e8 94       	clt
    3fb8:	42 30       	cpi	r20, 0x02	; 2
    3fba:	c4 f0       	brlt	.+48     	; 0x3fec <itoa+0x3a>
    3fbc:	45 32       	cpi	r20, 0x25	; 37
    3fbe:	b4 f4       	brge	.+44     	; 0x3fec <itoa+0x3a>
    3fc0:	4a 30       	cpi	r20, 0x0A	; 10
    3fc2:	29 f4       	brne	.+10     	; 0x3fce <itoa+0x1c>
    3fc4:	97 fb       	bst	r25, 7
    3fc6:	1e f4       	brtc	.+6      	; 0x3fce <itoa+0x1c>
    3fc8:	90 95       	com	r25
    3fca:	81 95       	neg	r24
    3fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fce:	64 2f       	mov	r22, r20
    3fd0:	77 27       	eor	r23, r23
    3fd2:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    3fd6:	80 5d       	subi	r24, 0xD0	; 208
    3fd8:	8a 33       	cpi	r24, 0x3A	; 58
    3fda:	0c f0       	brlt	.+2      	; 0x3fde <itoa+0x2c>
    3fdc:	89 5d       	subi	r24, 0xD9	; 217
    3fde:	81 93       	st	Z+, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	00 97       	sbiw	r24, 0x00	; 0
    3fe4:	a1 f7       	brne	.-24     	; 0x3fce <itoa+0x1c>
    3fe6:	16 f4       	brtc	.+4      	; 0x3fec <itoa+0x3a>
    3fe8:	5d e2       	ldi	r21, 0x2D	; 45
    3fea:	51 93       	st	Z+, r21
    3fec:	10 82       	st	Z, r1
    3fee:	c9 01       	movw	r24, r18
    3ff0:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <strrev>

00003ff4 <strrev>:
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	67 2f       	mov	r22, r23
    3ffa:	71 91       	ld	r23, Z+
    3ffc:	77 23       	and	r23, r23
    3ffe:	e1 f7       	brne	.-8      	; 0x3ff8 <strrev+0x4>
    4000:	32 97       	sbiw	r30, 0x02	; 2
    4002:	04 c0       	rjmp	.+8      	; 0x400c <strrev+0x18>
    4004:	7c 91       	ld	r23, X
    4006:	6d 93       	st	X+, r22
    4008:	70 83       	st	Z, r23
    400a:	62 91       	ld	r22, -Z
    400c:	ae 17       	cp	r26, r30
    400e:	bf 07       	cpc	r27, r31
    4010:	c8 f3       	brcs	.-14     	; 0x4004 <strrev+0x10>
    4012:	08 95       	ret

00004014 <__udivmodhi4>:
    4014:	aa 1b       	sub	r26, r26
    4016:	bb 1b       	sub	r27, r27
    4018:	51 e1       	ldi	r21, 0x11	; 17
    401a:	07 c0       	rjmp	.+14     	; 0x402a <__udivmodhi4_ep>

0000401c <__udivmodhi4_loop>:
    401c:	aa 1f       	adc	r26, r26
    401e:	bb 1f       	adc	r27, r27
    4020:	a6 17       	cp	r26, r22
    4022:	b7 07       	cpc	r27, r23
    4024:	10 f0       	brcs	.+4      	; 0x402a <__udivmodhi4_ep>
    4026:	a6 1b       	sub	r26, r22
    4028:	b7 0b       	sbc	r27, r23

0000402a <__udivmodhi4_ep>:
    402a:	88 1f       	adc	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	5a 95       	dec	r21
    4030:	a9 f7       	brne	.-22     	; 0x401c <__udivmodhi4_loop>
    4032:	80 95       	com	r24
    4034:	90 95       	com	r25
    4036:	bc 01       	movw	r22, r24
    4038:	cd 01       	movw	r24, r26
    403a:	08 95       	ret

0000403c <_exit>:
    403c:	f8 94       	cli

0000403e <__stop_program>:
    403e:	ff cf       	rjmp	.-2      	; 0x403e <__stop_program>
